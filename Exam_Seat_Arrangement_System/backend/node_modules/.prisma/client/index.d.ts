
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Invigilator
 * 
 */
export type Invigilator = $Result.DefaultSelection<Prisma.$InvigilatorPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model Semester
 * 
 */
export type Semester = $Result.DefaultSelection<Prisma.$SemesterPayload>
/**
 * Model Subject
 * 
 */
export type Subject = $Result.DefaultSelection<Prisma.$SubjectPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Exam
 * 
 */
export type Exam = $Result.DefaultSelection<Prisma.$ExamPayload>
/**
 * Model Room
 * 
 */
export type Room = $Result.DefaultSelection<Prisma.$RoomPayload>
/**
 * Model Bench
 * 
 */
export type Bench = $Result.DefaultSelection<Prisma.$BenchPayload>
/**
 * Model Seat
 * 
 */
export type Seat = $Result.DefaultSelection<Prisma.$SeatPayload>
/**
 * Model RoomAssignment
 * 
 */
export type RoomAssignment = $Result.DefaultSelection<Prisma.$RoomAssignmentPayload>
/**
 * Model InvigilatorAssignment
 * 
 */
export type InvigilatorAssignment = $Result.DefaultSelection<Prisma.$InvigilatorAssignmentPayload>
/**
 * Model SeatingPlan
 * 
 */
export type SeatingPlan = $Result.DefaultSelection<Prisma.$SeatingPlanPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  INVIGILATOR: 'INVIGILATOR'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invigilator`: Exposes CRUD operations for the **Invigilator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invigilators
    * const invigilators = await prisma.invigilator.findMany()
    * ```
    */
  get invigilator(): Prisma.InvigilatorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.semester`: Exposes CRUD operations for the **Semester** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Semesters
    * const semesters = await prisma.semester.findMany()
    * ```
    */
  get semester(): Prisma.SemesterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exam`: Exposes CRUD operations for the **Exam** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exams
    * const exams = await prisma.exam.findMany()
    * ```
    */
  get exam(): Prisma.ExamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): Prisma.RoomDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bench`: Exposes CRUD operations for the **Bench** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Benches
    * const benches = await prisma.bench.findMany()
    * ```
    */
  get bench(): Prisma.BenchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.seat`: Exposes CRUD operations for the **Seat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seats
    * const seats = await prisma.seat.findMany()
    * ```
    */
  get seat(): Prisma.SeatDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roomAssignment`: Exposes CRUD operations for the **RoomAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoomAssignments
    * const roomAssignments = await prisma.roomAssignment.findMany()
    * ```
    */
  get roomAssignment(): Prisma.RoomAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invigilatorAssignment`: Exposes CRUD operations for the **InvigilatorAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvigilatorAssignments
    * const invigilatorAssignments = await prisma.invigilatorAssignment.findMany()
    * ```
    */
  get invigilatorAssignment(): Prisma.InvigilatorAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.seatingPlan`: Exposes CRUD operations for the **SeatingPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SeatingPlans
    * const seatingPlans = await prisma.seatingPlan.findMany()
    * ```
    */
  get seatingPlan(): Prisma.SeatingPlanDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Invigilator: 'Invigilator',
    Course: 'Course',
    Semester: 'Semester',
    Subject: 'Subject',
    Student: 'Student',
    Exam: 'Exam',
    Room: 'Room',
    Bench: 'Bench',
    Seat: 'Seat',
    RoomAssignment: 'RoomAssignment',
    InvigilatorAssignment: 'InvigilatorAssignment',
    SeatingPlan: 'SeatingPlan'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "invigilator" | "course" | "semester" | "subject" | "student" | "exam" | "room" | "bench" | "seat" | "roomAssignment" | "invigilatorAssignment" | "seatingPlan"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Invigilator: {
        payload: Prisma.$InvigilatorPayload<ExtArgs>
        fields: Prisma.InvigilatorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvigilatorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvigilatorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorPayload>
          }
          findFirst: {
            args: Prisma.InvigilatorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvigilatorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorPayload>
          }
          findMany: {
            args: Prisma.InvigilatorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorPayload>[]
          }
          create: {
            args: Prisma.InvigilatorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorPayload>
          }
          createMany: {
            args: Prisma.InvigilatorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvigilatorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorPayload>[]
          }
          delete: {
            args: Prisma.InvigilatorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorPayload>
          }
          update: {
            args: Prisma.InvigilatorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorPayload>
          }
          deleteMany: {
            args: Prisma.InvigilatorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvigilatorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvigilatorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorPayload>[]
          }
          upsert: {
            args: Prisma.InvigilatorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorPayload>
          }
          aggregate: {
            args: Prisma.InvigilatorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvigilator>
          }
          groupBy: {
            args: Prisma.InvigilatorGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvigilatorGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvigilatorCountArgs<ExtArgs>
            result: $Utils.Optional<InvigilatorCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      Semester: {
        payload: Prisma.$SemesterPayload<ExtArgs>
        fields: Prisma.SemesterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SemesterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemesterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SemesterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemesterPayload>
          }
          findFirst: {
            args: Prisma.SemesterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemesterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SemesterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemesterPayload>
          }
          findMany: {
            args: Prisma.SemesterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemesterPayload>[]
          }
          create: {
            args: Prisma.SemesterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemesterPayload>
          }
          createMany: {
            args: Prisma.SemesterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SemesterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemesterPayload>[]
          }
          delete: {
            args: Prisma.SemesterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemesterPayload>
          }
          update: {
            args: Prisma.SemesterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemesterPayload>
          }
          deleteMany: {
            args: Prisma.SemesterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SemesterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SemesterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemesterPayload>[]
          }
          upsert: {
            args: Prisma.SemesterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemesterPayload>
          }
          aggregate: {
            args: Prisma.SemesterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSemester>
          }
          groupBy: {
            args: Prisma.SemesterGroupByArgs<ExtArgs>
            result: $Utils.Optional<SemesterGroupByOutputType>[]
          }
          count: {
            args: Prisma.SemesterCountArgs<ExtArgs>
            result: $Utils.Optional<SemesterCountAggregateOutputType> | number
          }
        }
      }
      Subject: {
        payload: Prisma.$SubjectPayload<ExtArgs>
        fields: Prisma.SubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findFirst: {
            args: Prisma.SubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findMany: {
            args: Prisma.SubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          create: {
            args: Prisma.SubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          createMany: {
            args: Prisma.SubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          delete: {
            args: Prisma.SubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          update: {
            args: Prisma.SubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          upsert: {
            args: Prisma.SubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          aggregate: {
            args: Prisma.SubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubject>
          }
          groupBy: {
            args: Prisma.SubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Exam: {
        payload: Prisma.$ExamPayload<ExtArgs>
        fields: Prisma.ExamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          findFirst: {
            args: Prisma.ExamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          findMany: {
            args: Prisma.ExamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>[]
          }
          create: {
            args: Prisma.ExamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          createMany: {
            args: Prisma.ExamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>[]
          }
          delete: {
            args: Prisma.ExamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          update: {
            args: Prisma.ExamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          deleteMany: {
            args: Prisma.ExamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExamUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>[]
          }
          upsert: {
            args: Prisma.ExamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          aggregate: {
            args: Prisma.ExamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExam>
          }
          groupBy: {
            args: Prisma.ExamGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExamGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExamCountArgs<ExtArgs>
            result: $Utils.Optional<ExamCountAggregateOutputType> | number
          }
        }
      }
      Room: {
        payload: Prisma.$RoomPayload<ExtArgs>
        fields: Prisma.RoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findFirst: {
            args: Prisma.RoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findMany: {
            args: Prisma.RoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          create: {
            args: Prisma.RoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          createMany: {
            args: Prisma.RoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          delete: {
            args: Prisma.RoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          update: {
            args: Prisma.RoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          deleteMany: {
            args: Prisma.RoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          upsert: {
            args: Prisma.RoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          aggregate: {
            args: Prisma.RoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoom>
          }
          groupBy: {
            args: Prisma.RoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomCountArgs<ExtArgs>
            result: $Utils.Optional<RoomCountAggregateOutputType> | number
          }
        }
      }
      Bench: {
        payload: Prisma.$BenchPayload<ExtArgs>
        fields: Prisma.BenchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BenchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BenchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BenchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BenchPayload>
          }
          findFirst: {
            args: Prisma.BenchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BenchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BenchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BenchPayload>
          }
          findMany: {
            args: Prisma.BenchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BenchPayload>[]
          }
          create: {
            args: Prisma.BenchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BenchPayload>
          }
          createMany: {
            args: Prisma.BenchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BenchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BenchPayload>[]
          }
          delete: {
            args: Prisma.BenchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BenchPayload>
          }
          update: {
            args: Prisma.BenchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BenchPayload>
          }
          deleteMany: {
            args: Prisma.BenchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BenchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BenchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BenchPayload>[]
          }
          upsert: {
            args: Prisma.BenchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BenchPayload>
          }
          aggregate: {
            args: Prisma.BenchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBench>
          }
          groupBy: {
            args: Prisma.BenchGroupByArgs<ExtArgs>
            result: $Utils.Optional<BenchGroupByOutputType>[]
          }
          count: {
            args: Prisma.BenchCountArgs<ExtArgs>
            result: $Utils.Optional<BenchCountAggregateOutputType> | number
          }
        }
      }
      Seat: {
        payload: Prisma.$SeatPayload<ExtArgs>
        fields: Prisma.SeatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>
          }
          findFirst: {
            args: Prisma.SeatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>
          }
          findMany: {
            args: Prisma.SeatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>[]
          }
          create: {
            args: Prisma.SeatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>
          }
          createMany: {
            args: Prisma.SeatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>[]
          }
          delete: {
            args: Prisma.SeatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>
          }
          update: {
            args: Prisma.SeatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>
          }
          deleteMany: {
            args: Prisma.SeatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SeatUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>[]
          }
          upsert: {
            args: Prisma.SeatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatPayload>
          }
          aggregate: {
            args: Prisma.SeatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeat>
          }
          groupBy: {
            args: Prisma.SeatGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeatGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeatCountArgs<ExtArgs>
            result: $Utils.Optional<SeatCountAggregateOutputType> | number
          }
        }
      }
      RoomAssignment: {
        payload: Prisma.$RoomAssignmentPayload<ExtArgs>
        fields: Prisma.RoomAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAssignmentPayload>
          }
          findFirst: {
            args: Prisma.RoomAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAssignmentPayload>
          }
          findMany: {
            args: Prisma.RoomAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAssignmentPayload>[]
          }
          create: {
            args: Prisma.RoomAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAssignmentPayload>
          }
          createMany: {
            args: Prisma.RoomAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAssignmentPayload>[]
          }
          delete: {
            args: Prisma.RoomAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAssignmentPayload>
          }
          update: {
            args: Prisma.RoomAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.RoomAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.RoomAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAssignmentPayload>
          }
          aggregate: {
            args: Prisma.RoomAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoomAssignment>
          }
          groupBy: {
            args: Prisma.RoomAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<RoomAssignmentCountAggregateOutputType> | number
          }
        }
      }
      InvigilatorAssignment: {
        payload: Prisma.$InvigilatorAssignmentPayload<ExtArgs>
        fields: Prisma.InvigilatorAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvigilatorAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvigilatorAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorAssignmentPayload>
          }
          findFirst: {
            args: Prisma.InvigilatorAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvigilatorAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorAssignmentPayload>
          }
          findMany: {
            args: Prisma.InvigilatorAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorAssignmentPayload>[]
          }
          create: {
            args: Prisma.InvigilatorAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorAssignmentPayload>
          }
          createMany: {
            args: Prisma.InvigilatorAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvigilatorAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorAssignmentPayload>[]
          }
          delete: {
            args: Prisma.InvigilatorAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorAssignmentPayload>
          }
          update: {
            args: Prisma.InvigilatorAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.InvigilatorAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvigilatorAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvigilatorAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.InvigilatorAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvigilatorAssignmentPayload>
          }
          aggregate: {
            args: Prisma.InvigilatorAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvigilatorAssignment>
          }
          groupBy: {
            args: Prisma.InvigilatorAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvigilatorAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvigilatorAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<InvigilatorAssignmentCountAggregateOutputType> | number
          }
        }
      }
      SeatingPlan: {
        payload: Prisma.$SeatingPlanPayload<ExtArgs>
        fields: Prisma.SeatingPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeatingPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatingPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeatingPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatingPlanPayload>
          }
          findFirst: {
            args: Prisma.SeatingPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatingPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeatingPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatingPlanPayload>
          }
          findMany: {
            args: Prisma.SeatingPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatingPlanPayload>[]
          }
          create: {
            args: Prisma.SeatingPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatingPlanPayload>
          }
          createMany: {
            args: Prisma.SeatingPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeatingPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatingPlanPayload>[]
          }
          delete: {
            args: Prisma.SeatingPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatingPlanPayload>
          }
          update: {
            args: Prisma.SeatingPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatingPlanPayload>
          }
          deleteMany: {
            args: Prisma.SeatingPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeatingPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SeatingPlanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatingPlanPayload>[]
          }
          upsert: {
            args: Prisma.SeatingPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatingPlanPayload>
          }
          aggregate: {
            args: Prisma.SeatingPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeatingPlan>
          }
          groupBy: {
            args: Prisma.SeatingPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeatingPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeatingPlanCountArgs<ExtArgs>
            result: $Utils.Optional<SeatingPlanCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    invigilator?: InvigilatorOmit
    course?: CourseOmit
    semester?: SemesterOmit
    subject?: SubjectOmit
    student?: StudentOmit
    exam?: ExamOmit
    room?: RoomOmit
    bench?: BenchOmit
    seat?: SeatOmit
    roomAssignment?: RoomAssignmentOmit
    invigilatorAssignment?: InvigilatorAssignmentOmit
    seatingPlan?: SeatingPlanOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type InvigilatorCountOutputType
   */

  export type InvigilatorCountOutputType = {
    invigilatorAssignments: number
  }

  export type InvigilatorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invigilatorAssignments?: boolean | InvigilatorCountOutputTypeCountInvigilatorAssignmentsArgs
  }

  // Custom InputTypes
  /**
   * InvigilatorCountOutputType without action
   */
  export type InvigilatorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvigilatorCountOutputType
     */
    select?: InvigilatorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InvigilatorCountOutputType without action
   */
  export type InvigilatorCountOutputTypeCountInvigilatorAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvigilatorAssignmentWhereInput
  }


  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    semesters: number
    students: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    semesters?: boolean | CourseCountOutputTypeCountSemestersArgs
    students?: boolean | CourseCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountSemestersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SemesterWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Count Type SemesterCountOutputType
   */

  export type SemesterCountOutputType = {
    subjects: number
    students: number
  }

  export type SemesterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subjects?: boolean | SemesterCountOutputTypeCountSubjectsArgs
    students?: boolean | SemesterCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * SemesterCountOutputType without action
   */
  export type SemesterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemesterCountOutputType
     */
    select?: SemesterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SemesterCountOutputType without action
   */
  export type SemesterCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
  }

  /**
   * SemesterCountOutputType without action
   */
  export type SemesterCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Count Type SubjectCountOutputType
   */

  export type SubjectCountOutputType = {
    exams: number
  }

  export type SubjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exams?: boolean | SubjectCountOutputTypeCountExamsArgs
  }

  // Custom InputTypes
  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectCountOutputType
     */
    select?: SubjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountExamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamWhereInput
  }


  /**
   * Count Type ExamCountOutputType
   */

  export type ExamCountOutputType = {
    roomAssignments: number
    seatingPlans: number
  }

  export type ExamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomAssignments?: boolean | ExamCountOutputTypeCountRoomAssignmentsArgs
    seatingPlans?: boolean | ExamCountOutputTypeCountSeatingPlansArgs
  }

  // Custom InputTypes
  /**
   * ExamCountOutputType without action
   */
  export type ExamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamCountOutputType
     */
    select?: ExamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExamCountOutputType without action
   */
  export type ExamCountOutputTypeCountRoomAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomAssignmentWhereInput
  }

  /**
   * ExamCountOutputType without action
   */
  export type ExamCountOutputTypeCountSeatingPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeatingPlanWhereInput
  }


  /**
   * Count Type RoomCountOutputType
   */

  export type RoomCountOutputType = {
    benches: number
    roomAssignments: number
  }

  export type RoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    benches?: boolean | RoomCountOutputTypeCountBenchesArgs
    roomAssignments?: boolean | RoomCountOutputTypeCountRoomAssignmentsArgs
  }

  // Custom InputTypes
  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomCountOutputType
     */
    select?: RoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountBenchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BenchWhereInput
  }

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountRoomAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomAssignmentWhereInput
  }


  /**
   * Count Type BenchCountOutputType
   */

  export type BenchCountOutputType = {
    seats: number
  }

  export type BenchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seats?: boolean | BenchCountOutputTypeCountSeatsArgs
  }

  // Custom InputTypes
  /**
   * BenchCountOutputType without action
   */
  export type BenchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BenchCountOutputType
     */
    select?: BenchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BenchCountOutputType without action
   */
  export type BenchCountOutputTypeCountSeatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeatWhereInput
  }


  /**
   * Count Type RoomAssignmentCountOutputType
   */

  export type RoomAssignmentCountOutputType = {
    invigilatorAssignments: number
  }

  export type RoomAssignmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invigilatorAssignments?: boolean | RoomAssignmentCountOutputTypeCountInvigilatorAssignmentsArgs
  }

  // Custom InputTypes
  /**
   * RoomAssignmentCountOutputType without action
   */
  export type RoomAssignmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAssignmentCountOutputType
     */
    select?: RoomAssignmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoomAssignmentCountOutputType without action
   */
  export type RoomAssignmentCountOutputTypeCountInvigilatorAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvigilatorAssignmentWhereInput
  }


  /**
   * Count Type SeatingPlanCountOutputType
   */

  export type SeatingPlanCountOutputType = {
    seats: number
  }

  export type SeatingPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seats?: boolean | SeatingPlanCountOutputTypeCountSeatsArgs
  }

  // Custom InputTypes
  /**
   * SeatingPlanCountOutputType without action
   */
  export type SeatingPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatingPlanCountOutputType
     */
    select?: SeatingPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SeatingPlanCountOutputType without action
   */
  export type SeatingPlanCountOutputTypeCountSeatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeatWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    invigilator?: boolean | User$invigilatorArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invigilator?: boolean | User$invigilatorArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      invigilator: Prisma.$InvigilatorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      role: $Enums.Role
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    invigilator<T extends User$invigilatorArgs<ExtArgs> = {}>(args?: Subset<T, User$invigilatorArgs<ExtArgs>>): Prisma__InvigilatorClient<$Result.GetResult<Prisma.$InvigilatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.invigilator
   */
  export type User$invigilatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invigilator
     */
    select?: InvigilatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invigilator
     */
    omit?: InvigilatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorInclude<ExtArgs> | null
    where?: InvigilatorWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Invigilator
   */

  export type AggregateInvigilator = {
    _count: InvigilatorCountAggregateOutputType | null
    _avg: InvigilatorAvgAggregateOutputType | null
    _sum: InvigilatorSumAggregateOutputType | null
    _min: InvigilatorMinAggregateOutputType | null
    _max: InvigilatorMaxAggregateOutputType | null
  }

  export type InvigilatorAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type InvigilatorSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type InvigilatorMinAggregateOutputType = {
    id: number | null
    course: string | null
    phone: string | null
    address: string | null
    gender: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
  }

  export type InvigilatorMaxAggregateOutputType = {
    id: number | null
    course: string | null
    phone: string | null
    address: string | null
    gender: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
  }

  export type InvigilatorCountAggregateOutputType = {
    id: number
    course: number
    phone: number
    address: number
    gender: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type InvigilatorAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type InvigilatorSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type InvigilatorMinAggregateInputType = {
    id?: true
    course?: true
    phone?: true
    address?: true
    gender?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type InvigilatorMaxAggregateInputType = {
    id?: true
    course?: true
    phone?: true
    address?: true
    gender?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type InvigilatorCountAggregateInputType = {
    id?: true
    course?: true
    phone?: true
    address?: true
    gender?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type InvigilatorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invigilator to aggregate.
     */
    where?: InvigilatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invigilators to fetch.
     */
    orderBy?: InvigilatorOrderByWithRelationInput | InvigilatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvigilatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invigilators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invigilators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invigilators
    **/
    _count?: true | InvigilatorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvigilatorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvigilatorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvigilatorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvigilatorMaxAggregateInputType
  }

  export type GetInvigilatorAggregateType<T extends InvigilatorAggregateArgs> = {
        [P in keyof T & keyof AggregateInvigilator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvigilator[P]>
      : GetScalarType<T[P], AggregateInvigilator[P]>
  }




  export type InvigilatorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvigilatorWhereInput
    orderBy?: InvigilatorOrderByWithAggregationInput | InvigilatorOrderByWithAggregationInput[]
    by: InvigilatorScalarFieldEnum[] | InvigilatorScalarFieldEnum
    having?: InvigilatorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvigilatorCountAggregateInputType | true
    _avg?: InvigilatorAvgAggregateInputType
    _sum?: InvigilatorSumAggregateInputType
    _min?: InvigilatorMinAggregateInputType
    _max?: InvigilatorMaxAggregateInputType
  }

  export type InvigilatorGroupByOutputType = {
    id: number
    course: string
    phone: string
    address: string
    gender: string
    createdAt: Date
    updatedAt: Date
    userId: number
    _count: InvigilatorCountAggregateOutputType | null
    _avg: InvigilatorAvgAggregateOutputType | null
    _sum: InvigilatorSumAggregateOutputType | null
    _min: InvigilatorMinAggregateOutputType | null
    _max: InvigilatorMaxAggregateOutputType | null
  }

  type GetInvigilatorGroupByPayload<T extends InvigilatorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvigilatorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvigilatorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvigilatorGroupByOutputType[P]>
            : GetScalarType<T[P], InvigilatorGroupByOutputType[P]>
        }
      >
    >


  export type InvigilatorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    course?: boolean
    phone?: boolean
    address?: boolean
    gender?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    invigilatorAssignments?: boolean | Invigilator$invigilatorAssignmentsArgs<ExtArgs>
    _count?: boolean | InvigilatorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invigilator"]>

  export type InvigilatorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    course?: boolean
    phone?: boolean
    address?: boolean
    gender?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invigilator"]>

  export type InvigilatorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    course?: boolean
    phone?: boolean
    address?: boolean
    gender?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invigilator"]>

  export type InvigilatorSelectScalar = {
    id?: boolean
    course?: boolean
    phone?: boolean
    address?: boolean
    gender?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type InvigilatorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "course" | "phone" | "address" | "gender" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["invigilator"]>
  export type InvigilatorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    invigilatorAssignments?: boolean | Invigilator$invigilatorAssignmentsArgs<ExtArgs>
    _count?: boolean | InvigilatorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InvigilatorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InvigilatorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InvigilatorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invigilator"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      invigilatorAssignments: Prisma.$InvigilatorAssignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      course: string
      phone: string
      address: string
      gender: string
      createdAt: Date
      updatedAt: Date
      userId: number
    }, ExtArgs["result"]["invigilator"]>
    composites: {}
  }

  type InvigilatorGetPayload<S extends boolean | null | undefined | InvigilatorDefaultArgs> = $Result.GetResult<Prisma.$InvigilatorPayload, S>

  type InvigilatorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvigilatorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvigilatorCountAggregateInputType | true
    }

  export interface InvigilatorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invigilator'], meta: { name: 'Invigilator' } }
    /**
     * Find zero or one Invigilator that matches the filter.
     * @param {InvigilatorFindUniqueArgs} args - Arguments to find a Invigilator
     * @example
     * // Get one Invigilator
     * const invigilator = await prisma.invigilator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvigilatorFindUniqueArgs>(args: SelectSubset<T, InvigilatorFindUniqueArgs<ExtArgs>>): Prisma__InvigilatorClient<$Result.GetResult<Prisma.$InvigilatorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invigilator that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvigilatorFindUniqueOrThrowArgs} args - Arguments to find a Invigilator
     * @example
     * // Get one Invigilator
     * const invigilator = await prisma.invigilator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvigilatorFindUniqueOrThrowArgs>(args: SelectSubset<T, InvigilatorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvigilatorClient<$Result.GetResult<Prisma.$InvigilatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invigilator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvigilatorFindFirstArgs} args - Arguments to find a Invigilator
     * @example
     * // Get one Invigilator
     * const invigilator = await prisma.invigilator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvigilatorFindFirstArgs>(args?: SelectSubset<T, InvigilatorFindFirstArgs<ExtArgs>>): Prisma__InvigilatorClient<$Result.GetResult<Prisma.$InvigilatorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invigilator that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvigilatorFindFirstOrThrowArgs} args - Arguments to find a Invigilator
     * @example
     * // Get one Invigilator
     * const invigilator = await prisma.invigilator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvigilatorFindFirstOrThrowArgs>(args?: SelectSubset<T, InvigilatorFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvigilatorClient<$Result.GetResult<Prisma.$InvigilatorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invigilators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvigilatorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invigilators
     * const invigilators = await prisma.invigilator.findMany()
     * 
     * // Get first 10 Invigilators
     * const invigilators = await prisma.invigilator.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invigilatorWithIdOnly = await prisma.invigilator.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvigilatorFindManyArgs>(args?: SelectSubset<T, InvigilatorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvigilatorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invigilator.
     * @param {InvigilatorCreateArgs} args - Arguments to create a Invigilator.
     * @example
     * // Create one Invigilator
     * const Invigilator = await prisma.invigilator.create({
     *   data: {
     *     // ... data to create a Invigilator
     *   }
     * })
     * 
     */
    create<T extends InvigilatorCreateArgs>(args: SelectSubset<T, InvigilatorCreateArgs<ExtArgs>>): Prisma__InvigilatorClient<$Result.GetResult<Prisma.$InvigilatorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invigilators.
     * @param {InvigilatorCreateManyArgs} args - Arguments to create many Invigilators.
     * @example
     * // Create many Invigilators
     * const invigilator = await prisma.invigilator.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvigilatorCreateManyArgs>(args?: SelectSubset<T, InvigilatorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invigilators and returns the data saved in the database.
     * @param {InvigilatorCreateManyAndReturnArgs} args - Arguments to create many Invigilators.
     * @example
     * // Create many Invigilators
     * const invigilator = await prisma.invigilator.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invigilators and only return the `id`
     * const invigilatorWithIdOnly = await prisma.invigilator.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvigilatorCreateManyAndReturnArgs>(args?: SelectSubset<T, InvigilatorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvigilatorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Invigilator.
     * @param {InvigilatorDeleteArgs} args - Arguments to delete one Invigilator.
     * @example
     * // Delete one Invigilator
     * const Invigilator = await prisma.invigilator.delete({
     *   where: {
     *     // ... filter to delete one Invigilator
     *   }
     * })
     * 
     */
    delete<T extends InvigilatorDeleteArgs>(args: SelectSubset<T, InvigilatorDeleteArgs<ExtArgs>>): Prisma__InvigilatorClient<$Result.GetResult<Prisma.$InvigilatorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invigilator.
     * @param {InvigilatorUpdateArgs} args - Arguments to update one Invigilator.
     * @example
     * // Update one Invigilator
     * const invigilator = await prisma.invigilator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvigilatorUpdateArgs>(args: SelectSubset<T, InvigilatorUpdateArgs<ExtArgs>>): Prisma__InvigilatorClient<$Result.GetResult<Prisma.$InvigilatorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invigilators.
     * @param {InvigilatorDeleteManyArgs} args - Arguments to filter Invigilators to delete.
     * @example
     * // Delete a few Invigilators
     * const { count } = await prisma.invigilator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvigilatorDeleteManyArgs>(args?: SelectSubset<T, InvigilatorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invigilators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvigilatorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invigilators
     * const invigilator = await prisma.invigilator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvigilatorUpdateManyArgs>(args: SelectSubset<T, InvigilatorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invigilators and returns the data updated in the database.
     * @param {InvigilatorUpdateManyAndReturnArgs} args - Arguments to update many Invigilators.
     * @example
     * // Update many Invigilators
     * const invigilator = await prisma.invigilator.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Invigilators and only return the `id`
     * const invigilatorWithIdOnly = await prisma.invigilator.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvigilatorUpdateManyAndReturnArgs>(args: SelectSubset<T, InvigilatorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvigilatorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Invigilator.
     * @param {InvigilatorUpsertArgs} args - Arguments to update or create a Invigilator.
     * @example
     * // Update or create a Invigilator
     * const invigilator = await prisma.invigilator.upsert({
     *   create: {
     *     // ... data to create a Invigilator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invigilator we want to update
     *   }
     * })
     */
    upsert<T extends InvigilatorUpsertArgs>(args: SelectSubset<T, InvigilatorUpsertArgs<ExtArgs>>): Prisma__InvigilatorClient<$Result.GetResult<Prisma.$InvigilatorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invigilators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvigilatorCountArgs} args - Arguments to filter Invigilators to count.
     * @example
     * // Count the number of Invigilators
     * const count = await prisma.invigilator.count({
     *   where: {
     *     // ... the filter for the Invigilators we want to count
     *   }
     * })
    **/
    count<T extends InvigilatorCountArgs>(
      args?: Subset<T, InvigilatorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvigilatorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invigilator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvigilatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvigilatorAggregateArgs>(args: Subset<T, InvigilatorAggregateArgs>): Prisma.PrismaPromise<GetInvigilatorAggregateType<T>>

    /**
     * Group by Invigilator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvigilatorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvigilatorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvigilatorGroupByArgs['orderBy'] }
        : { orderBy?: InvigilatorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvigilatorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvigilatorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invigilator model
   */
  readonly fields: InvigilatorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invigilator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvigilatorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    invigilatorAssignments<T extends Invigilator$invigilatorAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Invigilator$invigilatorAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvigilatorAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invigilator model
   */
  interface InvigilatorFieldRefs {
    readonly id: FieldRef<"Invigilator", 'Int'>
    readonly course: FieldRef<"Invigilator", 'String'>
    readonly phone: FieldRef<"Invigilator", 'String'>
    readonly address: FieldRef<"Invigilator", 'String'>
    readonly gender: FieldRef<"Invigilator", 'String'>
    readonly createdAt: FieldRef<"Invigilator", 'DateTime'>
    readonly updatedAt: FieldRef<"Invigilator", 'DateTime'>
    readonly userId: FieldRef<"Invigilator", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Invigilator findUnique
   */
  export type InvigilatorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invigilator
     */
    select?: InvigilatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invigilator
     */
    omit?: InvigilatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorInclude<ExtArgs> | null
    /**
     * Filter, which Invigilator to fetch.
     */
    where: InvigilatorWhereUniqueInput
  }

  /**
   * Invigilator findUniqueOrThrow
   */
  export type InvigilatorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invigilator
     */
    select?: InvigilatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invigilator
     */
    omit?: InvigilatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorInclude<ExtArgs> | null
    /**
     * Filter, which Invigilator to fetch.
     */
    where: InvigilatorWhereUniqueInput
  }

  /**
   * Invigilator findFirst
   */
  export type InvigilatorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invigilator
     */
    select?: InvigilatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invigilator
     */
    omit?: InvigilatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorInclude<ExtArgs> | null
    /**
     * Filter, which Invigilator to fetch.
     */
    where?: InvigilatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invigilators to fetch.
     */
    orderBy?: InvigilatorOrderByWithRelationInput | InvigilatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invigilators.
     */
    cursor?: InvigilatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invigilators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invigilators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invigilators.
     */
    distinct?: InvigilatorScalarFieldEnum | InvigilatorScalarFieldEnum[]
  }

  /**
   * Invigilator findFirstOrThrow
   */
  export type InvigilatorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invigilator
     */
    select?: InvigilatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invigilator
     */
    omit?: InvigilatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorInclude<ExtArgs> | null
    /**
     * Filter, which Invigilator to fetch.
     */
    where?: InvigilatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invigilators to fetch.
     */
    orderBy?: InvigilatorOrderByWithRelationInput | InvigilatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invigilators.
     */
    cursor?: InvigilatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invigilators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invigilators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invigilators.
     */
    distinct?: InvigilatorScalarFieldEnum | InvigilatorScalarFieldEnum[]
  }

  /**
   * Invigilator findMany
   */
  export type InvigilatorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invigilator
     */
    select?: InvigilatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invigilator
     */
    omit?: InvigilatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorInclude<ExtArgs> | null
    /**
     * Filter, which Invigilators to fetch.
     */
    where?: InvigilatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invigilators to fetch.
     */
    orderBy?: InvigilatorOrderByWithRelationInput | InvigilatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invigilators.
     */
    cursor?: InvigilatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invigilators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invigilators.
     */
    skip?: number
    distinct?: InvigilatorScalarFieldEnum | InvigilatorScalarFieldEnum[]
  }

  /**
   * Invigilator create
   */
  export type InvigilatorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invigilator
     */
    select?: InvigilatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invigilator
     */
    omit?: InvigilatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorInclude<ExtArgs> | null
    /**
     * The data needed to create a Invigilator.
     */
    data: XOR<InvigilatorCreateInput, InvigilatorUncheckedCreateInput>
  }

  /**
   * Invigilator createMany
   */
  export type InvigilatorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invigilators.
     */
    data: InvigilatorCreateManyInput | InvigilatorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invigilator createManyAndReturn
   */
  export type InvigilatorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invigilator
     */
    select?: InvigilatorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invigilator
     */
    omit?: InvigilatorOmit<ExtArgs> | null
    /**
     * The data used to create many Invigilators.
     */
    data: InvigilatorCreateManyInput | InvigilatorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invigilator update
   */
  export type InvigilatorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invigilator
     */
    select?: InvigilatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invigilator
     */
    omit?: InvigilatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorInclude<ExtArgs> | null
    /**
     * The data needed to update a Invigilator.
     */
    data: XOR<InvigilatorUpdateInput, InvigilatorUncheckedUpdateInput>
    /**
     * Choose, which Invigilator to update.
     */
    where: InvigilatorWhereUniqueInput
  }

  /**
   * Invigilator updateMany
   */
  export type InvigilatorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invigilators.
     */
    data: XOR<InvigilatorUpdateManyMutationInput, InvigilatorUncheckedUpdateManyInput>
    /**
     * Filter which Invigilators to update
     */
    where?: InvigilatorWhereInput
    /**
     * Limit how many Invigilators to update.
     */
    limit?: number
  }

  /**
   * Invigilator updateManyAndReturn
   */
  export type InvigilatorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invigilator
     */
    select?: InvigilatorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invigilator
     */
    omit?: InvigilatorOmit<ExtArgs> | null
    /**
     * The data used to update Invigilators.
     */
    data: XOR<InvigilatorUpdateManyMutationInput, InvigilatorUncheckedUpdateManyInput>
    /**
     * Filter which Invigilators to update
     */
    where?: InvigilatorWhereInput
    /**
     * Limit how many Invigilators to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invigilator upsert
   */
  export type InvigilatorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invigilator
     */
    select?: InvigilatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invigilator
     */
    omit?: InvigilatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorInclude<ExtArgs> | null
    /**
     * The filter to search for the Invigilator to update in case it exists.
     */
    where: InvigilatorWhereUniqueInput
    /**
     * In case the Invigilator found by the `where` argument doesn't exist, create a new Invigilator with this data.
     */
    create: XOR<InvigilatorCreateInput, InvigilatorUncheckedCreateInput>
    /**
     * In case the Invigilator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvigilatorUpdateInput, InvigilatorUncheckedUpdateInput>
  }

  /**
   * Invigilator delete
   */
  export type InvigilatorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invigilator
     */
    select?: InvigilatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invigilator
     */
    omit?: InvigilatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorInclude<ExtArgs> | null
    /**
     * Filter which Invigilator to delete.
     */
    where: InvigilatorWhereUniqueInput
  }

  /**
   * Invigilator deleteMany
   */
  export type InvigilatorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invigilators to delete
     */
    where?: InvigilatorWhereInput
    /**
     * Limit how many Invigilators to delete.
     */
    limit?: number
  }

  /**
   * Invigilator.invigilatorAssignments
   */
  export type Invigilator$invigilatorAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvigilatorAssignment
     */
    select?: InvigilatorAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvigilatorAssignment
     */
    omit?: InvigilatorAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorAssignmentInclude<ExtArgs> | null
    where?: InvigilatorAssignmentWhereInput
    orderBy?: InvigilatorAssignmentOrderByWithRelationInput | InvigilatorAssignmentOrderByWithRelationInput[]
    cursor?: InvigilatorAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvigilatorAssignmentScalarFieldEnum | InvigilatorAssignmentScalarFieldEnum[]
  }

  /**
   * Invigilator without action
   */
  export type InvigilatorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invigilator
     */
    select?: InvigilatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invigilator
     */
    omit?: InvigilatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorInclude<ExtArgs> | null
  }


  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    id: number | null
    duration: number | null
  }

  export type CourseSumAggregateOutputType = {
    id: number | null
    duration: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: number | null
    name: string | null
    duration: number | null
  }

  export type CourseMaxAggregateOutputType = {
    id: number | null
    name: string | null
    duration: number | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    name: number
    duration: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    id?: true
    duration?: true
  }

  export type CourseSumAggregateInputType = {
    id?: true
    duration?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    name?: true
    duration?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    name?: true
    duration?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    name?: true
    duration?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: number
    name: string
    duration: number
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    duration?: boolean
    semesters?: boolean | Course$semestersArgs<ExtArgs>
    students?: boolean | Course$studentsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    duration?: boolean
  }, ExtArgs["result"]["course"]>

  export type CourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    duration?: boolean
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    name?: boolean
    duration?: boolean
  }

  export type CourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "duration", ExtArgs["result"]["course"]>
  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    semesters?: boolean | Course$semestersArgs<ExtArgs>
    students?: boolean | Course$studentsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      semesters: Prisma.$SemesterPayload<ExtArgs>[]
      students: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      duration: number
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseFindUniqueArgs>(args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseFindFirstArgs>(args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseFindManyArgs>(args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
     */
    create<T extends CourseCreateArgs>(args: SelectSubset<T, CourseCreateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCreateManyArgs>(args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
     */
    delete<T extends CourseDeleteArgs>(args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseUpdateArgs>(args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseDeleteManyArgs>(args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseUpdateManyArgs>(args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses and returns the data updated in the database.
     * @param {CourseUpdateManyAndReturnArgs} args - Arguments to update many Courses.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
     */
    upsert<T extends CourseUpsertArgs>(args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    semesters<T extends Course$semestersArgs<ExtArgs> = {}>(args?: Subset<T, Course$semestersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SemesterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    students<T extends Course$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Course model
   */
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'Int'>
    readonly name: FieldRef<"Course", 'String'>
    readonly duration: FieldRef<"Course", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course updateManyAndReturn
   */
  export type CourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to delete.
     */
    limit?: number
  }

  /**
   * Course.semesters
   */
  export type Course$semestersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semester
     */
    select?: SemesterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Semester
     */
    omit?: SemesterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemesterInclude<ExtArgs> | null
    where?: SemesterWhereInput
    orderBy?: SemesterOrderByWithRelationInput | SemesterOrderByWithRelationInput[]
    cursor?: SemesterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SemesterScalarFieldEnum | SemesterScalarFieldEnum[]
  }

  /**
   * Course.students
   */
  export type Course$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Model Semester
   */

  export type AggregateSemester = {
    _count: SemesterCountAggregateOutputType | null
    _avg: SemesterAvgAggregateOutputType | null
    _sum: SemesterSumAggregateOutputType | null
    _min: SemesterMinAggregateOutputType | null
    _max: SemesterMaxAggregateOutputType | null
  }

  export type SemesterAvgAggregateOutputType = {
    id: number | null
    semesterNum: number | null
    courseId: number | null
  }

  export type SemesterSumAggregateOutputType = {
    id: number | null
    semesterNum: number | null
    courseId: number | null
  }

  export type SemesterMinAggregateOutputType = {
    id: number | null
    semesterNum: number | null
    courseId: number | null
  }

  export type SemesterMaxAggregateOutputType = {
    id: number | null
    semesterNum: number | null
    courseId: number | null
  }

  export type SemesterCountAggregateOutputType = {
    id: number
    semesterNum: number
    courseId: number
    _all: number
  }


  export type SemesterAvgAggregateInputType = {
    id?: true
    semesterNum?: true
    courseId?: true
  }

  export type SemesterSumAggregateInputType = {
    id?: true
    semesterNum?: true
    courseId?: true
  }

  export type SemesterMinAggregateInputType = {
    id?: true
    semesterNum?: true
    courseId?: true
  }

  export type SemesterMaxAggregateInputType = {
    id?: true
    semesterNum?: true
    courseId?: true
  }

  export type SemesterCountAggregateInputType = {
    id?: true
    semesterNum?: true
    courseId?: true
    _all?: true
  }

  export type SemesterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Semester to aggregate.
     */
    where?: SemesterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Semesters to fetch.
     */
    orderBy?: SemesterOrderByWithRelationInput | SemesterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SemesterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Semesters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Semesters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Semesters
    **/
    _count?: true | SemesterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SemesterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SemesterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SemesterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SemesterMaxAggregateInputType
  }

  export type GetSemesterAggregateType<T extends SemesterAggregateArgs> = {
        [P in keyof T & keyof AggregateSemester]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSemester[P]>
      : GetScalarType<T[P], AggregateSemester[P]>
  }




  export type SemesterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SemesterWhereInput
    orderBy?: SemesterOrderByWithAggregationInput | SemesterOrderByWithAggregationInput[]
    by: SemesterScalarFieldEnum[] | SemesterScalarFieldEnum
    having?: SemesterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SemesterCountAggregateInputType | true
    _avg?: SemesterAvgAggregateInputType
    _sum?: SemesterSumAggregateInputType
    _min?: SemesterMinAggregateInputType
    _max?: SemesterMaxAggregateInputType
  }

  export type SemesterGroupByOutputType = {
    id: number
    semesterNum: number
    courseId: number
    _count: SemesterCountAggregateOutputType | null
    _avg: SemesterAvgAggregateOutputType | null
    _sum: SemesterSumAggregateOutputType | null
    _min: SemesterMinAggregateOutputType | null
    _max: SemesterMaxAggregateOutputType | null
  }

  type GetSemesterGroupByPayload<T extends SemesterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SemesterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SemesterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SemesterGroupByOutputType[P]>
            : GetScalarType<T[P], SemesterGroupByOutputType[P]>
        }
      >
    >


  export type SemesterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    semesterNum?: boolean
    courseId?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    subjects?: boolean | Semester$subjectsArgs<ExtArgs>
    students?: boolean | Semester$studentsArgs<ExtArgs>
    _count?: boolean | SemesterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["semester"]>

  export type SemesterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    semesterNum?: boolean
    courseId?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["semester"]>

  export type SemesterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    semesterNum?: boolean
    courseId?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["semester"]>

  export type SemesterSelectScalar = {
    id?: boolean
    semesterNum?: boolean
    courseId?: boolean
  }

  export type SemesterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "semesterNum" | "courseId", ExtArgs["result"]["semester"]>
  export type SemesterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    subjects?: boolean | Semester$subjectsArgs<ExtArgs>
    students?: boolean | Semester$studentsArgs<ExtArgs>
    _count?: boolean | SemesterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SemesterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type SemesterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }

  export type $SemesterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Semester"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      subjects: Prisma.$SubjectPayload<ExtArgs>[]
      students: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      semesterNum: number
      courseId: number
    }, ExtArgs["result"]["semester"]>
    composites: {}
  }

  type SemesterGetPayload<S extends boolean | null | undefined | SemesterDefaultArgs> = $Result.GetResult<Prisma.$SemesterPayload, S>

  type SemesterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SemesterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SemesterCountAggregateInputType | true
    }

  export interface SemesterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Semester'], meta: { name: 'Semester' } }
    /**
     * Find zero or one Semester that matches the filter.
     * @param {SemesterFindUniqueArgs} args - Arguments to find a Semester
     * @example
     * // Get one Semester
     * const semester = await prisma.semester.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SemesterFindUniqueArgs>(args: SelectSubset<T, SemesterFindUniqueArgs<ExtArgs>>): Prisma__SemesterClient<$Result.GetResult<Prisma.$SemesterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Semester that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SemesterFindUniqueOrThrowArgs} args - Arguments to find a Semester
     * @example
     * // Get one Semester
     * const semester = await prisma.semester.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SemesterFindUniqueOrThrowArgs>(args: SelectSubset<T, SemesterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SemesterClient<$Result.GetResult<Prisma.$SemesterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Semester that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemesterFindFirstArgs} args - Arguments to find a Semester
     * @example
     * // Get one Semester
     * const semester = await prisma.semester.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SemesterFindFirstArgs>(args?: SelectSubset<T, SemesterFindFirstArgs<ExtArgs>>): Prisma__SemesterClient<$Result.GetResult<Prisma.$SemesterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Semester that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemesterFindFirstOrThrowArgs} args - Arguments to find a Semester
     * @example
     * // Get one Semester
     * const semester = await prisma.semester.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SemesterFindFirstOrThrowArgs>(args?: SelectSubset<T, SemesterFindFirstOrThrowArgs<ExtArgs>>): Prisma__SemesterClient<$Result.GetResult<Prisma.$SemesterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Semesters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemesterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Semesters
     * const semesters = await prisma.semester.findMany()
     * 
     * // Get first 10 Semesters
     * const semesters = await prisma.semester.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const semesterWithIdOnly = await prisma.semester.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SemesterFindManyArgs>(args?: SelectSubset<T, SemesterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SemesterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Semester.
     * @param {SemesterCreateArgs} args - Arguments to create a Semester.
     * @example
     * // Create one Semester
     * const Semester = await prisma.semester.create({
     *   data: {
     *     // ... data to create a Semester
     *   }
     * })
     * 
     */
    create<T extends SemesterCreateArgs>(args: SelectSubset<T, SemesterCreateArgs<ExtArgs>>): Prisma__SemesterClient<$Result.GetResult<Prisma.$SemesterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Semesters.
     * @param {SemesterCreateManyArgs} args - Arguments to create many Semesters.
     * @example
     * // Create many Semesters
     * const semester = await prisma.semester.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SemesterCreateManyArgs>(args?: SelectSubset<T, SemesterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Semesters and returns the data saved in the database.
     * @param {SemesterCreateManyAndReturnArgs} args - Arguments to create many Semesters.
     * @example
     * // Create many Semesters
     * const semester = await prisma.semester.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Semesters and only return the `id`
     * const semesterWithIdOnly = await prisma.semester.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SemesterCreateManyAndReturnArgs>(args?: SelectSubset<T, SemesterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SemesterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Semester.
     * @param {SemesterDeleteArgs} args - Arguments to delete one Semester.
     * @example
     * // Delete one Semester
     * const Semester = await prisma.semester.delete({
     *   where: {
     *     // ... filter to delete one Semester
     *   }
     * })
     * 
     */
    delete<T extends SemesterDeleteArgs>(args: SelectSubset<T, SemesterDeleteArgs<ExtArgs>>): Prisma__SemesterClient<$Result.GetResult<Prisma.$SemesterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Semester.
     * @param {SemesterUpdateArgs} args - Arguments to update one Semester.
     * @example
     * // Update one Semester
     * const semester = await prisma.semester.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SemesterUpdateArgs>(args: SelectSubset<T, SemesterUpdateArgs<ExtArgs>>): Prisma__SemesterClient<$Result.GetResult<Prisma.$SemesterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Semesters.
     * @param {SemesterDeleteManyArgs} args - Arguments to filter Semesters to delete.
     * @example
     * // Delete a few Semesters
     * const { count } = await prisma.semester.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SemesterDeleteManyArgs>(args?: SelectSubset<T, SemesterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Semesters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemesterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Semesters
     * const semester = await prisma.semester.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SemesterUpdateManyArgs>(args: SelectSubset<T, SemesterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Semesters and returns the data updated in the database.
     * @param {SemesterUpdateManyAndReturnArgs} args - Arguments to update many Semesters.
     * @example
     * // Update many Semesters
     * const semester = await prisma.semester.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Semesters and only return the `id`
     * const semesterWithIdOnly = await prisma.semester.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SemesterUpdateManyAndReturnArgs>(args: SelectSubset<T, SemesterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SemesterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Semester.
     * @param {SemesterUpsertArgs} args - Arguments to update or create a Semester.
     * @example
     * // Update or create a Semester
     * const semester = await prisma.semester.upsert({
     *   create: {
     *     // ... data to create a Semester
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Semester we want to update
     *   }
     * })
     */
    upsert<T extends SemesterUpsertArgs>(args: SelectSubset<T, SemesterUpsertArgs<ExtArgs>>): Prisma__SemesterClient<$Result.GetResult<Prisma.$SemesterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Semesters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemesterCountArgs} args - Arguments to filter Semesters to count.
     * @example
     * // Count the number of Semesters
     * const count = await prisma.semester.count({
     *   where: {
     *     // ... the filter for the Semesters we want to count
     *   }
     * })
    **/
    count<T extends SemesterCountArgs>(
      args?: Subset<T, SemesterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SemesterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Semester.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemesterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SemesterAggregateArgs>(args: Subset<T, SemesterAggregateArgs>): Prisma.PrismaPromise<GetSemesterAggregateType<T>>

    /**
     * Group by Semester.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemesterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SemesterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SemesterGroupByArgs['orderBy'] }
        : { orderBy?: SemesterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SemesterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSemesterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Semester model
   */
  readonly fields: SemesterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Semester.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SemesterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subjects<T extends Semester$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, Semester$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    students<T extends Semester$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Semester$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Semester model
   */
  interface SemesterFieldRefs {
    readonly id: FieldRef<"Semester", 'Int'>
    readonly semesterNum: FieldRef<"Semester", 'Int'>
    readonly courseId: FieldRef<"Semester", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Semester findUnique
   */
  export type SemesterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semester
     */
    select?: SemesterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Semester
     */
    omit?: SemesterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemesterInclude<ExtArgs> | null
    /**
     * Filter, which Semester to fetch.
     */
    where: SemesterWhereUniqueInput
  }

  /**
   * Semester findUniqueOrThrow
   */
  export type SemesterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semester
     */
    select?: SemesterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Semester
     */
    omit?: SemesterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemesterInclude<ExtArgs> | null
    /**
     * Filter, which Semester to fetch.
     */
    where: SemesterWhereUniqueInput
  }

  /**
   * Semester findFirst
   */
  export type SemesterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semester
     */
    select?: SemesterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Semester
     */
    omit?: SemesterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemesterInclude<ExtArgs> | null
    /**
     * Filter, which Semester to fetch.
     */
    where?: SemesterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Semesters to fetch.
     */
    orderBy?: SemesterOrderByWithRelationInput | SemesterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Semesters.
     */
    cursor?: SemesterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Semesters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Semesters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Semesters.
     */
    distinct?: SemesterScalarFieldEnum | SemesterScalarFieldEnum[]
  }

  /**
   * Semester findFirstOrThrow
   */
  export type SemesterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semester
     */
    select?: SemesterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Semester
     */
    omit?: SemesterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemesterInclude<ExtArgs> | null
    /**
     * Filter, which Semester to fetch.
     */
    where?: SemesterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Semesters to fetch.
     */
    orderBy?: SemesterOrderByWithRelationInput | SemesterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Semesters.
     */
    cursor?: SemesterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Semesters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Semesters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Semesters.
     */
    distinct?: SemesterScalarFieldEnum | SemesterScalarFieldEnum[]
  }

  /**
   * Semester findMany
   */
  export type SemesterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semester
     */
    select?: SemesterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Semester
     */
    omit?: SemesterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemesterInclude<ExtArgs> | null
    /**
     * Filter, which Semesters to fetch.
     */
    where?: SemesterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Semesters to fetch.
     */
    orderBy?: SemesterOrderByWithRelationInput | SemesterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Semesters.
     */
    cursor?: SemesterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Semesters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Semesters.
     */
    skip?: number
    distinct?: SemesterScalarFieldEnum | SemesterScalarFieldEnum[]
  }

  /**
   * Semester create
   */
  export type SemesterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semester
     */
    select?: SemesterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Semester
     */
    omit?: SemesterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemesterInclude<ExtArgs> | null
    /**
     * The data needed to create a Semester.
     */
    data: XOR<SemesterCreateInput, SemesterUncheckedCreateInput>
  }

  /**
   * Semester createMany
   */
  export type SemesterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Semesters.
     */
    data: SemesterCreateManyInput | SemesterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Semester createManyAndReturn
   */
  export type SemesterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semester
     */
    select?: SemesterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Semester
     */
    omit?: SemesterOmit<ExtArgs> | null
    /**
     * The data used to create many Semesters.
     */
    data: SemesterCreateManyInput | SemesterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemesterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Semester update
   */
  export type SemesterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semester
     */
    select?: SemesterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Semester
     */
    omit?: SemesterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemesterInclude<ExtArgs> | null
    /**
     * The data needed to update a Semester.
     */
    data: XOR<SemesterUpdateInput, SemesterUncheckedUpdateInput>
    /**
     * Choose, which Semester to update.
     */
    where: SemesterWhereUniqueInput
  }

  /**
   * Semester updateMany
   */
  export type SemesterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Semesters.
     */
    data: XOR<SemesterUpdateManyMutationInput, SemesterUncheckedUpdateManyInput>
    /**
     * Filter which Semesters to update
     */
    where?: SemesterWhereInput
    /**
     * Limit how many Semesters to update.
     */
    limit?: number
  }

  /**
   * Semester updateManyAndReturn
   */
  export type SemesterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semester
     */
    select?: SemesterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Semester
     */
    omit?: SemesterOmit<ExtArgs> | null
    /**
     * The data used to update Semesters.
     */
    data: XOR<SemesterUpdateManyMutationInput, SemesterUncheckedUpdateManyInput>
    /**
     * Filter which Semesters to update
     */
    where?: SemesterWhereInput
    /**
     * Limit how many Semesters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemesterIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Semester upsert
   */
  export type SemesterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semester
     */
    select?: SemesterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Semester
     */
    omit?: SemesterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemesterInclude<ExtArgs> | null
    /**
     * The filter to search for the Semester to update in case it exists.
     */
    where: SemesterWhereUniqueInput
    /**
     * In case the Semester found by the `where` argument doesn't exist, create a new Semester with this data.
     */
    create: XOR<SemesterCreateInput, SemesterUncheckedCreateInput>
    /**
     * In case the Semester was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SemesterUpdateInput, SemesterUncheckedUpdateInput>
  }

  /**
   * Semester delete
   */
  export type SemesterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semester
     */
    select?: SemesterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Semester
     */
    omit?: SemesterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemesterInclude<ExtArgs> | null
    /**
     * Filter which Semester to delete.
     */
    where: SemesterWhereUniqueInput
  }

  /**
   * Semester deleteMany
   */
  export type SemesterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Semesters to delete
     */
    where?: SemesterWhereInput
    /**
     * Limit how many Semesters to delete.
     */
    limit?: number
  }

  /**
   * Semester.subjects
   */
  export type Semester$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    cursor?: SubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Semester.students
   */
  export type Semester$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Semester without action
   */
  export type SemesterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semester
     */
    select?: SemesterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Semester
     */
    omit?: SemesterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemesterInclude<ExtArgs> | null
  }


  /**
   * Model Subject
   */

  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectAvgAggregateOutputType = {
    id: number | null
    semesterId: number | null
  }

  export type SubjectSumAggregateOutputType = {
    id: number | null
    semesterId: number | null
  }

  export type SubjectMinAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    semesterId: number | null
  }

  export type SubjectMaxAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    semesterId: number | null
  }

  export type SubjectCountAggregateOutputType = {
    id: number
    name: number
    code: number
    semesterId: number
    _all: number
  }


  export type SubjectAvgAggregateInputType = {
    id?: true
    semesterId?: true
  }

  export type SubjectSumAggregateInputType = {
    id?: true
    semesterId?: true
  }

  export type SubjectMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    semesterId?: true
  }

  export type SubjectMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    semesterId?: true
  }

  export type SubjectCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    semesterId?: true
    _all?: true
  }

  export type SubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subject to aggregate.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithAggregationInput | SubjectOrderByWithAggregationInput[]
    by: SubjectScalarFieldEnum[] | SubjectScalarFieldEnum
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _avg?: SubjectAvgAggregateInputType
    _sum?: SubjectSumAggregateInputType
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }

  export type SubjectGroupByOutputType = {
    id: number
    name: string
    code: string
    semesterId: number
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    semesterId?: boolean
    semester?: boolean | SemesterDefaultArgs<ExtArgs>
    exams?: boolean | Subject$examsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    semesterId?: boolean
    semester?: boolean | SemesterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    semesterId?: boolean
    semester?: boolean | SemesterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    semesterId?: boolean
  }

  export type SubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "semesterId", ExtArgs["result"]["subject"]>
  export type SubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    semester?: boolean | SemesterDefaultArgs<ExtArgs>
    exams?: boolean | Subject$examsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    semester?: boolean | SemesterDefaultArgs<ExtArgs>
  }
  export type SubjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    semester?: boolean | SemesterDefaultArgs<ExtArgs>
  }

  export type $SubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subject"
    objects: {
      semester: Prisma.$SemesterPayload<ExtArgs>
      exams: Prisma.$ExamPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      code: string
      semesterId: number
    }, ExtArgs["result"]["subject"]>
    composites: {}
  }

  type SubjectGetPayload<S extends boolean | null | undefined | SubjectDefaultArgs> = $Result.GetResult<Prisma.$SubjectPayload, S>

  type SubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubjectCountAggregateInputType | true
    }

  export interface SubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subject'], meta: { name: 'Subject' } }
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubjectFindUniqueArgs>(args: SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubjectFindFirstArgs>(args?: SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubjectFindManyArgs>(args?: SelectSubset<T, SubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
     */
    create<T extends SubjectCreateArgs>(args: SelectSubset<T, SubjectCreateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subjects.
     * @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubjectCreateManyArgs>(args?: SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subjects and returns the data saved in the database.
     * @param {SubjectCreateManyAndReturnArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subjects and only return the `id`
     * const subjectWithIdOnly = await prisma.subject.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubjectCreateManyAndReturnArgs>(args?: SelectSubset<T, SubjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
     */
    delete<T extends SubjectDeleteArgs>(args: SelectSubset<T, SubjectDeleteArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubjectUpdateArgs>(args: SelectSubset<T, SubjectUpdateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubjectDeleteManyArgs>(args?: SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubjectUpdateManyArgs>(args: SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects and returns the data updated in the database.
     * @param {SubjectUpdateManyAndReturnArgs} args - Arguments to update many Subjects.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subjects and only return the `id`
     * const subjectWithIdOnly = await prisma.subject.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubjectUpdateManyAndReturnArgs>(args: SelectSubset<T, SubjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
     */
    upsert<T extends SubjectUpsertArgs>(args: SelectSubset<T, SubjectUpsertArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): Prisma.PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    semester<T extends SemesterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SemesterDefaultArgs<ExtArgs>>): Prisma__SemesterClient<$Result.GetResult<Prisma.$SemesterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    exams<T extends Subject$examsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$examsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subject model
   */
  interface SubjectFieldRefs {
    readonly id: FieldRef<"Subject", 'Int'>
    readonly name: FieldRef<"Subject", 'String'>
    readonly code: FieldRef<"Subject", 'String'>
    readonly semesterId: FieldRef<"Subject", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject create
   */
  export type SubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Subject.
     */
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }

  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject createManyAndReturn
   */
  export type SubjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subject update
   */
  export type SubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Subject.
     */
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to update.
     */
    limit?: number
  }

  /**
   * Subject updateManyAndReturn
   */
  export type SubjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Subject to update in case it exists.
     */
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     */
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }

  /**
   * Subject delete
   */
  export type SubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter which Subject to delete.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to delete.
     */
    limit?: number
  }

  /**
   * Subject.exams
   */
  export type Subject$examsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    where?: ExamWhereInput
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    cursor?: ExamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }

  /**
   * Subject without action
   */
  export type SubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    id: number | null
    courseId: number | null
    semesterId: number | null
  }

  export type StudentSumAggregateOutputType = {
    id: number | null
    courseId: number | null
    semesterId: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: number | null
    name: string | null
    symbolNumber: string | null
    regNumber: string | null
    college: string | null
    courseId: number | null
    semesterId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    symbolNumber: string | null
    regNumber: string | null
    college: string | null
    courseId: number | null
    semesterId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    name: number
    symbolNumber: number
    regNumber: number
    college: number
    courseId: number
    semesterId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    id?: true
    courseId?: true
    semesterId?: true
  }

  export type StudentSumAggregateInputType = {
    id?: true
    courseId?: true
    semesterId?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    name?: true
    symbolNumber?: true
    regNumber?: true
    college?: true
    courseId?: true
    semesterId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    name?: true
    symbolNumber?: true
    regNumber?: true
    college?: true
    courseId?: true
    semesterId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    name?: true
    symbolNumber?: true
    regNumber?: true
    college?: true
    courseId?: true
    semesterId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: number
    name: string
    symbolNumber: string
    regNumber: string
    college: string
    courseId: number
    semesterId: number
    createdAt: Date
    updatedAt: Date
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    symbolNumber?: boolean
    regNumber?: boolean
    college?: boolean
    courseId?: boolean
    semesterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    semester?: boolean | SemesterDefaultArgs<ExtArgs>
    seat?: boolean | Student$seatArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    symbolNumber?: boolean
    regNumber?: boolean
    college?: boolean
    courseId?: boolean
    semesterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    semester?: boolean | SemesterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    symbolNumber?: boolean
    regNumber?: boolean
    college?: boolean
    courseId?: boolean
    semesterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    semester?: boolean | SemesterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    id?: boolean
    name?: boolean
    symbolNumber?: boolean
    regNumber?: boolean
    college?: boolean
    courseId?: boolean
    semesterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "symbolNumber" | "regNumber" | "college" | "courseId" | "semesterId" | "createdAt" | "updatedAt", ExtArgs["result"]["student"]>
  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    semester?: boolean | SemesterDefaultArgs<ExtArgs>
    seat?: boolean | Student$seatArgs<ExtArgs>
  }
  export type StudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    semester?: boolean | SemesterDefaultArgs<ExtArgs>
  }
  export type StudentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    semester?: boolean | SemesterDefaultArgs<ExtArgs>
  }

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      semester: Prisma.$SemesterPayload<ExtArgs>
      seat: Prisma.$SeatPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      symbolNumber: string
      regNumber: string
      college: string
      courseId: number
      semesterId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students and returns the data updated in the database.
     * @param {StudentUpdateManyAndReturnArgs} args - Arguments to update many Students.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    semester<T extends SemesterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SemesterDefaultArgs<ExtArgs>>): Prisma__SemesterClient<$Result.GetResult<Prisma.$SemesterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    seat<T extends Student$seatArgs<ExtArgs> = {}>(args?: Subset<T, Student$seatArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'Int'>
    readonly name: FieldRef<"Student", 'String'>
    readonly symbolNumber: FieldRef<"Student", 'String'>
    readonly regNumber: FieldRef<"Student", 'String'>
    readonly college: FieldRef<"Student", 'String'>
    readonly courseId: FieldRef<"Student", 'Int'>
    readonly semesterId: FieldRef<"Student", 'Int'>
    readonly createdAt: FieldRef<"Student", 'DateTime'>
    readonly updatedAt: FieldRef<"Student", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student createManyAndReturn
   */
  export type StudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student updateManyAndReturn
   */
  export type StudentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Student.seat
   */
  export type Student$seatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    where?: SeatWhereInput
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Exam
   */

  export type AggregateExam = {
    _count: ExamCountAggregateOutputType | null
    _avg: ExamAvgAggregateOutputType | null
    _sum: ExamSumAggregateOutputType | null
    _min: ExamMinAggregateOutputType | null
    _max: ExamMaxAggregateOutputType | null
  }

  export type ExamAvgAggregateOutputType = {
    id: number | null
    subjectId: number | null
  }

  export type ExamSumAggregateOutputType = {
    id: number | null
    subjectId: number | null
  }

  export type ExamMinAggregateOutputType = {
    id: number | null
    date: Date | null
    startTime: string | null
    endTime: string | null
    subjectId: number | null
  }

  export type ExamMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    startTime: string | null
    endTime: string | null
    subjectId: number | null
  }

  export type ExamCountAggregateOutputType = {
    id: number
    date: number
    startTime: number
    endTime: number
    subjectId: number
    _all: number
  }


  export type ExamAvgAggregateInputType = {
    id?: true
    subjectId?: true
  }

  export type ExamSumAggregateInputType = {
    id?: true
    subjectId?: true
  }

  export type ExamMinAggregateInputType = {
    id?: true
    date?: true
    startTime?: true
    endTime?: true
    subjectId?: true
  }

  export type ExamMaxAggregateInputType = {
    id?: true
    date?: true
    startTime?: true
    endTime?: true
    subjectId?: true
  }

  export type ExamCountAggregateInputType = {
    id?: true
    date?: true
    startTime?: true
    endTime?: true
    subjectId?: true
    _all?: true
  }

  export type ExamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exam to aggregate.
     */
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exams
    **/
    _count?: true | ExamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamMaxAggregateInputType
  }

  export type GetExamAggregateType<T extends ExamAggregateArgs> = {
        [P in keyof T & keyof AggregateExam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExam[P]>
      : GetScalarType<T[P], AggregateExam[P]>
  }




  export type ExamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamWhereInput
    orderBy?: ExamOrderByWithAggregationInput | ExamOrderByWithAggregationInput[]
    by: ExamScalarFieldEnum[] | ExamScalarFieldEnum
    having?: ExamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamCountAggregateInputType | true
    _avg?: ExamAvgAggregateInputType
    _sum?: ExamSumAggregateInputType
    _min?: ExamMinAggregateInputType
    _max?: ExamMaxAggregateInputType
  }

  export type ExamGroupByOutputType = {
    id: number
    date: Date
    startTime: string | null
    endTime: string | null
    subjectId: number
    _count: ExamCountAggregateOutputType | null
    _avg: ExamAvgAggregateOutputType | null
    _sum: ExamSumAggregateOutputType | null
    _min: ExamMinAggregateOutputType | null
    _max: ExamMaxAggregateOutputType | null
  }

  type GetExamGroupByPayload<T extends ExamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamGroupByOutputType[P]>
            : GetScalarType<T[P], ExamGroupByOutputType[P]>
        }
      >
    >


  export type ExamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    subjectId?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    roomAssignments?: boolean | Exam$roomAssignmentsArgs<ExtArgs>
    seatingPlans?: boolean | Exam$seatingPlansArgs<ExtArgs>
    _count?: boolean | ExamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exam"]>

  export type ExamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    subjectId?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exam"]>

  export type ExamSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    subjectId?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exam"]>

  export type ExamSelectScalar = {
    id?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    subjectId?: boolean
  }

  export type ExamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "startTime" | "endTime" | "subjectId", ExtArgs["result"]["exam"]>
  export type ExamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    roomAssignments?: boolean | Exam$roomAssignmentsArgs<ExtArgs>
    seatingPlans?: boolean | Exam$seatingPlansArgs<ExtArgs>
    _count?: boolean | ExamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }
  export type ExamIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }

  export type $ExamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exam"
    objects: {
      subject: Prisma.$SubjectPayload<ExtArgs>
      roomAssignments: Prisma.$RoomAssignmentPayload<ExtArgs>[]
      seatingPlans: Prisma.$SeatingPlanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      startTime: string | null
      endTime: string | null
      subjectId: number
    }, ExtArgs["result"]["exam"]>
    composites: {}
  }

  type ExamGetPayload<S extends boolean | null | undefined | ExamDefaultArgs> = $Result.GetResult<Prisma.$ExamPayload, S>

  type ExamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExamCountAggregateInputType | true
    }

  export interface ExamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exam'], meta: { name: 'Exam' } }
    /**
     * Find zero or one Exam that matches the filter.
     * @param {ExamFindUniqueArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExamFindUniqueArgs>(args: SelectSubset<T, ExamFindUniqueArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Exam that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExamFindUniqueOrThrowArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExamFindUniqueOrThrowArgs>(args: SelectSubset<T, ExamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exam that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamFindFirstArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExamFindFirstArgs>(args?: SelectSubset<T, ExamFindFirstArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Exam that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamFindFirstOrThrowArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExamFindFirstOrThrowArgs>(args?: SelectSubset<T, ExamFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Exams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exams
     * const exams = await prisma.exam.findMany()
     * 
     * // Get first 10 Exams
     * const exams = await prisma.exam.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examWithIdOnly = await prisma.exam.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExamFindManyArgs>(args?: SelectSubset<T, ExamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Exam.
     * @param {ExamCreateArgs} args - Arguments to create a Exam.
     * @example
     * // Create one Exam
     * const Exam = await prisma.exam.create({
     *   data: {
     *     // ... data to create a Exam
     *   }
     * })
     * 
     */
    create<T extends ExamCreateArgs>(args: SelectSubset<T, ExamCreateArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Exams.
     * @param {ExamCreateManyArgs} args - Arguments to create many Exams.
     * @example
     * // Create many Exams
     * const exam = await prisma.exam.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExamCreateManyArgs>(args?: SelectSubset<T, ExamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exams and returns the data saved in the database.
     * @param {ExamCreateManyAndReturnArgs} args - Arguments to create many Exams.
     * @example
     * // Create many Exams
     * const exam = await prisma.exam.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exams and only return the `id`
     * const examWithIdOnly = await prisma.exam.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExamCreateManyAndReturnArgs>(args?: SelectSubset<T, ExamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Exam.
     * @param {ExamDeleteArgs} args - Arguments to delete one Exam.
     * @example
     * // Delete one Exam
     * const Exam = await prisma.exam.delete({
     *   where: {
     *     // ... filter to delete one Exam
     *   }
     * })
     * 
     */
    delete<T extends ExamDeleteArgs>(args: SelectSubset<T, ExamDeleteArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Exam.
     * @param {ExamUpdateArgs} args - Arguments to update one Exam.
     * @example
     * // Update one Exam
     * const exam = await prisma.exam.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExamUpdateArgs>(args: SelectSubset<T, ExamUpdateArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Exams.
     * @param {ExamDeleteManyArgs} args - Arguments to filter Exams to delete.
     * @example
     * // Delete a few Exams
     * const { count } = await prisma.exam.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExamDeleteManyArgs>(args?: SelectSubset<T, ExamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exams
     * const exam = await prisma.exam.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExamUpdateManyArgs>(args: SelectSubset<T, ExamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exams and returns the data updated in the database.
     * @param {ExamUpdateManyAndReturnArgs} args - Arguments to update many Exams.
     * @example
     * // Update many Exams
     * const exam = await prisma.exam.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Exams and only return the `id`
     * const examWithIdOnly = await prisma.exam.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExamUpdateManyAndReturnArgs>(args: SelectSubset<T, ExamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Exam.
     * @param {ExamUpsertArgs} args - Arguments to update or create a Exam.
     * @example
     * // Update or create a Exam
     * const exam = await prisma.exam.upsert({
     *   create: {
     *     // ... data to create a Exam
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exam we want to update
     *   }
     * })
     */
    upsert<T extends ExamUpsertArgs>(args: SelectSubset<T, ExamUpsertArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamCountArgs} args - Arguments to filter Exams to count.
     * @example
     * // Count the number of Exams
     * const count = await prisma.exam.count({
     *   where: {
     *     // ... the filter for the Exams we want to count
     *   }
     * })
    **/
    count<T extends ExamCountArgs>(
      args?: Subset<T, ExamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamAggregateArgs>(args: Subset<T, ExamAggregateArgs>): Prisma.PrismaPromise<GetExamAggregateType<T>>

    /**
     * Group by Exam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamGroupByArgs['orderBy'] }
        : { orderBy?: ExamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exam model
   */
  readonly fields: ExamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exam.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    roomAssignments<T extends Exam$roomAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Exam$roomAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    seatingPlans<T extends Exam$seatingPlansArgs<ExtArgs> = {}>(args?: Subset<T, Exam$seatingPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatingPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Exam model
   */
  interface ExamFieldRefs {
    readonly id: FieldRef<"Exam", 'Int'>
    readonly date: FieldRef<"Exam", 'DateTime'>
    readonly startTime: FieldRef<"Exam", 'String'>
    readonly endTime: FieldRef<"Exam", 'String'>
    readonly subjectId: FieldRef<"Exam", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Exam findUnique
   */
  export type ExamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter, which Exam to fetch.
     */
    where: ExamWhereUniqueInput
  }

  /**
   * Exam findUniqueOrThrow
   */
  export type ExamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter, which Exam to fetch.
     */
    where: ExamWhereUniqueInput
  }

  /**
   * Exam findFirst
   */
  export type ExamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter, which Exam to fetch.
     */
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exams.
     */
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exams.
     */
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }

  /**
   * Exam findFirstOrThrow
   */
  export type ExamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter, which Exam to fetch.
     */
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exams.
     */
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exams.
     */
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }

  /**
   * Exam findMany
   */
  export type ExamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter, which Exams to fetch.
     */
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exams.
     */
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }

  /**
   * Exam create
   */
  export type ExamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * The data needed to create a Exam.
     */
    data: XOR<ExamCreateInput, ExamUncheckedCreateInput>
  }

  /**
   * Exam createMany
   */
  export type ExamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exams.
     */
    data: ExamCreateManyInput | ExamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exam createManyAndReturn
   */
  export type ExamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * The data used to create many Exams.
     */
    data: ExamCreateManyInput | ExamCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Exam update
   */
  export type ExamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * The data needed to update a Exam.
     */
    data: XOR<ExamUpdateInput, ExamUncheckedUpdateInput>
    /**
     * Choose, which Exam to update.
     */
    where: ExamWhereUniqueInput
  }

  /**
   * Exam updateMany
   */
  export type ExamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exams.
     */
    data: XOR<ExamUpdateManyMutationInput, ExamUncheckedUpdateManyInput>
    /**
     * Filter which Exams to update
     */
    where?: ExamWhereInput
    /**
     * Limit how many Exams to update.
     */
    limit?: number
  }

  /**
   * Exam updateManyAndReturn
   */
  export type ExamUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * The data used to update Exams.
     */
    data: XOR<ExamUpdateManyMutationInput, ExamUncheckedUpdateManyInput>
    /**
     * Filter which Exams to update
     */
    where?: ExamWhereInput
    /**
     * Limit how many Exams to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Exam upsert
   */
  export type ExamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * The filter to search for the Exam to update in case it exists.
     */
    where: ExamWhereUniqueInput
    /**
     * In case the Exam found by the `where` argument doesn't exist, create a new Exam with this data.
     */
    create: XOR<ExamCreateInput, ExamUncheckedCreateInput>
    /**
     * In case the Exam was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExamUpdateInput, ExamUncheckedUpdateInput>
  }

  /**
   * Exam delete
   */
  export type ExamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter which Exam to delete.
     */
    where: ExamWhereUniqueInput
  }

  /**
   * Exam deleteMany
   */
  export type ExamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exams to delete
     */
    where?: ExamWhereInput
    /**
     * Limit how many Exams to delete.
     */
    limit?: number
  }

  /**
   * Exam.roomAssignments
   */
  export type Exam$roomAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAssignment
     */
    select?: RoomAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAssignment
     */
    omit?: RoomAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAssignmentInclude<ExtArgs> | null
    where?: RoomAssignmentWhereInput
    orderBy?: RoomAssignmentOrderByWithRelationInput | RoomAssignmentOrderByWithRelationInput[]
    cursor?: RoomAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomAssignmentScalarFieldEnum | RoomAssignmentScalarFieldEnum[]
  }

  /**
   * Exam.seatingPlans
   */
  export type Exam$seatingPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatingPlan
     */
    select?: SeatingPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SeatingPlan
     */
    omit?: SeatingPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatingPlanInclude<ExtArgs> | null
    where?: SeatingPlanWhereInput
    orderBy?: SeatingPlanOrderByWithRelationInput | SeatingPlanOrderByWithRelationInput[]
    cursor?: SeatingPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeatingPlanScalarFieldEnum | SeatingPlanScalarFieldEnum[]
  }

  /**
   * Exam without action
   */
  export type ExamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Exam
     */
    omit?: ExamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamInclude<ExtArgs> | null
  }


  /**
   * Model Room
   */

  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  export type RoomAvgAggregateOutputType = {
    id: number | null
  }

  export type RoomSumAggregateOutputType = {
    id: number | null
  }

  export type RoomMinAggregateOutputType = {
    id: number | null
    roomNumber: string | null
    block: string | null
    floor: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomMaxAggregateOutputType = {
    id: number | null
    roomNumber: string | null
    block: string | null
    floor: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomCountAggregateOutputType = {
    id: number
    roomNumber: number
    block: number
    floor: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoomAvgAggregateInputType = {
    id?: true
  }

  export type RoomSumAggregateInputType = {
    id?: true
  }

  export type RoomMinAggregateInputType = {
    id?: true
    roomNumber?: true
    block?: true
    floor?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomMaxAggregateInputType = {
    id?: true
    roomNumber?: true
    block?: true
    floor?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomCountAggregateInputType = {
    id?: true
    roomNumber?: true
    block?: true
    floor?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Room to aggregate.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rooms
    **/
    _count?: true | RoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomMaxAggregateInputType
  }

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>
  }




  export type RoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithAggregationInput | RoomOrderByWithAggregationInput[]
    by: RoomScalarFieldEnum[] | RoomScalarFieldEnum
    having?: RoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomCountAggregateInputType | true
    _avg?: RoomAvgAggregateInputType
    _sum?: RoomSumAggregateInputType
    _min?: RoomMinAggregateInputType
    _max?: RoomMaxAggregateInputType
  }

  export type RoomGroupByOutputType = {
    id: number
    roomNumber: string
    block: string | null
    floor: string | null
    createdAt: Date
    updatedAt: Date
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  type GetRoomGroupByPayload<T extends RoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomGroupByOutputType[P]>
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
        }
      >
    >


  export type RoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomNumber?: boolean
    block?: boolean
    floor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    benches?: boolean | Room$benchesArgs<ExtArgs>
    roomAssignments?: boolean | Room$roomAssignmentsArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomNumber?: boolean
    block?: boolean
    floor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["room"]>

  export type RoomSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomNumber?: boolean
    block?: boolean
    floor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["room"]>

  export type RoomSelectScalar = {
    id?: boolean
    roomNumber?: boolean
    block?: boolean
    floor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoomOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roomNumber" | "block" | "floor" | "createdAt" | "updatedAt", ExtArgs["result"]["room"]>
  export type RoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    benches?: boolean | Room$benchesArgs<ExtArgs>
    roomAssignments?: boolean | Room$roomAssignmentsArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RoomIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Room"
    objects: {
      benches: Prisma.$BenchPayload<ExtArgs>[]
      roomAssignments: Prisma.$RoomAssignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roomNumber: string
      block: string | null
      floor: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["room"]>
    composites: {}
  }

  type RoomGetPayload<S extends boolean | null | undefined | RoomDefaultArgs> = $Result.GetResult<Prisma.$RoomPayload, S>

  type RoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomCountAggregateInputType | true
    }

  export interface RoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Room'], meta: { name: 'Room' } }
    /**
     * Find zero or one Room that matches the filter.
     * @param {RoomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomFindUniqueArgs>(args: SelectSubset<T, RoomFindUniqueArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Room that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomFindFirstArgs>(args?: SelectSubset<T, RoomFindFirstArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Room that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoomFindManyArgs>(args?: SelectSubset<T, RoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Room.
     * @param {RoomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     * 
     */
    create<T extends RoomCreateArgs>(args: SelectSubset<T, RoomCreateArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Rooms.
     * @param {RoomCreateManyArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomCreateManyArgs>(args?: SelectSubset<T, RoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rooms and returns the data saved in the database.
     * @param {RoomCreateManyAndReturnArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rooms and only return the `id`
     * const roomWithIdOnly = await prisma.room.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Room.
     * @param {RoomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     * 
     */
    delete<T extends RoomDeleteArgs>(args: SelectSubset<T, RoomDeleteArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Room.
     * @param {RoomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomUpdateArgs>(args: SelectSubset<T, RoomUpdateArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Rooms.
     * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomDeleteManyArgs>(args?: SelectSubset<T, RoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomUpdateManyArgs>(args: SelectSubset<T, RoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms and returns the data updated in the database.
     * @param {RoomUpdateManyAndReturnArgs} args - Arguments to update many Rooms.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Rooms and only return the `id`
     * const roomWithIdOnly = await prisma.room.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Room.
     * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
     */
    upsert<T extends RoomUpsertArgs>(args: SelectSubset<T, RoomUpsertArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends RoomCountArgs>(
      args?: Subset<T, RoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAggregateArgs>(args: Subset<T, RoomAggregateArgs>): Prisma.PrismaPromise<GetRoomAggregateType<T>>

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomGroupByArgs['orderBy'] }
        : { orderBy?: RoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Room model
   */
  readonly fields: RoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    benches<T extends Room$benchesArgs<ExtArgs> = {}>(args?: Subset<T, Room$benchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BenchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roomAssignments<T extends Room$roomAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Room$roomAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Room model
   */
  interface RoomFieldRefs {
    readonly id: FieldRef<"Room", 'Int'>
    readonly roomNumber: FieldRef<"Room", 'String'>
    readonly block: FieldRef<"Room", 'String'>
    readonly floor: FieldRef<"Room", 'String'>
    readonly createdAt: FieldRef<"Room", 'DateTime'>
    readonly updatedAt: FieldRef<"Room", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Room findUnique
   */
  export type RoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room findUniqueOrThrow
   */
  export type RoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room findFirst
   */
  export type RoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room findFirstOrThrow
   */
  export type RoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room findMany
   */
  export type RoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Rooms to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room create
   */
  export type RoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to create a Room.
     */
    data: XOR<RoomCreateInput, RoomUncheckedCreateInput>
  }

  /**
   * Room createMany
   */
  export type RoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Room createManyAndReturn
   */
  export type RoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Room update
   */
  export type RoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to update a Room.
     */
    data: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
    /**
     * Choose, which Room to update.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room updateMany
   */
  export type RoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to update.
     */
    limit?: number
  }

  /**
   * Room updateManyAndReturn
   */
  export type RoomUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to update.
     */
    limit?: number
  }

  /**
   * Room upsert
   */
  export type RoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The filter to search for the Room to update in case it exists.
     */
    where: RoomWhereUniqueInput
    /**
     * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
     */
    create: XOR<RoomCreateInput, RoomUncheckedCreateInput>
    /**
     * In case the Room was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
  }

  /**
   * Room delete
   */
  export type RoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter which Room to delete.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room deleteMany
   */
  export type RoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rooms to delete
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to delete.
     */
    limit?: number
  }

  /**
   * Room.benches
   */
  export type Room$benchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bench
     */
    select?: BenchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bench
     */
    omit?: BenchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BenchInclude<ExtArgs> | null
    where?: BenchWhereInput
    orderBy?: BenchOrderByWithRelationInput | BenchOrderByWithRelationInput[]
    cursor?: BenchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BenchScalarFieldEnum | BenchScalarFieldEnum[]
  }

  /**
   * Room.roomAssignments
   */
  export type Room$roomAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAssignment
     */
    select?: RoomAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAssignment
     */
    omit?: RoomAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAssignmentInclude<ExtArgs> | null
    where?: RoomAssignmentWhereInput
    orderBy?: RoomAssignmentOrderByWithRelationInput | RoomAssignmentOrderByWithRelationInput[]
    cursor?: RoomAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomAssignmentScalarFieldEnum | RoomAssignmentScalarFieldEnum[]
  }

  /**
   * Room without action
   */
  export type RoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
  }


  /**
   * Model Bench
   */

  export type AggregateBench = {
    _count: BenchCountAggregateOutputType | null
    _avg: BenchAvgAggregateOutputType | null
    _sum: BenchSumAggregateOutputType | null
    _min: BenchMinAggregateOutputType | null
    _max: BenchMaxAggregateOutputType | null
  }

  export type BenchAvgAggregateOutputType = {
    id: number | null
    roomId: number | null
    benchNo: number | null
    capacity: number | null
  }

  export type BenchSumAggregateOutputType = {
    id: number | null
    roomId: number | null
    benchNo: number | null
    capacity: number | null
  }

  export type BenchMinAggregateOutputType = {
    id: number | null
    roomId: number | null
    benchNo: number | null
    capacity: number | null
    createdAt: Date | null
  }

  export type BenchMaxAggregateOutputType = {
    id: number | null
    roomId: number | null
    benchNo: number | null
    capacity: number | null
    createdAt: Date | null
  }

  export type BenchCountAggregateOutputType = {
    id: number
    roomId: number
    benchNo: number
    capacity: number
    createdAt: number
    _all: number
  }


  export type BenchAvgAggregateInputType = {
    id?: true
    roomId?: true
    benchNo?: true
    capacity?: true
  }

  export type BenchSumAggregateInputType = {
    id?: true
    roomId?: true
    benchNo?: true
    capacity?: true
  }

  export type BenchMinAggregateInputType = {
    id?: true
    roomId?: true
    benchNo?: true
    capacity?: true
    createdAt?: true
  }

  export type BenchMaxAggregateInputType = {
    id?: true
    roomId?: true
    benchNo?: true
    capacity?: true
    createdAt?: true
  }

  export type BenchCountAggregateInputType = {
    id?: true
    roomId?: true
    benchNo?: true
    capacity?: true
    createdAt?: true
    _all?: true
  }

  export type BenchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bench to aggregate.
     */
    where?: BenchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Benches to fetch.
     */
    orderBy?: BenchOrderByWithRelationInput | BenchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BenchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Benches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Benches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Benches
    **/
    _count?: true | BenchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BenchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BenchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BenchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BenchMaxAggregateInputType
  }

  export type GetBenchAggregateType<T extends BenchAggregateArgs> = {
        [P in keyof T & keyof AggregateBench]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBench[P]>
      : GetScalarType<T[P], AggregateBench[P]>
  }




  export type BenchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BenchWhereInput
    orderBy?: BenchOrderByWithAggregationInput | BenchOrderByWithAggregationInput[]
    by: BenchScalarFieldEnum[] | BenchScalarFieldEnum
    having?: BenchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BenchCountAggregateInputType | true
    _avg?: BenchAvgAggregateInputType
    _sum?: BenchSumAggregateInputType
    _min?: BenchMinAggregateInputType
    _max?: BenchMaxAggregateInputType
  }

  export type BenchGroupByOutputType = {
    id: number
    roomId: number
    benchNo: number
    capacity: number
    createdAt: Date
    _count: BenchCountAggregateOutputType | null
    _avg: BenchAvgAggregateOutputType | null
    _sum: BenchSumAggregateOutputType | null
    _min: BenchMinAggregateOutputType | null
    _max: BenchMaxAggregateOutputType | null
  }

  type GetBenchGroupByPayload<T extends BenchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BenchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BenchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BenchGroupByOutputType[P]>
            : GetScalarType<T[P], BenchGroupByOutputType[P]>
        }
      >
    >


  export type BenchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    benchNo?: boolean
    capacity?: boolean
    createdAt?: boolean
    room?: boolean | RoomDefaultArgs<ExtArgs>
    seats?: boolean | Bench$seatsArgs<ExtArgs>
    _count?: boolean | BenchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bench"]>

  export type BenchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    benchNo?: boolean
    capacity?: boolean
    createdAt?: boolean
    room?: boolean | RoomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bench"]>

  export type BenchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    benchNo?: boolean
    capacity?: boolean
    createdAt?: boolean
    room?: boolean | RoomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bench"]>

  export type BenchSelectScalar = {
    id?: boolean
    roomId?: boolean
    benchNo?: boolean
    capacity?: boolean
    createdAt?: boolean
  }

  export type BenchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roomId" | "benchNo" | "capacity" | "createdAt", ExtArgs["result"]["bench"]>
  export type BenchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | RoomDefaultArgs<ExtArgs>
    seats?: boolean | Bench$seatsArgs<ExtArgs>
    _count?: boolean | BenchCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BenchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | RoomDefaultArgs<ExtArgs>
  }
  export type BenchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | RoomDefaultArgs<ExtArgs>
  }

  export type $BenchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bench"
    objects: {
      room: Prisma.$RoomPayload<ExtArgs>
      seats: Prisma.$SeatPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roomId: number
      benchNo: number
      capacity: number
      createdAt: Date
    }, ExtArgs["result"]["bench"]>
    composites: {}
  }

  type BenchGetPayload<S extends boolean | null | undefined | BenchDefaultArgs> = $Result.GetResult<Prisma.$BenchPayload, S>

  type BenchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BenchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BenchCountAggregateInputType | true
    }

  export interface BenchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bench'], meta: { name: 'Bench' } }
    /**
     * Find zero or one Bench that matches the filter.
     * @param {BenchFindUniqueArgs} args - Arguments to find a Bench
     * @example
     * // Get one Bench
     * const bench = await prisma.bench.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BenchFindUniqueArgs>(args: SelectSubset<T, BenchFindUniqueArgs<ExtArgs>>): Prisma__BenchClient<$Result.GetResult<Prisma.$BenchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Bench that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BenchFindUniqueOrThrowArgs} args - Arguments to find a Bench
     * @example
     * // Get one Bench
     * const bench = await prisma.bench.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BenchFindUniqueOrThrowArgs>(args: SelectSubset<T, BenchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BenchClient<$Result.GetResult<Prisma.$BenchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bench that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BenchFindFirstArgs} args - Arguments to find a Bench
     * @example
     * // Get one Bench
     * const bench = await prisma.bench.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BenchFindFirstArgs>(args?: SelectSubset<T, BenchFindFirstArgs<ExtArgs>>): Prisma__BenchClient<$Result.GetResult<Prisma.$BenchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bench that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BenchFindFirstOrThrowArgs} args - Arguments to find a Bench
     * @example
     * // Get one Bench
     * const bench = await prisma.bench.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BenchFindFirstOrThrowArgs>(args?: SelectSubset<T, BenchFindFirstOrThrowArgs<ExtArgs>>): Prisma__BenchClient<$Result.GetResult<Prisma.$BenchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Benches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BenchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Benches
     * const benches = await prisma.bench.findMany()
     * 
     * // Get first 10 Benches
     * const benches = await prisma.bench.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const benchWithIdOnly = await prisma.bench.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BenchFindManyArgs>(args?: SelectSubset<T, BenchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BenchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Bench.
     * @param {BenchCreateArgs} args - Arguments to create a Bench.
     * @example
     * // Create one Bench
     * const Bench = await prisma.bench.create({
     *   data: {
     *     // ... data to create a Bench
     *   }
     * })
     * 
     */
    create<T extends BenchCreateArgs>(args: SelectSubset<T, BenchCreateArgs<ExtArgs>>): Prisma__BenchClient<$Result.GetResult<Prisma.$BenchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Benches.
     * @param {BenchCreateManyArgs} args - Arguments to create many Benches.
     * @example
     * // Create many Benches
     * const bench = await prisma.bench.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BenchCreateManyArgs>(args?: SelectSubset<T, BenchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Benches and returns the data saved in the database.
     * @param {BenchCreateManyAndReturnArgs} args - Arguments to create many Benches.
     * @example
     * // Create many Benches
     * const bench = await prisma.bench.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Benches and only return the `id`
     * const benchWithIdOnly = await prisma.bench.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BenchCreateManyAndReturnArgs>(args?: SelectSubset<T, BenchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BenchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Bench.
     * @param {BenchDeleteArgs} args - Arguments to delete one Bench.
     * @example
     * // Delete one Bench
     * const Bench = await prisma.bench.delete({
     *   where: {
     *     // ... filter to delete one Bench
     *   }
     * })
     * 
     */
    delete<T extends BenchDeleteArgs>(args: SelectSubset<T, BenchDeleteArgs<ExtArgs>>): Prisma__BenchClient<$Result.GetResult<Prisma.$BenchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Bench.
     * @param {BenchUpdateArgs} args - Arguments to update one Bench.
     * @example
     * // Update one Bench
     * const bench = await prisma.bench.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BenchUpdateArgs>(args: SelectSubset<T, BenchUpdateArgs<ExtArgs>>): Prisma__BenchClient<$Result.GetResult<Prisma.$BenchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Benches.
     * @param {BenchDeleteManyArgs} args - Arguments to filter Benches to delete.
     * @example
     * // Delete a few Benches
     * const { count } = await prisma.bench.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BenchDeleteManyArgs>(args?: SelectSubset<T, BenchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Benches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BenchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Benches
     * const bench = await prisma.bench.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BenchUpdateManyArgs>(args: SelectSubset<T, BenchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Benches and returns the data updated in the database.
     * @param {BenchUpdateManyAndReturnArgs} args - Arguments to update many Benches.
     * @example
     * // Update many Benches
     * const bench = await prisma.bench.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Benches and only return the `id`
     * const benchWithIdOnly = await prisma.bench.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BenchUpdateManyAndReturnArgs>(args: SelectSubset<T, BenchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BenchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Bench.
     * @param {BenchUpsertArgs} args - Arguments to update or create a Bench.
     * @example
     * // Update or create a Bench
     * const bench = await prisma.bench.upsert({
     *   create: {
     *     // ... data to create a Bench
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bench we want to update
     *   }
     * })
     */
    upsert<T extends BenchUpsertArgs>(args: SelectSubset<T, BenchUpsertArgs<ExtArgs>>): Prisma__BenchClient<$Result.GetResult<Prisma.$BenchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Benches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BenchCountArgs} args - Arguments to filter Benches to count.
     * @example
     * // Count the number of Benches
     * const count = await prisma.bench.count({
     *   where: {
     *     // ... the filter for the Benches we want to count
     *   }
     * })
    **/
    count<T extends BenchCountArgs>(
      args?: Subset<T, BenchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BenchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bench.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BenchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BenchAggregateArgs>(args: Subset<T, BenchAggregateArgs>): Prisma.PrismaPromise<GetBenchAggregateType<T>>

    /**
     * Group by Bench.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BenchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BenchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BenchGroupByArgs['orderBy'] }
        : { orderBy?: BenchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BenchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBenchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bench model
   */
  readonly fields: BenchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bench.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BenchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    room<T extends RoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoomDefaultArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    seats<T extends Bench$seatsArgs<ExtArgs> = {}>(args?: Subset<T, Bench$seatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Bench model
   */
  interface BenchFieldRefs {
    readonly id: FieldRef<"Bench", 'Int'>
    readonly roomId: FieldRef<"Bench", 'Int'>
    readonly benchNo: FieldRef<"Bench", 'Int'>
    readonly capacity: FieldRef<"Bench", 'Int'>
    readonly createdAt: FieldRef<"Bench", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Bench findUnique
   */
  export type BenchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bench
     */
    select?: BenchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bench
     */
    omit?: BenchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BenchInclude<ExtArgs> | null
    /**
     * Filter, which Bench to fetch.
     */
    where: BenchWhereUniqueInput
  }

  /**
   * Bench findUniqueOrThrow
   */
  export type BenchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bench
     */
    select?: BenchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bench
     */
    omit?: BenchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BenchInclude<ExtArgs> | null
    /**
     * Filter, which Bench to fetch.
     */
    where: BenchWhereUniqueInput
  }

  /**
   * Bench findFirst
   */
  export type BenchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bench
     */
    select?: BenchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bench
     */
    omit?: BenchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BenchInclude<ExtArgs> | null
    /**
     * Filter, which Bench to fetch.
     */
    where?: BenchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Benches to fetch.
     */
    orderBy?: BenchOrderByWithRelationInput | BenchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Benches.
     */
    cursor?: BenchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Benches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Benches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Benches.
     */
    distinct?: BenchScalarFieldEnum | BenchScalarFieldEnum[]
  }

  /**
   * Bench findFirstOrThrow
   */
  export type BenchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bench
     */
    select?: BenchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bench
     */
    omit?: BenchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BenchInclude<ExtArgs> | null
    /**
     * Filter, which Bench to fetch.
     */
    where?: BenchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Benches to fetch.
     */
    orderBy?: BenchOrderByWithRelationInput | BenchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Benches.
     */
    cursor?: BenchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Benches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Benches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Benches.
     */
    distinct?: BenchScalarFieldEnum | BenchScalarFieldEnum[]
  }

  /**
   * Bench findMany
   */
  export type BenchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bench
     */
    select?: BenchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bench
     */
    omit?: BenchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BenchInclude<ExtArgs> | null
    /**
     * Filter, which Benches to fetch.
     */
    where?: BenchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Benches to fetch.
     */
    orderBy?: BenchOrderByWithRelationInput | BenchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Benches.
     */
    cursor?: BenchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Benches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Benches.
     */
    skip?: number
    distinct?: BenchScalarFieldEnum | BenchScalarFieldEnum[]
  }

  /**
   * Bench create
   */
  export type BenchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bench
     */
    select?: BenchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bench
     */
    omit?: BenchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BenchInclude<ExtArgs> | null
    /**
     * The data needed to create a Bench.
     */
    data: XOR<BenchCreateInput, BenchUncheckedCreateInput>
  }

  /**
   * Bench createMany
   */
  export type BenchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Benches.
     */
    data: BenchCreateManyInput | BenchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bench createManyAndReturn
   */
  export type BenchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bench
     */
    select?: BenchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bench
     */
    omit?: BenchOmit<ExtArgs> | null
    /**
     * The data used to create many Benches.
     */
    data: BenchCreateManyInput | BenchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BenchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bench update
   */
  export type BenchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bench
     */
    select?: BenchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bench
     */
    omit?: BenchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BenchInclude<ExtArgs> | null
    /**
     * The data needed to update a Bench.
     */
    data: XOR<BenchUpdateInput, BenchUncheckedUpdateInput>
    /**
     * Choose, which Bench to update.
     */
    where: BenchWhereUniqueInput
  }

  /**
   * Bench updateMany
   */
  export type BenchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Benches.
     */
    data: XOR<BenchUpdateManyMutationInput, BenchUncheckedUpdateManyInput>
    /**
     * Filter which Benches to update
     */
    where?: BenchWhereInput
    /**
     * Limit how many Benches to update.
     */
    limit?: number
  }

  /**
   * Bench updateManyAndReturn
   */
  export type BenchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bench
     */
    select?: BenchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bench
     */
    omit?: BenchOmit<ExtArgs> | null
    /**
     * The data used to update Benches.
     */
    data: XOR<BenchUpdateManyMutationInput, BenchUncheckedUpdateManyInput>
    /**
     * Filter which Benches to update
     */
    where?: BenchWhereInput
    /**
     * Limit how many Benches to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BenchIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bench upsert
   */
  export type BenchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bench
     */
    select?: BenchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bench
     */
    omit?: BenchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BenchInclude<ExtArgs> | null
    /**
     * The filter to search for the Bench to update in case it exists.
     */
    where: BenchWhereUniqueInput
    /**
     * In case the Bench found by the `where` argument doesn't exist, create a new Bench with this data.
     */
    create: XOR<BenchCreateInput, BenchUncheckedCreateInput>
    /**
     * In case the Bench was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BenchUpdateInput, BenchUncheckedUpdateInput>
  }

  /**
   * Bench delete
   */
  export type BenchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bench
     */
    select?: BenchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bench
     */
    omit?: BenchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BenchInclude<ExtArgs> | null
    /**
     * Filter which Bench to delete.
     */
    where: BenchWhereUniqueInput
  }

  /**
   * Bench deleteMany
   */
  export type BenchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Benches to delete
     */
    where?: BenchWhereInput
    /**
     * Limit how many Benches to delete.
     */
    limit?: number
  }

  /**
   * Bench.seats
   */
  export type Bench$seatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    where?: SeatWhereInput
    orderBy?: SeatOrderByWithRelationInput | SeatOrderByWithRelationInput[]
    cursor?: SeatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeatScalarFieldEnum | SeatScalarFieldEnum[]
  }

  /**
   * Bench without action
   */
  export type BenchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bench
     */
    select?: BenchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bench
     */
    omit?: BenchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BenchInclude<ExtArgs> | null
  }


  /**
   * Model Seat
   */

  export type AggregateSeat = {
    _count: SeatCountAggregateOutputType | null
    _avg: SeatAvgAggregateOutputType | null
    _sum: SeatSumAggregateOutputType | null
    _min: SeatMinAggregateOutputType | null
    _max: SeatMaxAggregateOutputType | null
  }

  export type SeatAvgAggregateOutputType = {
    id: number | null
    benchId: number | null
    position: number | null
    studentId: number | null
    seatingPlanId: number | null
  }

  export type SeatSumAggregateOutputType = {
    id: number | null
    benchId: number | null
    position: number | null
    studentId: number | null
    seatingPlanId: number | null
  }

  export type SeatMinAggregateOutputType = {
    id: number | null
    benchId: number | null
    position: number | null
    studentId: number | null
    seatingPlanId: number | null
  }

  export type SeatMaxAggregateOutputType = {
    id: number | null
    benchId: number | null
    position: number | null
    studentId: number | null
    seatingPlanId: number | null
  }

  export type SeatCountAggregateOutputType = {
    id: number
    benchId: number
    position: number
    studentId: number
    seatingPlanId: number
    _all: number
  }


  export type SeatAvgAggregateInputType = {
    id?: true
    benchId?: true
    position?: true
    studentId?: true
    seatingPlanId?: true
  }

  export type SeatSumAggregateInputType = {
    id?: true
    benchId?: true
    position?: true
    studentId?: true
    seatingPlanId?: true
  }

  export type SeatMinAggregateInputType = {
    id?: true
    benchId?: true
    position?: true
    studentId?: true
    seatingPlanId?: true
  }

  export type SeatMaxAggregateInputType = {
    id?: true
    benchId?: true
    position?: true
    studentId?: true
    seatingPlanId?: true
  }

  export type SeatCountAggregateInputType = {
    id?: true
    benchId?: true
    position?: true
    studentId?: true
    seatingPlanId?: true
    _all?: true
  }

  export type SeatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seat to aggregate.
     */
    where?: SeatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seats to fetch.
     */
    orderBy?: SeatOrderByWithRelationInput | SeatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Seats
    **/
    _count?: true | SeatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeatMaxAggregateInputType
  }

  export type GetSeatAggregateType<T extends SeatAggregateArgs> = {
        [P in keyof T & keyof AggregateSeat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeat[P]>
      : GetScalarType<T[P], AggregateSeat[P]>
  }




  export type SeatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeatWhereInput
    orderBy?: SeatOrderByWithAggregationInput | SeatOrderByWithAggregationInput[]
    by: SeatScalarFieldEnum[] | SeatScalarFieldEnum
    having?: SeatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeatCountAggregateInputType | true
    _avg?: SeatAvgAggregateInputType
    _sum?: SeatSumAggregateInputType
    _min?: SeatMinAggregateInputType
    _max?: SeatMaxAggregateInputType
  }

  export type SeatGroupByOutputType = {
    id: number
    benchId: number
    position: number
    studentId: number
    seatingPlanId: number | null
    _count: SeatCountAggregateOutputType | null
    _avg: SeatAvgAggregateOutputType | null
    _sum: SeatSumAggregateOutputType | null
    _min: SeatMinAggregateOutputType | null
    _max: SeatMaxAggregateOutputType | null
  }

  type GetSeatGroupByPayload<T extends SeatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeatGroupByOutputType[P]>
            : GetScalarType<T[P], SeatGroupByOutputType[P]>
        }
      >
    >


  export type SeatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    benchId?: boolean
    position?: boolean
    studentId?: boolean
    seatingPlanId?: boolean
    bench?: boolean | BenchDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    seatingPlan?: boolean | Seat$seatingPlanArgs<ExtArgs>
  }, ExtArgs["result"]["seat"]>

  export type SeatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    benchId?: boolean
    position?: boolean
    studentId?: boolean
    seatingPlanId?: boolean
    bench?: boolean | BenchDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    seatingPlan?: boolean | Seat$seatingPlanArgs<ExtArgs>
  }, ExtArgs["result"]["seat"]>

  export type SeatSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    benchId?: boolean
    position?: boolean
    studentId?: boolean
    seatingPlanId?: boolean
    bench?: boolean | BenchDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    seatingPlan?: boolean | Seat$seatingPlanArgs<ExtArgs>
  }, ExtArgs["result"]["seat"]>

  export type SeatSelectScalar = {
    id?: boolean
    benchId?: boolean
    position?: boolean
    studentId?: boolean
    seatingPlanId?: boolean
  }

  export type SeatOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "benchId" | "position" | "studentId" | "seatingPlanId", ExtArgs["result"]["seat"]>
  export type SeatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bench?: boolean | BenchDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    seatingPlan?: boolean | Seat$seatingPlanArgs<ExtArgs>
  }
  export type SeatIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bench?: boolean | BenchDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    seatingPlan?: boolean | Seat$seatingPlanArgs<ExtArgs>
  }
  export type SeatIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bench?: boolean | BenchDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    seatingPlan?: boolean | Seat$seatingPlanArgs<ExtArgs>
  }

  export type $SeatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Seat"
    objects: {
      bench: Prisma.$BenchPayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs>
      seatingPlan: Prisma.$SeatingPlanPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      benchId: number
      position: number
      studentId: number
      seatingPlanId: number | null
    }, ExtArgs["result"]["seat"]>
    composites: {}
  }

  type SeatGetPayload<S extends boolean | null | undefined | SeatDefaultArgs> = $Result.GetResult<Prisma.$SeatPayload, S>

  type SeatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SeatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SeatCountAggregateInputType | true
    }

  export interface SeatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Seat'], meta: { name: 'Seat' } }
    /**
     * Find zero or one Seat that matches the filter.
     * @param {SeatFindUniqueArgs} args - Arguments to find a Seat
     * @example
     * // Get one Seat
     * const seat = await prisma.seat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeatFindUniqueArgs>(args: SelectSubset<T, SeatFindUniqueArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Seat that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SeatFindUniqueOrThrowArgs} args - Arguments to find a Seat
     * @example
     * // Get one Seat
     * const seat = await prisma.seat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeatFindUniqueOrThrowArgs>(args: SelectSubset<T, SeatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Seat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatFindFirstArgs} args - Arguments to find a Seat
     * @example
     * // Get one Seat
     * const seat = await prisma.seat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeatFindFirstArgs>(args?: SelectSubset<T, SeatFindFirstArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Seat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatFindFirstOrThrowArgs} args - Arguments to find a Seat
     * @example
     * // Get one Seat
     * const seat = await prisma.seat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeatFindFirstOrThrowArgs>(args?: SelectSubset<T, SeatFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Seats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seats
     * const seats = await prisma.seat.findMany()
     * 
     * // Get first 10 Seats
     * const seats = await prisma.seat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seatWithIdOnly = await prisma.seat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SeatFindManyArgs>(args?: SelectSubset<T, SeatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Seat.
     * @param {SeatCreateArgs} args - Arguments to create a Seat.
     * @example
     * // Create one Seat
     * const Seat = await prisma.seat.create({
     *   data: {
     *     // ... data to create a Seat
     *   }
     * })
     * 
     */
    create<T extends SeatCreateArgs>(args: SelectSubset<T, SeatCreateArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Seats.
     * @param {SeatCreateManyArgs} args - Arguments to create many Seats.
     * @example
     * // Create many Seats
     * const seat = await prisma.seat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeatCreateManyArgs>(args?: SelectSubset<T, SeatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Seats and returns the data saved in the database.
     * @param {SeatCreateManyAndReturnArgs} args - Arguments to create many Seats.
     * @example
     * // Create many Seats
     * const seat = await prisma.seat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Seats and only return the `id`
     * const seatWithIdOnly = await prisma.seat.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeatCreateManyAndReturnArgs>(args?: SelectSubset<T, SeatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Seat.
     * @param {SeatDeleteArgs} args - Arguments to delete one Seat.
     * @example
     * // Delete one Seat
     * const Seat = await prisma.seat.delete({
     *   where: {
     *     // ... filter to delete one Seat
     *   }
     * })
     * 
     */
    delete<T extends SeatDeleteArgs>(args: SelectSubset<T, SeatDeleteArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Seat.
     * @param {SeatUpdateArgs} args - Arguments to update one Seat.
     * @example
     * // Update one Seat
     * const seat = await prisma.seat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeatUpdateArgs>(args: SelectSubset<T, SeatUpdateArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Seats.
     * @param {SeatDeleteManyArgs} args - Arguments to filter Seats to delete.
     * @example
     * // Delete a few Seats
     * const { count } = await prisma.seat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeatDeleteManyArgs>(args?: SelectSubset<T, SeatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seats
     * const seat = await prisma.seat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeatUpdateManyArgs>(args: SelectSubset<T, SeatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seats and returns the data updated in the database.
     * @param {SeatUpdateManyAndReturnArgs} args - Arguments to update many Seats.
     * @example
     * // Update many Seats
     * const seat = await prisma.seat.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Seats and only return the `id`
     * const seatWithIdOnly = await prisma.seat.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SeatUpdateManyAndReturnArgs>(args: SelectSubset<T, SeatUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Seat.
     * @param {SeatUpsertArgs} args - Arguments to update or create a Seat.
     * @example
     * // Update or create a Seat
     * const seat = await prisma.seat.upsert({
     *   create: {
     *     // ... data to create a Seat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seat we want to update
     *   }
     * })
     */
    upsert<T extends SeatUpsertArgs>(args: SelectSubset<T, SeatUpsertArgs<ExtArgs>>): Prisma__SeatClient<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Seats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatCountArgs} args - Arguments to filter Seats to count.
     * @example
     * // Count the number of Seats
     * const count = await prisma.seat.count({
     *   where: {
     *     // ... the filter for the Seats we want to count
     *   }
     * })
    **/
    count<T extends SeatCountArgs>(
      args?: Subset<T, SeatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeatAggregateArgs>(args: Subset<T, SeatAggregateArgs>): Prisma.PrismaPromise<GetSeatAggregateType<T>>

    /**
     * Group by Seat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeatGroupByArgs['orderBy'] }
        : { orderBy?: SeatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Seat model
   */
  readonly fields: SeatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Seat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bench<T extends BenchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BenchDefaultArgs<ExtArgs>>): Prisma__BenchClient<$Result.GetResult<Prisma.$BenchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    seatingPlan<T extends Seat$seatingPlanArgs<ExtArgs> = {}>(args?: Subset<T, Seat$seatingPlanArgs<ExtArgs>>): Prisma__SeatingPlanClient<$Result.GetResult<Prisma.$SeatingPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Seat model
   */
  interface SeatFieldRefs {
    readonly id: FieldRef<"Seat", 'Int'>
    readonly benchId: FieldRef<"Seat", 'Int'>
    readonly position: FieldRef<"Seat", 'Int'>
    readonly studentId: FieldRef<"Seat", 'Int'>
    readonly seatingPlanId: FieldRef<"Seat", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Seat findUnique
   */
  export type SeatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * Filter, which Seat to fetch.
     */
    where: SeatWhereUniqueInput
  }

  /**
   * Seat findUniqueOrThrow
   */
  export type SeatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * Filter, which Seat to fetch.
     */
    where: SeatWhereUniqueInput
  }

  /**
   * Seat findFirst
   */
  export type SeatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * Filter, which Seat to fetch.
     */
    where?: SeatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seats to fetch.
     */
    orderBy?: SeatOrderByWithRelationInput | SeatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seats.
     */
    cursor?: SeatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seats.
     */
    distinct?: SeatScalarFieldEnum | SeatScalarFieldEnum[]
  }

  /**
   * Seat findFirstOrThrow
   */
  export type SeatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * Filter, which Seat to fetch.
     */
    where?: SeatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seats to fetch.
     */
    orderBy?: SeatOrderByWithRelationInput | SeatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seats.
     */
    cursor?: SeatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seats.
     */
    distinct?: SeatScalarFieldEnum | SeatScalarFieldEnum[]
  }

  /**
   * Seat findMany
   */
  export type SeatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * Filter, which Seats to fetch.
     */
    where?: SeatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seats to fetch.
     */
    orderBy?: SeatOrderByWithRelationInput | SeatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Seats.
     */
    cursor?: SeatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seats.
     */
    skip?: number
    distinct?: SeatScalarFieldEnum | SeatScalarFieldEnum[]
  }

  /**
   * Seat create
   */
  export type SeatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * The data needed to create a Seat.
     */
    data: XOR<SeatCreateInput, SeatUncheckedCreateInput>
  }

  /**
   * Seat createMany
   */
  export type SeatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Seats.
     */
    data: SeatCreateManyInput | SeatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Seat createManyAndReturn
   */
  export type SeatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * The data used to create many Seats.
     */
    data: SeatCreateManyInput | SeatCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Seat update
   */
  export type SeatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * The data needed to update a Seat.
     */
    data: XOR<SeatUpdateInput, SeatUncheckedUpdateInput>
    /**
     * Choose, which Seat to update.
     */
    where: SeatWhereUniqueInput
  }

  /**
   * Seat updateMany
   */
  export type SeatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Seats.
     */
    data: XOR<SeatUpdateManyMutationInput, SeatUncheckedUpdateManyInput>
    /**
     * Filter which Seats to update
     */
    where?: SeatWhereInput
    /**
     * Limit how many Seats to update.
     */
    limit?: number
  }

  /**
   * Seat updateManyAndReturn
   */
  export type SeatUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * The data used to update Seats.
     */
    data: XOR<SeatUpdateManyMutationInput, SeatUncheckedUpdateManyInput>
    /**
     * Filter which Seats to update
     */
    where?: SeatWhereInput
    /**
     * Limit how many Seats to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Seat upsert
   */
  export type SeatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * The filter to search for the Seat to update in case it exists.
     */
    where: SeatWhereUniqueInput
    /**
     * In case the Seat found by the `where` argument doesn't exist, create a new Seat with this data.
     */
    create: XOR<SeatCreateInput, SeatUncheckedCreateInput>
    /**
     * In case the Seat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeatUpdateInput, SeatUncheckedUpdateInput>
  }

  /**
   * Seat delete
   */
  export type SeatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    /**
     * Filter which Seat to delete.
     */
    where: SeatWhereUniqueInput
  }

  /**
   * Seat deleteMany
   */
  export type SeatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seats to delete
     */
    where?: SeatWhereInput
    /**
     * Limit how many Seats to delete.
     */
    limit?: number
  }

  /**
   * Seat.seatingPlan
   */
  export type Seat$seatingPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatingPlan
     */
    select?: SeatingPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SeatingPlan
     */
    omit?: SeatingPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatingPlanInclude<ExtArgs> | null
    where?: SeatingPlanWhereInput
  }

  /**
   * Seat without action
   */
  export type SeatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
  }


  /**
   * Model RoomAssignment
   */

  export type AggregateRoomAssignment = {
    _count: RoomAssignmentCountAggregateOutputType | null
    _avg: RoomAssignmentAvgAggregateOutputType | null
    _sum: RoomAssignmentSumAggregateOutputType | null
    _min: RoomAssignmentMinAggregateOutputType | null
    _max: RoomAssignmentMaxAggregateOutputType | null
  }

  export type RoomAssignmentAvgAggregateOutputType = {
    id: number | null
    roomId: number | null
    examId: number | null
  }

  export type RoomAssignmentSumAggregateOutputType = {
    id: number | null
    roomId: number | null
    examId: number | null
  }

  export type RoomAssignmentMinAggregateOutputType = {
    id: number | null
    roomId: number | null
    examId: number | null
    isActive: boolean | null
    isCompleted: boolean | null
    completedAt: Date | null
  }

  export type RoomAssignmentMaxAggregateOutputType = {
    id: number | null
    roomId: number | null
    examId: number | null
    isActive: boolean | null
    isCompleted: boolean | null
    completedAt: Date | null
  }

  export type RoomAssignmentCountAggregateOutputType = {
    id: number
    roomId: number
    examId: number
    isActive: number
    isCompleted: number
    completedAt: number
    _all: number
  }


  export type RoomAssignmentAvgAggregateInputType = {
    id?: true
    roomId?: true
    examId?: true
  }

  export type RoomAssignmentSumAggregateInputType = {
    id?: true
    roomId?: true
    examId?: true
  }

  export type RoomAssignmentMinAggregateInputType = {
    id?: true
    roomId?: true
    examId?: true
    isActive?: true
    isCompleted?: true
    completedAt?: true
  }

  export type RoomAssignmentMaxAggregateInputType = {
    id?: true
    roomId?: true
    examId?: true
    isActive?: true
    isCompleted?: true
    completedAt?: true
  }

  export type RoomAssignmentCountAggregateInputType = {
    id?: true
    roomId?: true
    examId?: true
    isActive?: true
    isCompleted?: true
    completedAt?: true
    _all?: true
  }

  export type RoomAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomAssignment to aggregate.
     */
    where?: RoomAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomAssignments to fetch.
     */
    orderBy?: RoomAssignmentOrderByWithRelationInput | RoomAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoomAssignments
    **/
    _count?: true | RoomAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomAssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomAssignmentMaxAggregateInputType
  }

  export type GetRoomAssignmentAggregateType<T extends RoomAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateRoomAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoomAssignment[P]>
      : GetScalarType<T[P], AggregateRoomAssignment[P]>
  }




  export type RoomAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomAssignmentWhereInput
    orderBy?: RoomAssignmentOrderByWithAggregationInput | RoomAssignmentOrderByWithAggregationInput[]
    by: RoomAssignmentScalarFieldEnum[] | RoomAssignmentScalarFieldEnum
    having?: RoomAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomAssignmentCountAggregateInputType | true
    _avg?: RoomAssignmentAvgAggregateInputType
    _sum?: RoomAssignmentSumAggregateInputType
    _min?: RoomAssignmentMinAggregateInputType
    _max?: RoomAssignmentMaxAggregateInputType
  }

  export type RoomAssignmentGroupByOutputType = {
    id: number
    roomId: number
    examId: number
    isActive: boolean
    isCompleted: boolean
    completedAt: Date | null
    _count: RoomAssignmentCountAggregateOutputType | null
    _avg: RoomAssignmentAvgAggregateOutputType | null
    _sum: RoomAssignmentSumAggregateOutputType | null
    _min: RoomAssignmentMinAggregateOutputType | null
    _max: RoomAssignmentMaxAggregateOutputType | null
  }

  type GetRoomAssignmentGroupByPayload<T extends RoomAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], RoomAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type RoomAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    examId?: boolean
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: boolean
    room?: boolean | RoomDefaultArgs<ExtArgs>
    exam?: boolean | ExamDefaultArgs<ExtArgs>
    invigilatorAssignments?: boolean | RoomAssignment$invigilatorAssignmentsArgs<ExtArgs>
    _count?: boolean | RoomAssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomAssignment"]>

  export type RoomAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    examId?: boolean
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: boolean
    room?: boolean | RoomDefaultArgs<ExtArgs>
    exam?: boolean | ExamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomAssignment"]>

  export type RoomAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    examId?: boolean
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: boolean
    room?: boolean | RoomDefaultArgs<ExtArgs>
    exam?: boolean | ExamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomAssignment"]>

  export type RoomAssignmentSelectScalar = {
    id?: boolean
    roomId?: boolean
    examId?: boolean
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: boolean
  }

  export type RoomAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roomId" | "examId" | "isActive" | "isCompleted" | "completedAt", ExtArgs["result"]["roomAssignment"]>
  export type RoomAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | RoomDefaultArgs<ExtArgs>
    exam?: boolean | ExamDefaultArgs<ExtArgs>
    invigilatorAssignments?: boolean | RoomAssignment$invigilatorAssignmentsArgs<ExtArgs>
    _count?: boolean | RoomAssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoomAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | RoomDefaultArgs<ExtArgs>
    exam?: boolean | ExamDefaultArgs<ExtArgs>
  }
  export type RoomAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | RoomDefaultArgs<ExtArgs>
    exam?: boolean | ExamDefaultArgs<ExtArgs>
  }

  export type $RoomAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoomAssignment"
    objects: {
      room: Prisma.$RoomPayload<ExtArgs>
      exam: Prisma.$ExamPayload<ExtArgs>
      invigilatorAssignments: Prisma.$InvigilatorAssignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roomId: number
      examId: number
      isActive: boolean
      isCompleted: boolean
      completedAt: Date | null
    }, ExtArgs["result"]["roomAssignment"]>
    composites: {}
  }

  type RoomAssignmentGetPayload<S extends boolean | null | undefined | RoomAssignmentDefaultArgs> = $Result.GetResult<Prisma.$RoomAssignmentPayload, S>

  type RoomAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomAssignmentCountAggregateInputType | true
    }

  export interface RoomAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoomAssignment'], meta: { name: 'RoomAssignment' } }
    /**
     * Find zero or one RoomAssignment that matches the filter.
     * @param {RoomAssignmentFindUniqueArgs} args - Arguments to find a RoomAssignment
     * @example
     * // Get one RoomAssignment
     * const roomAssignment = await prisma.roomAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomAssignmentFindUniqueArgs>(args: SelectSubset<T, RoomAssignmentFindUniqueArgs<ExtArgs>>): Prisma__RoomAssignmentClient<$Result.GetResult<Prisma.$RoomAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoomAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomAssignmentFindUniqueOrThrowArgs} args - Arguments to find a RoomAssignment
     * @example
     * // Get one RoomAssignment
     * const roomAssignment = await prisma.roomAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomAssignmentClient<$Result.GetResult<Prisma.$RoomAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAssignmentFindFirstArgs} args - Arguments to find a RoomAssignment
     * @example
     * // Get one RoomAssignment
     * const roomAssignment = await prisma.roomAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomAssignmentFindFirstArgs>(args?: SelectSubset<T, RoomAssignmentFindFirstArgs<ExtArgs>>): Prisma__RoomAssignmentClient<$Result.GetResult<Prisma.$RoomAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAssignmentFindFirstOrThrowArgs} args - Arguments to find a RoomAssignment
     * @example
     * // Get one RoomAssignment
     * const roomAssignment = await prisma.roomAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomAssignmentClient<$Result.GetResult<Prisma.$RoomAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoomAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoomAssignments
     * const roomAssignments = await prisma.roomAssignment.findMany()
     * 
     * // Get first 10 RoomAssignments
     * const roomAssignments = await prisma.roomAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomAssignmentWithIdOnly = await prisma.roomAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoomAssignmentFindManyArgs>(args?: SelectSubset<T, RoomAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoomAssignment.
     * @param {RoomAssignmentCreateArgs} args - Arguments to create a RoomAssignment.
     * @example
     * // Create one RoomAssignment
     * const RoomAssignment = await prisma.roomAssignment.create({
     *   data: {
     *     // ... data to create a RoomAssignment
     *   }
     * })
     * 
     */
    create<T extends RoomAssignmentCreateArgs>(args: SelectSubset<T, RoomAssignmentCreateArgs<ExtArgs>>): Prisma__RoomAssignmentClient<$Result.GetResult<Prisma.$RoomAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoomAssignments.
     * @param {RoomAssignmentCreateManyArgs} args - Arguments to create many RoomAssignments.
     * @example
     * // Create many RoomAssignments
     * const roomAssignment = await prisma.roomAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomAssignmentCreateManyArgs>(args?: SelectSubset<T, RoomAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RoomAssignments and returns the data saved in the database.
     * @param {RoomAssignmentCreateManyAndReturnArgs} args - Arguments to create many RoomAssignments.
     * @example
     * // Create many RoomAssignments
     * const roomAssignment = await prisma.roomAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RoomAssignments and only return the `id`
     * const roomAssignmentWithIdOnly = await prisma.roomAssignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RoomAssignment.
     * @param {RoomAssignmentDeleteArgs} args - Arguments to delete one RoomAssignment.
     * @example
     * // Delete one RoomAssignment
     * const RoomAssignment = await prisma.roomAssignment.delete({
     *   where: {
     *     // ... filter to delete one RoomAssignment
     *   }
     * })
     * 
     */
    delete<T extends RoomAssignmentDeleteArgs>(args: SelectSubset<T, RoomAssignmentDeleteArgs<ExtArgs>>): Prisma__RoomAssignmentClient<$Result.GetResult<Prisma.$RoomAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoomAssignment.
     * @param {RoomAssignmentUpdateArgs} args - Arguments to update one RoomAssignment.
     * @example
     * // Update one RoomAssignment
     * const roomAssignment = await prisma.roomAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomAssignmentUpdateArgs>(args: SelectSubset<T, RoomAssignmentUpdateArgs<ExtArgs>>): Prisma__RoomAssignmentClient<$Result.GetResult<Prisma.$RoomAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoomAssignments.
     * @param {RoomAssignmentDeleteManyArgs} args - Arguments to filter RoomAssignments to delete.
     * @example
     * // Delete a few RoomAssignments
     * const { count } = await prisma.roomAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomAssignmentDeleteManyArgs>(args?: SelectSubset<T, RoomAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoomAssignments
     * const roomAssignment = await prisma.roomAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomAssignmentUpdateManyArgs>(args: SelectSubset<T, RoomAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomAssignments and returns the data updated in the database.
     * @param {RoomAssignmentUpdateManyAndReturnArgs} args - Arguments to update many RoomAssignments.
     * @example
     * // Update many RoomAssignments
     * const roomAssignment = await prisma.roomAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RoomAssignments and only return the `id`
     * const roomAssignmentWithIdOnly = await prisma.roomAssignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RoomAssignment.
     * @param {RoomAssignmentUpsertArgs} args - Arguments to update or create a RoomAssignment.
     * @example
     * // Update or create a RoomAssignment
     * const roomAssignment = await prisma.roomAssignment.upsert({
     *   create: {
     *     // ... data to create a RoomAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoomAssignment we want to update
     *   }
     * })
     */
    upsert<T extends RoomAssignmentUpsertArgs>(args: SelectSubset<T, RoomAssignmentUpsertArgs<ExtArgs>>): Prisma__RoomAssignmentClient<$Result.GetResult<Prisma.$RoomAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RoomAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAssignmentCountArgs} args - Arguments to filter RoomAssignments to count.
     * @example
     * // Count the number of RoomAssignments
     * const count = await prisma.roomAssignment.count({
     *   where: {
     *     // ... the filter for the RoomAssignments we want to count
     *   }
     * })
    **/
    count<T extends RoomAssignmentCountArgs>(
      args?: Subset<T, RoomAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoomAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAssignmentAggregateArgs>(args: Subset<T, RoomAssignmentAggregateArgs>): Prisma.PrismaPromise<GetRoomAssignmentAggregateType<T>>

    /**
     * Group by RoomAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: RoomAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoomAssignment model
   */
  readonly fields: RoomAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoomAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    room<T extends RoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoomDefaultArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    exam<T extends ExamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExamDefaultArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    invigilatorAssignments<T extends RoomAssignment$invigilatorAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, RoomAssignment$invigilatorAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvigilatorAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoomAssignment model
   */
  interface RoomAssignmentFieldRefs {
    readonly id: FieldRef<"RoomAssignment", 'Int'>
    readonly roomId: FieldRef<"RoomAssignment", 'Int'>
    readonly examId: FieldRef<"RoomAssignment", 'Int'>
    readonly isActive: FieldRef<"RoomAssignment", 'Boolean'>
    readonly isCompleted: FieldRef<"RoomAssignment", 'Boolean'>
    readonly completedAt: FieldRef<"RoomAssignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RoomAssignment findUnique
   */
  export type RoomAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAssignment
     */
    select?: RoomAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAssignment
     */
    omit?: RoomAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which RoomAssignment to fetch.
     */
    where: RoomAssignmentWhereUniqueInput
  }

  /**
   * RoomAssignment findUniqueOrThrow
   */
  export type RoomAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAssignment
     */
    select?: RoomAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAssignment
     */
    omit?: RoomAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which RoomAssignment to fetch.
     */
    where: RoomAssignmentWhereUniqueInput
  }

  /**
   * RoomAssignment findFirst
   */
  export type RoomAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAssignment
     */
    select?: RoomAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAssignment
     */
    omit?: RoomAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which RoomAssignment to fetch.
     */
    where?: RoomAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomAssignments to fetch.
     */
    orderBy?: RoomAssignmentOrderByWithRelationInput | RoomAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomAssignments.
     */
    cursor?: RoomAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomAssignments.
     */
    distinct?: RoomAssignmentScalarFieldEnum | RoomAssignmentScalarFieldEnum[]
  }

  /**
   * RoomAssignment findFirstOrThrow
   */
  export type RoomAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAssignment
     */
    select?: RoomAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAssignment
     */
    omit?: RoomAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which RoomAssignment to fetch.
     */
    where?: RoomAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomAssignments to fetch.
     */
    orderBy?: RoomAssignmentOrderByWithRelationInput | RoomAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomAssignments.
     */
    cursor?: RoomAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomAssignments.
     */
    distinct?: RoomAssignmentScalarFieldEnum | RoomAssignmentScalarFieldEnum[]
  }

  /**
   * RoomAssignment findMany
   */
  export type RoomAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAssignment
     */
    select?: RoomAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAssignment
     */
    omit?: RoomAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which RoomAssignments to fetch.
     */
    where?: RoomAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomAssignments to fetch.
     */
    orderBy?: RoomAssignmentOrderByWithRelationInput | RoomAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoomAssignments.
     */
    cursor?: RoomAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomAssignments.
     */
    skip?: number
    distinct?: RoomAssignmentScalarFieldEnum | RoomAssignmentScalarFieldEnum[]
  }

  /**
   * RoomAssignment create
   */
  export type RoomAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAssignment
     */
    select?: RoomAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAssignment
     */
    omit?: RoomAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a RoomAssignment.
     */
    data: XOR<RoomAssignmentCreateInput, RoomAssignmentUncheckedCreateInput>
  }

  /**
   * RoomAssignment createMany
   */
  export type RoomAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoomAssignments.
     */
    data: RoomAssignmentCreateManyInput | RoomAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoomAssignment createManyAndReturn
   */
  export type RoomAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAssignment
     */
    select?: RoomAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAssignment
     */
    omit?: RoomAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many RoomAssignments.
     */
    data: RoomAssignmentCreateManyInput | RoomAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomAssignment update
   */
  export type RoomAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAssignment
     */
    select?: RoomAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAssignment
     */
    omit?: RoomAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a RoomAssignment.
     */
    data: XOR<RoomAssignmentUpdateInput, RoomAssignmentUncheckedUpdateInput>
    /**
     * Choose, which RoomAssignment to update.
     */
    where: RoomAssignmentWhereUniqueInput
  }

  /**
   * RoomAssignment updateMany
   */
  export type RoomAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoomAssignments.
     */
    data: XOR<RoomAssignmentUpdateManyMutationInput, RoomAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which RoomAssignments to update
     */
    where?: RoomAssignmentWhereInput
    /**
     * Limit how many RoomAssignments to update.
     */
    limit?: number
  }

  /**
   * RoomAssignment updateManyAndReturn
   */
  export type RoomAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAssignment
     */
    select?: RoomAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAssignment
     */
    omit?: RoomAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update RoomAssignments.
     */
    data: XOR<RoomAssignmentUpdateManyMutationInput, RoomAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which RoomAssignments to update
     */
    where?: RoomAssignmentWhereInput
    /**
     * Limit how many RoomAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomAssignment upsert
   */
  export type RoomAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAssignment
     */
    select?: RoomAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAssignment
     */
    omit?: RoomAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the RoomAssignment to update in case it exists.
     */
    where: RoomAssignmentWhereUniqueInput
    /**
     * In case the RoomAssignment found by the `where` argument doesn't exist, create a new RoomAssignment with this data.
     */
    create: XOR<RoomAssignmentCreateInput, RoomAssignmentUncheckedCreateInput>
    /**
     * In case the RoomAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomAssignmentUpdateInput, RoomAssignmentUncheckedUpdateInput>
  }

  /**
   * RoomAssignment delete
   */
  export type RoomAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAssignment
     */
    select?: RoomAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAssignment
     */
    omit?: RoomAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAssignmentInclude<ExtArgs> | null
    /**
     * Filter which RoomAssignment to delete.
     */
    where: RoomAssignmentWhereUniqueInput
  }

  /**
   * RoomAssignment deleteMany
   */
  export type RoomAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomAssignments to delete
     */
    where?: RoomAssignmentWhereInput
    /**
     * Limit how many RoomAssignments to delete.
     */
    limit?: number
  }

  /**
   * RoomAssignment.invigilatorAssignments
   */
  export type RoomAssignment$invigilatorAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvigilatorAssignment
     */
    select?: InvigilatorAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvigilatorAssignment
     */
    omit?: InvigilatorAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorAssignmentInclude<ExtArgs> | null
    where?: InvigilatorAssignmentWhereInput
    orderBy?: InvigilatorAssignmentOrderByWithRelationInput | InvigilatorAssignmentOrderByWithRelationInput[]
    cursor?: InvigilatorAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvigilatorAssignmentScalarFieldEnum | InvigilatorAssignmentScalarFieldEnum[]
  }

  /**
   * RoomAssignment without action
   */
  export type RoomAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAssignment
     */
    select?: RoomAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAssignment
     */
    omit?: RoomAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model InvigilatorAssignment
   */

  export type AggregateInvigilatorAssignment = {
    _count: InvigilatorAssignmentCountAggregateOutputType | null
    _avg: InvigilatorAssignmentAvgAggregateOutputType | null
    _sum: InvigilatorAssignmentSumAggregateOutputType | null
    _min: InvigilatorAssignmentMinAggregateOutputType | null
    _max: InvigilatorAssignmentMaxAggregateOutputType | null
  }

  export type InvigilatorAssignmentAvgAggregateOutputType = {
    id: number | null
    invigilatorId: number | null
    roomAssignmentId: number | null
  }

  export type InvigilatorAssignmentSumAggregateOutputType = {
    id: number | null
    invigilatorId: number | null
    roomAssignmentId: number | null
  }

  export type InvigilatorAssignmentMinAggregateOutputType = {
    id: number | null
    invigilatorId: number | null
    roomAssignmentId: number | null
    status: string | null
    assignedAt: Date | null
    completedAt: Date | null
  }

  export type InvigilatorAssignmentMaxAggregateOutputType = {
    id: number | null
    invigilatorId: number | null
    roomAssignmentId: number | null
    status: string | null
    assignedAt: Date | null
    completedAt: Date | null
  }

  export type InvigilatorAssignmentCountAggregateOutputType = {
    id: number
    invigilatorId: number
    roomAssignmentId: number
    status: number
    assignedAt: number
    completedAt: number
    _all: number
  }


  export type InvigilatorAssignmentAvgAggregateInputType = {
    id?: true
    invigilatorId?: true
    roomAssignmentId?: true
  }

  export type InvigilatorAssignmentSumAggregateInputType = {
    id?: true
    invigilatorId?: true
    roomAssignmentId?: true
  }

  export type InvigilatorAssignmentMinAggregateInputType = {
    id?: true
    invigilatorId?: true
    roomAssignmentId?: true
    status?: true
    assignedAt?: true
    completedAt?: true
  }

  export type InvigilatorAssignmentMaxAggregateInputType = {
    id?: true
    invigilatorId?: true
    roomAssignmentId?: true
    status?: true
    assignedAt?: true
    completedAt?: true
  }

  export type InvigilatorAssignmentCountAggregateInputType = {
    id?: true
    invigilatorId?: true
    roomAssignmentId?: true
    status?: true
    assignedAt?: true
    completedAt?: true
    _all?: true
  }

  export type InvigilatorAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvigilatorAssignment to aggregate.
     */
    where?: InvigilatorAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvigilatorAssignments to fetch.
     */
    orderBy?: InvigilatorAssignmentOrderByWithRelationInput | InvigilatorAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvigilatorAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvigilatorAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvigilatorAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvigilatorAssignments
    **/
    _count?: true | InvigilatorAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvigilatorAssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvigilatorAssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvigilatorAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvigilatorAssignmentMaxAggregateInputType
  }

  export type GetInvigilatorAssignmentAggregateType<T extends InvigilatorAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateInvigilatorAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvigilatorAssignment[P]>
      : GetScalarType<T[P], AggregateInvigilatorAssignment[P]>
  }




  export type InvigilatorAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvigilatorAssignmentWhereInput
    orderBy?: InvigilatorAssignmentOrderByWithAggregationInput | InvigilatorAssignmentOrderByWithAggregationInput[]
    by: InvigilatorAssignmentScalarFieldEnum[] | InvigilatorAssignmentScalarFieldEnum
    having?: InvigilatorAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvigilatorAssignmentCountAggregateInputType | true
    _avg?: InvigilatorAssignmentAvgAggregateInputType
    _sum?: InvigilatorAssignmentSumAggregateInputType
    _min?: InvigilatorAssignmentMinAggregateInputType
    _max?: InvigilatorAssignmentMaxAggregateInputType
  }

  export type InvigilatorAssignmentGroupByOutputType = {
    id: number
    invigilatorId: number
    roomAssignmentId: number
    status: string
    assignedAt: Date
    completedAt: Date | null
    _count: InvigilatorAssignmentCountAggregateOutputType | null
    _avg: InvigilatorAssignmentAvgAggregateOutputType | null
    _sum: InvigilatorAssignmentSumAggregateOutputType | null
    _min: InvigilatorAssignmentMinAggregateOutputType | null
    _max: InvigilatorAssignmentMaxAggregateOutputType | null
  }

  type GetInvigilatorAssignmentGroupByPayload<T extends InvigilatorAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvigilatorAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvigilatorAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvigilatorAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], InvigilatorAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type InvigilatorAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invigilatorId?: boolean
    roomAssignmentId?: boolean
    status?: boolean
    assignedAt?: boolean
    completedAt?: boolean
    invigilator?: boolean | InvigilatorDefaultArgs<ExtArgs>
    roomAssignment?: boolean | RoomAssignmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invigilatorAssignment"]>

  export type InvigilatorAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invigilatorId?: boolean
    roomAssignmentId?: boolean
    status?: boolean
    assignedAt?: boolean
    completedAt?: boolean
    invigilator?: boolean | InvigilatorDefaultArgs<ExtArgs>
    roomAssignment?: boolean | RoomAssignmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invigilatorAssignment"]>

  export type InvigilatorAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    invigilatorId?: boolean
    roomAssignmentId?: boolean
    status?: boolean
    assignedAt?: boolean
    completedAt?: boolean
    invigilator?: boolean | InvigilatorDefaultArgs<ExtArgs>
    roomAssignment?: boolean | RoomAssignmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invigilatorAssignment"]>

  export type InvigilatorAssignmentSelectScalar = {
    id?: boolean
    invigilatorId?: boolean
    roomAssignmentId?: boolean
    status?: boolean
    assignedAt?: boolean
    completedAt?: boolean
  }

  export type InvigilatorAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "invigilatorId" | "roomAssignmentId" | "status" | "assignedAt" | "completedAt", ExtArgs["result"]["invigilatorAssignment"]>
  export type InvigilatorAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invigilator?: boolean | InvigilatorDefaultArgs<ExtArgs>
    roomAssignment?: boolean | RoomAssignmentDefaultArgs<ExtArgs>
  }
  export type InvigilatorAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invigilator?: boolean | InvigilatorDefaultArgs<ExtArgs>
    roomAssignment?: boolean | RoomAssignmentDefaultArgs<ExtArgs>
  }
  export type InvigilatorAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invigilator?: boolean | InvigilatorDefaultArgs<ExtArgs>
    roomAssignment?: boolean | RoomAssignmentDefaultArgs<ExtArgs>
  }

  export type $InvigilatorAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InvigilatorAssignment"
    objects: {
      invigilator: Prisma.$InvigilatorPayload<ExtArgs>
      roomAssignment: Prisma.$RoomAssignmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      invigilatorId: number
      roomAssignmentId: number
      status: string
      assignedAt: Date
      completedAt: Date | null
    }, ExtArgs["result"]["invigilatorAssignment"]>
    composites: {}
  }

  type InvigilatorAssignmentGetPayload<S extends boolean | null | undefined | InvigilatorAssignmentDefaultArgs> = $Result.GetResult<Prisma.$InvigilatorAssignmentPayload, S>

  type InvigilatorAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvigilatorAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvigilatorAssignmentCountAggregateInputType | true
    }

  export interface InvigilatorAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InvigilatorAssignment'], meta: { name: 'InvigilatorAssignment' } }
    /**
     * Find zero or one InvigilatorAssignment that matches the filter.
     * @param {InvigilatorAssignmentFindUniqueArgs} args - Arguments to find a InvigilatorAssignment
     * @example
     * // Get one InvigilatorAssignment
     * const invigilatorAssignment = await prisma.invigilatorAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvigilatorAssignmentFindUniqueArgs>(args: SelectSubset<T, InvigilatorAssignmentFindUniqueArgs<ExtArgs>>): Prisma__InvigilatorAssignmentClient<$Result.GetResult<Prisma.$InvigilatorAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InvigilatorAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvigilatorAssignmentFindUniqueOrThrowArgs} args - Arguments to find a InvigilatorAssignment
     * @example
     * // Get one InvigilatorAssignment
     * const invigilatorAssignment = await prisma.invigilatorAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvigilatorAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, InvigilatorAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvigilatorAssignmentClient<$Result.GetResult<Prisma.$InvigilatorAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InvigilatorAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvigilatorAssignmentFindFirstArgs} args - Arguments to find a InvigilatorAssignment
     * @example
     * // Get one InvigilatorAssignment
     * const invigilatorAssignment = await prisma.invigilatorAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvigilatorAssignmentFindFirstArgs>(args?: SelectSubset<T, InvigilatorAssignmentFindFirstArgs<ExtArgs>>): Prisma__InvigilatorAssignmentClient<$Result.GetResult<Prisma.$InvigilatorAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InvigilatorAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvigilatorAssignmentFindFirstOrThrowArgs} args - Arguments to find a InvigilatorAssignment
     * @example
     * // Get one InvigilatorAssignment
     * const invigilatorAssignment = await prisma.invigilatorAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvigilatorAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, InvigilatorAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvigilatorAssignmentClient<$Result.GetResult<Prisma.$InvigilatorAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InvigilatorAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvigilatorAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvigilatorAssignments
     * const invigilatorAssignments = await prisma.invigilatorAssignment.findMany()
     * 
     * // Get first 10 InvigilatorAssignments
     * const invigilatorAssignments = await prisma.invigilatorAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invigilatorAssignmentWithIdOnly = await prisma.invigilatorAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvigilatorAssignmentFindManyArgs>(args?: SelectSubset<T, InvigilatorAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvigilatorAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InvigilatorAssignment.
     * @param {InvigilatorAssignmentCreateArgs} args - Arguments to create a InvigilatorAssignment.
     * @example
     * // Create one InvigilatorAssignment
     * const InvigilatorAssignment = await prisma.invigilatorAssignment.create({
     *   data: {
     *     // ... data to create a InvigilatorAssignment
     *   }
     * })
     * 
     */
    create<T extends InvigilatorAssignmentCreateArgs>(args: SelectSubset<T, InvigilatorAssignmentCreateArgs<ExtArgs>>): Prisma__InvigilatorAssignmentClient<$Result.GetResult<Prisma.$InvigilatorAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InvigilatorAssignments.
     * @param {InvigilatorAssignmentCreateManyArgs} args - Arguments to create many InvigilatorAssignments.
     * @example
     * // Create many InvigilatorAssignments
     * const invigilatorAssignment = await prisma.invigilatorAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvigilatorAssignmentCreateManyArgs>(args?: SelectSubset<T, InvigilatorAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InvigilatorAssignments and returns the data saved in the database.
     * @param {InvigilatorAssignmentCreateManyAndReturnArgs} args - Arguments to create many InvigilatorAssignments.
     * @example
     * // Create many InvigilatorAssignments
     * const invigilatorAssignment = await prisma.invigilatorAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InvigilatorAssignments and only return the `id`
     * const invigilatorAssignmentWithIdOnly = await prisma.invigilatorAssignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvigilatorAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, InvigilatorAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvigilatorAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InvigilatorAssignment.
     * @param {InvigilatorAssignmentDeleteArgs} args - Arguments to delete one InvigilatorAssignment.
     * @example
     * // Delete one InvigilatorAssignment
     * const InvigilatorAssignment = await prisma.invigilatorAssignment.delete({
     *   where: {
     *     // ... filter to delete one InvigilatorAssignment
     *   }
     * })
     * 
     */
    delete<T extends InvigilatorAssignmentDeleteArgs>(args: SelectSubset<T, InvigilatorAssignmentDeleteArgs<ExtArgs>>): Prisma__InvigilatorAssignmentClient<$Result.GetResult<Prisma.$InvigilatorAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InvigilatorAssignment.
     * @param {InvigilatorAssignmentUpdateArgs} args - Arguments to update one InvigilatorAssignment.
     * @example
     * // Update one InvigilatorAssignment
     * const invigilatorAssignment = await prisma.invigilatorAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvigilatorAssignmentUpdateArgs>(args: SelectSubset<T, InvigilatorAssignmentUpdateArgs<ExtArgs>>): Prisma__InvigilatorAssignmentClient<$Result.GetResult<Prisma.$InvigilatorAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InvigilatorAssignments.
     * @param {InvigilatorAssignmentDeleteManyArgs} args - Arguments to filter InvigilatorAssignments to delete.
     * @example
     * // Delete a few InvigilatorAssignments
     * const { count } = await prisma.invigilatorAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvigilatorAssignmentDeleteManyArgs>(args?: SelectSubset<T, InvigilatorAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvigilatorAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvigilatorAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvigilatorAssignments
     * const invigilatorAssignment = await prisma.invigilatorAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvigilatorAssignmentUpdateManyArgs>(args: SelectSubset<T, InvigilatorAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvigilatorAssignments and returns the data updated in the database.
     * @param {InvigilatorAssignmentUpdateManyAndReturnArgs} args - Arguments to update many InvigilatorAssignments.
     * @example
     * // Update many InvigilatorAssignments
     * const invigilatorAssignment = await prisma.invigilatorAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InvigilatorAssignments and only return the `id`
     * const invigilatorAssignmentWithIdOnly = await prisma.invigilatorAssignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvigilatorAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, InvigilatorAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvigilatorAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InvigilatorAssignment.
     * @param {InvigilatorAssignmentUpsertArgs} args - Arguments to update or create a InvigilatorAssignment.
     * @example
     * // Update or create a InvigilatorAssignment
     * const invigilatorAssignment = await prisma.invigilatorAssignment.upsert({
     *   create: {
     *     // ... data to create a InvigilatorAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvigilatorAssignment we want to update
     *   }
     * })
     */
    upsert<T extends InvigilatorAssignmentUpsertArgs>(args: SelectSubset<T, InvigilatorAssignmentUpsertArgs<ExtArgs>>): Prisma__InvigilatorAssignmentClient<$Result.GetResult<Prisma.$InvigilatorAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InvigilatorAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvigilatorAssignmentCountArgs} args - Arguments to filter InvigilatorAssignments to count.
     * @example
     * // Count the number of InvigilatorAssignments
     * const count = await prisma.invigilatorAssignment.count({
     *   where: {
     *     // ... the filter for the InvigilatorAssignments we want to count
     *   }
     * })
    **/
    count<T extends InvigilatorAssignmentCountArgs>(
      args?: Subset<T, InvigilatorAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvigilatorAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvigilatorAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvigilatorAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvigilatorAssignmentAggregateArgs>(args: Subset<T, InvigilatorAssignmentAggregateArgs>): Prisma.PrismaPromise<GetInvigilatorAssignmentAggregateType<T>>

    /**
     * Group by InvigilatorAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvigilatorAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvigilatorAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvigilatorAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: InvigilatorAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvigilatorAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvigilatorAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InvigilatorAssignment model
   */
  readonly fields: InvigilatorAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvigilatorAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvigilatorAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    invigilator<T extends InvigilatorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvigilatorDefaultArgs<ExtArgs>>): Prisma__InvigilatorClient<$Result.GetResult<Prisma.$InvigilatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    roomAssignment<T extends RoomAssignmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoomAssignmentDefaultArgs<ExtArgs>>): Prisma__RoomAssignmentClient<$Result.GetResult<Prisma.$RoomAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InvigilatorAssignment model
   */
  interface InvigilatorAssignmentFieldRefs {
    readonly id: FieldRef<"InvigilatorAssignment", 'Int'>
    readonly invigilatorId: FieldRef<"InvigilatorAssignment", 'Int'>
    readonly roomAssignmentId: FieldRef<"InvigilatorAssignment", 'Int'>
    readonly status: FieldRef<"InvigilatorAssignment", 'String'>
    readonly assignedAt: FieldRef<"InvigilatorAssignment", 'DateTime'>
    readonly completedAt: FieldRef<"InvigilatorAssignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InvigilatorAssignment findUnique
   */
  export type InvigilatorAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvigilatorAssignment
     */
    select?: InvigilatorAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvigilatorAssignment
     */
    omit?: InvigilatorAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which InvigilatorAssignment to fetch.
     */
    where: InvigilatorAssignmentWhereUniqueInput
  }

  /**
   * InvigilatorAssignment findUniqueOrThrow
   */
  export type InvigilatorAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvigilatorAssignment
     */
    select?: InvigilatorAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvigilatorAssignment
     */
    omit?: InvigilatorAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which InvigilatorAssignment to fetch.
     */
    where: InvigilatorAssignmentWhereUniqueInput
  }

  /**
   * InvigilatorAssignment findFirst
   */
  export type InvigilatorAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvigilatorAssignment
     */
    select?: InvigilatorAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvigilatorAssignment
     */
    omit?: InvigilatorAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which InvigilatorAssignment to fetch.
     */
    where?: InvigilatorAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvigilatorAssignments to fetch.
     */
    orderBy?: InvigilatorAssignmentOrderByWithRelationInput | InvigilatorAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvigilatorAssignments.
     */
    cursor?: InvigilatorAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvigilatorAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvigilatorAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvigilatorAssignments.
     */
    distinct?: InvigilatorAssignmentScalarFieldEnum | InvigilatorAssignmentScalarFieldEnum[]
  }

  /**
   * InvigilatorAssignment findFirstOrThrow
   */
  export type InvigilatorAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvigilatorAssignment
     */
    select?: InvigilatorAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvigilatorAssignment
     */
    omit?: InvigilatorAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which InvigilatorAssignment to fetch.
     */
    where?: InvigilatorAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvigilatorAssignments to fetch.
     */
    orderBy?: InvigilatorAssignmentOrderByWithRelationInput | InvigilatorAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvigilatorAssignments.
     */
    cursor?: InvigilatorAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvigilatorAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvigilatorAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvigilatorAssignments.
     */
    distinct?: InvigilatorAssignmentScalarFieldEnum | InvigilatorAssignmentScalarFieldEnum[]
  }

  /**
   * InvigilatorAssignment findMany
   */
  export type InvigilatorAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvigilatorAssignment
     */
    select?: InvigilatorAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvigilatorAssignment
     */
    omit?: InvigilatorAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which InvigilatorAssignments to fetch.
     */
    where?: InvigilatorAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvigilatorAssignments to fetch.
     */
    orderBy?: InvigilatorAssignmentOrderByWithRelationInput | InvigilatorAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvigilatorAssignments.
     */
    cursor?: InvigilatorAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvigilatorAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvigilatorAssignments.
     */
    skip?: number
    distinct?: InvigilatorAssignmentScalarFieldEnum | InvigilatorAssignmentScalarFieldEnum[]
  }

  /**
   * InvigilatorAssignment create
   */
  export type InvigilatorAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvigilatorAssignment
     */
    select?: InvigilatorAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvigilatorAssignment
     */
    omit?: InvigilatorAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a InvigilatorAssignment.
     */
    data: XOR<InvigilatorAssignmentCreateInput, InvigilatorAssignmentUncheckedCreateInput>
  }

  /**
   * InvigilatorAssignment createMany
   */
  export type InvigilatorAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InvigilatorAssignments.
     */
    data: InvigilatorAssignmentCreateManyInput | InvigilatorAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InvigilatorAssignment createManyAndReturn
   */
  export type InvigilatorAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvigilatorAssignment
     */
    select?: InvigilatorAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InvigilatorAssignment
     */
    omit?: InvigilatorAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many InvigilatorAssignments.
     */
    data: InvigilatorAssignmentCreateManyInput | InvigilatorAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InvigilatorAssignment update
   */
  export type InvigilatorAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvigilatorAssignment
     */
    select?: InvigilatorAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvigilatorAssignment
     */
    omit?: InvigilatorAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a InvigilatorAssignment.
     */
    data: XOR<InvigilatorAssignmentUpdateInput, InvigilatorAssignmentUncheckedUpdateInput>
    /**
     * Choose, which InvigilatorAssignment to update.
     */
    where: InvigilatorAssignmentWhereUniqueInput
  }

  /**
   * InvigilatorAssignment updateMany
   */
  export type InvigilatorAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InvigilatorAssignments.
     */
    data: XOR<InvigilatorAssignmentUpdateManyMutationInput, InvigilatorAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which InvigilatorAssignments to update
     */
    where?: InvigilatorAssignmentWhereInput
    /**
     * Limit how many InvigilatorAssignments to update.
     */
    limit?: number
  }

  /**
   * InvigilatorAssignment updateManyAndReturn
   */
  export type InvigilatorAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvigilatorAssignment
     */
    select?: InvigilatorAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InvigilatorAssignment
     */
    omit?: InvigilatorAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update InvigilatorAssignments.
     */
    data: XOR<InvigilatorAssignmentUpdateManyMutationInput, InvigilatorAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which InvigilatorAssignments to update
     */
    where?: InvigilatorAssignmentWhereInput
    /**
     * Limit how many InvigilatorAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InvigilatorAssignment upsert
   */
  export type InvigilatorAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvigilatorAssignment
     */
    select?: InvigilatorAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvigilatorAssignment
     */
    omit?: InvigilatorAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the InvigilatorAssignment to update in case it exists.
     */
    where: InvigilatorAssignmentWhereUniqueInput
    /**
     * In case the InvigilatorAssignment found by the `where` argument doesn't exist, create a new InvigilatorAssignment with this data.
     */
    create: XOR<InvigilatorAssignmentCreateInput, InvigilatorAssignmentUncheckedCreateInput>
    /**
     * In case the InvigilatorAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvigilatorAssignmentUpdateInput, InvigilatorAssignmentUncheckedUpdateInput>
  }

  /**
   * InvigilatorAssignment delete
   */
  export type InvigilatorAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvigilatorAssignment
     */
    select?: InvigilatorAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvigilatorAssignment
     */
    omit?: InvigilatorAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorAssignmentInclude<ExtArgs> | null
    /**
     * Filter which InvigilatorAssignment to delete.
     */
    where: InvigilatorAssignmentWhereUniqueInput
  }

  /**
   * InvigilatorAssignment deleteMany
   */
  export type InvigilatorAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvigilatorAssignments to delete
     */
    where?: InvigilatorAssignmentWhereInput
    /**
     * Limit how many InvigilatorAssignments to delete.
     */
    limit?: number
  }

  /**
   * InvigilatorAssignment without action
   */
  export type InvigilatorAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvigilatorAssignment
     */
    select?: InvigilatorAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvigilatorAssignment
     */
    omit?: InvigilatorAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvigilatorAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model SeatingPlan
   */

  export type AggregateSeatingPlan = {
    _count: SeatingPlanCountAggregateOutputType | null
    _avg: SeatingPlanAvgAggregateOutputType | null
    _sum: SeatingPlanSumAggregateOutputType | null
    _min: SeatingPlanMinAggregateOutputType | null
    _max: SeatingPlanMaxAggregateOutputType | null
  }

  export type SeatingPlanAvgAggregateOutputType = {
    id: number | null
    examId: number | null
  }

  export type SeatingPlanSumAggregateOutputType = {
    id: number | null
    examId: number | null
  }

  export type SeatingPlanMinAggregateOutputType = {
    id: number | null
    examId: number | null
    createdAt: Date | null
    isActive: boolean | null
  }

  export type SeatingPlanMaxAggregateOutputType = {
    id: number | null
    examId: number | null
    createdAt: Date | null
    isActive: boolean | null
  }

  export type SeatingPlanCountAggregateOutputType = {
    id: number
    examId: number
    createdAt: number
    isActive: number
    _all: number
  }


  export type SeatingPlanAvgAggregateInputType = {
    id?: true
    examId?: true
  }

  export type SeatingPlanSumAggregateInputType = {
    id?: true
    examId?: true
  }

  export type SeatingPlanMinAggregateInputType = {
    id?: true
    examId?: true
    createdAt?: true
    isActive?: true
  }

  export type SeatingPlanMaxAggregateInputType = {
    id?: true
    examId?: true
    createdAt?: true
    isActive?: true
  }

  export type SeatingPlanCountAggregateInputType = {
    id?: true
    examId?: true
    createdAt?: true
    isActive?: true
    _all?: true
  }

  export type SeatingPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeatingPlan to aggregate.
     */
    where?: SeatingPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeatingPlans to fetch.
     */
    orderBy?: SeatingPlanOrderByWithRelationInput | SeatingPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeatingPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeatingPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeatingPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SeatingPlans
    **/
    _count?: true | SeatingPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeatingPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeatingPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeatingPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeatingPlanMaxAggregateInputType
  }

  export type GetSeatingPlanAggregateType<T extends SeatingPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateSeatingPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeatingPlan[P]>
      : GetScalarType<T[P], AggregateSeatingPlan[P]>
  }




  export type SeatingPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeatingPlanWhereInput
    orderBy?: SeatingPlanOrderByWithAggregationInput | SeatingPlanOrderByWithAggregationInput[]
    by: SeatingPlanScalarFieldEnum[] | SeatingPlanScalarFieldEnum
    having?: SeatingPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeatingPlanCountAggregateInputType | true
    _avg?: SeatingPlanAvgAggregateInputType
    _sum?: SeatingPlanSumAggregateInputType
    _min?: SeatingPlanMinAggregateInputType
    _max?: SeatingPlanMaxAggregateInputType
  }

  export type SeatingPlanGroupByOutputType = {
    id: number
    examId: number
    createdAt: Date
    isActive: boolean
    _count: SeatingPlanCountAggregateOutputType | null
    _avg: SeatingPlanAvgAggregateOutputType | null
    _sum: SeatingPlanSumAggregateOutputType | null
    _min: SeatingPlanMinAggregateOutputType | null
    _max: SeatingPlanMaxAggregateOutputType | null
  }

  type GetSeatingPlanGroupByPayload<T extends SeatingPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeatingPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeatingPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeatingPlanGroupByOutputType[P]>
            : GetScalarType<T[P], SeatingPlanGroupByOutputType[P]>
        }
      >
    >


  export type SeatingPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examId?: boolean
    createdAt?: boolean
    isActive?: boolean
    exam?: boolean | ExamDefaultArgs<ExtArgs>
    seats?: boolean | SeatingPlan$seatsArgs<ExtArgs>
    _count?: boolean | SeatingPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seatingPlan"]>

  export type SeatingPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examId?: boolean
    createdAt?: boolean
    isActive?: boolean
    exam?: boolean | ExamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seatingPlan"]>

  export type SeatingPlanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examId?: boolean
    createdAt?: boolean
    isActive?: boolean
    exam?: boolean | ExamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seatingPlan"]>

  export type SeatingPlanSelectScalar = {
    id?: boolean
    examId?: boolean
    createdAt?: boolean
    isActive?: boolean
  }

  export type SeatingPlanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "examId" | "createdAt" | "isActive", ExtArgs["result"]["seatingPlan"]>
  export type SeatingPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exam?: boolean | ExamDefaultArgs<ExtArgs>
    seats?: boolean | SeatingPlan$seatsArgs<ExtArgs>
    _count?: boolean | SeatingPlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SeatingPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exam?: boolean | ExamDefaultArgs<ExtArgs>
  }
  export type SeatingPlanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exam?: boolean | ExamDefaultArgs<ExtArgs>
  }

  export type $SeatingPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SeatingPlan"
    objects: {
      exam: Prisma.$ExamPayload<ExtArgs>
      seats: Prisma.$SeatPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      examId: number
      createdAt: Date
      isActive: boolean
    }, ExtArgs["result"]["seatingPlan"]>
    composites: {}
  }

  type SeatingPlanGetPayload<S extends boolean | null | undefined | SeatingPlanDefaultArgs> = $Result.GetResult<Prisma.$SeatingPlanPayload, S>

  type SeatingPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SeatingPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SeatingPlanCountAggregateInputType | true
    }

  export interface SeatingPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SeatingPlan'], meta: { name: 'SeatingPlan' } }
    /**
     * Find zero or one SeatingPlan that matches the filter.
     * @param {SeatingPlanFindUniqueArgs} args - Arguments to find a SeatingPlan
     * @example
     * // Get one SeatingPlan
     * const seatingPlan = await prisma.seatingPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeatingPlanFindUniqueArgs>(args: SelectSubset<T, SeatingPlanFindUniqueArgs<ExtArgs>>): Prisma__SeatingPlanClient<$Result.GetResult<Prisma.$SeatingPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SeatingPlan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SeatingPlanFindUniqueOrThrowArgs} args - Arguments to find a SeatingPlan
     * @example
     * // Get one SeatingPlan
     * const seatingPlan = await prisma.seatingPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeatingPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, SeatingPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeatingPlanClient<$Result.GetResult<Prisma.$SeatingPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SeatingPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatingPlanFindFirstArgs} args - Arguments to find a SeatingPlan
     * @example
     * // Get one SeatingPlan
     * const seatingPlan = await prisma.seatingPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeatingPlanFindFirstArgs>(args?: SelectSubset<T, SeatingPlanFindFirstArgs<ExtArgs>>): Prisma__SeatingPlanClient<$Result.GetResult<Prisma.$SeatingPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SeatingPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatingPlanFindFirstOrThrowArgs} args - Arguments to find a SeatingPlan
     * @example
     * // Get one SeatingPlan
     * const seatingPlan = await prisma.seatingPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeatingPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, SeatingPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeatingPlanClient<$Result.GetResult<Prisma.$SeatingPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SeatingPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatingPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SeatingPlans
     * const seatingPlans = await prisma.seatingPlan.findMany()
     * 
     * // Get first 10 SeatingPlans
     * const seatingPlans = await prisma.seatingPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seatingPlanWithIdOnly = await prisma.seatingPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SeatingPlanFindManyArgs>(args?: SelectSubset<T, SeatingPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatingPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SeatingPlan.
     * @param {SeatingPlanCreateArgs} args - Arguments to create a SeatingPlan.
     * @example
     * // Create one SeatingPlan
     * const SeatingPlan = await prisma.seatingPlan.create({
     *   data: {
     *     // ... data to create a SeatingPlan
     *   }
     * })
     * 
     */
    create<T extends SeatingPlanCreateArgs>(args: SelectSubset<T, SeatingPlanCreateArgs<ExtArgs>>): Prisma__SeatingPlanClient<$Result.GetResult<Prisma.$SeatingPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SeatingPlans.
     * @param {SeatingPlanCreateManyArgs} args - Arguments to create many SeatingPlans.
     * @example
     * // Create many SeatingPlans
     * const seatingPlan = await prisma.seatingPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeatingPlanCreateManyArgs>(args?: SelectSubset<T, SeatingPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SeatingPlans and returns the data saved in the database.
     * @param {SeatingPlanCreateManyAndReturnArgs} args - Arguments to create many SeatingPlans.
     * @example
     * // Create many SeatingPlans
     * const seatingPlan = await prisma.seatingPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SeatingPlans and only return the `id`
     * const seatingPlanWithIdOnly = await prisma.seatingPlan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeatingPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, SeatingPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatingPlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SeatingPlan.
     * @param {SeatingPlanDeleteArgs} args - Arguments to delete one SeatingPlan.
     * @example
     * // Delete one SeatingPlan
     * const SeatingPlan = await prisma.seatingPlan.delete({
     *   where: {
     *     // ... filter to delete one SeatingPlan
     *   }
     * })
     * 
     */
    delete<T extends SeatingPlanDeleteArgs>(args: SelectSubset<T, SeatingPlanDeleteArgs<ExtArgs>>): Prisma__SeatingPlanClient<$Result.GetResult<Prisma.$SeatingPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SeatingPlan.
     * @param {SeatingPlanUpdateArgs} args - Arguments to update one SeatingPlan.
     * @example
     * // Update one SeatingPlan
     * const seatingPlan = await prisma.seatingPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeatingPlanUpdateArgs>(args: SelectSubset<T, SeatingPlanUpdateArgs<ExtArgs>>): Prisma__SeatingPlanClient<$Result.GetResult<Prisma.$SeatingPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SeatingPlans.
     * @param {SeatingPlanDeleteManyArgs} args - Arguments to filter SeatingPlans to delete.
     * @example
     * // Delete a few SeatingPlans
     * const { count } = await prisma.seatingPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeatingPlanDeleteManyArgs>(args?: SelectSubset<T, SeatingPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SeatingPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatingPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SeatingPlans
     * const seatingPlan = await prisma.seatingPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeatingPlanUpdateManyArgs>(args: SelectSubset<T, SeatingPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SeatingPlans and returns the data updated in the database.
     * @param {SeatingPlanUpdateManyAndReturnArgs} args - Arguments to update many SeatingPlans.
     * @example
     * // Update many SeatingPlans
     * const seatingPlan = await prisma.seatingPlan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SeatingPlans and only return the `id`
     * const seatingPlanWithIdOnly = await prisma.seatingPlan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SeatingPlanUpdateManyAndReturnArgs>(args: SelectSubset<T, SeatingPlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatingPlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SeatingPlan.
     * @param {SeatingPlanUpsertArgs} args - Arguments to update or create a SeatingPlan.
     * @example
     * // Update or create a SeatingPlan
     * const seatingPlan = await prisma.seatingPlan.upsert({
     *   create: {
     *     // ... data to create a SeatingPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SeatingPlan we want to update
     *   }
     * })
     */
    upsert<T extends SeatingPlanUpsertArgs>(args: SelectSubset<T, SeatingPlanUpsertArgs<ExtArgs>>): Prisma__SeatingPlanClient<$Result.GetResult<Prisma.$SeatingPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SeatingPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatingPlanCountArgs} args - Arguments to filter SeatingPlans to count.
     * @example
     * // Count the number of SeatingPlans
     * const count = await prisma.seatingPlan.count({
     *   where: {
     *     // ... the filter for the SeatingPlans we want to count
     *   }
     * })
    **/
    count<T extends SeatingPlanCountArgs>(
      args?: Subset<T, SeatingPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeatingPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SeatingPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatingPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeatingPlanAggregateArgs>(args: Subset<T, SeatingPlanAggregateArgs>): Prisma.PrismaPromise<GetSeatingPlanAggregateType<T>>

    /**
     * Group by SeatingPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatingPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeatingPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeatingPlanGroupByArgs['orderBy'] }
        : { orderBy?: SeatingPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeatingPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeatingPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SeatingPlan model
   */
  readonly fields: SeatingPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SeatingPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeatingPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exam<T extends ExamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExamDefaultArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    seats<T extends SeatingPlan$seatsArgs<ExtArgs> = {}>(args?: Subset<T, SeatingPlan$seatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SeatingPlan model
   */
  interface SeatingPlanFieldRefs {
    readonly id: FieldRef<"SeatingPlan", 'Int'>
    readonly examId: FieldRef<"SeatingPlan", 'Int'>
    readonly createdAt: FieldRef<"SeatingPlan", 'DateTime'>
    readonly isActive: FieldRef<"SeatingPlan", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * SeatingPlan findUnique
   */
  export type SeatingPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatingPlan
     */
    select?: SeatingPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SeatingPlan
     */
    omit?: SeatingPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatingPlanInclude<ExtArgs> | null
    /**
     * Filter, which SeatingPlan to fetch.
     */
    where: SeatingPlanWhereUniqueInput
  }

  /**
   * SeatingPlan findUniqueOrThrow
   */
  export type SeatingPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatingPlan
     */
    select?: SeatingPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SeatingPlan
     */
    omit?: SeatingPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatingPlanInclude<ExtArgs> | null
    /**
     * Filter, which SeatingPlan to fetch.
     */
    where: SeatingPlanWhereUniqueInput
  }

  /**
   * SeatingPlan findFirst
   */
  export type SeatingPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatingPlan
     */
    select?: SeatingPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SeatingPlan
     */
    omit?: SeatingPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatingPlanInclude<ExtArgs> | null
    /**
     * Filter, which SeatingPlan to fetch.
     */
    where?: SeatingPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeatingPlans to fetch.
     */
    orderBy?: SeatingPlanOrderByWithRelationInput | SeatingPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeatingPlans.
     */
    cursor?: SeatingPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeatingPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeatingPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeatingPlans.
     */
    distinct?: SeatingPlanScalarFieldEnum | SeatingPlanScalarFieldEnum[]
  }

  /**
   * SeatingPlan findFirstOrThrow
   */
  export type SeatingPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatingPlan
     */
    select?: SeatingPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SeatingPlan
     */
    omit?: SeatingPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatingPlanInclude<ExtArgs> | null
    /**
     * Filter, which SeatingPlan to fetch.
     */
    where?: SeatingPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeatingPlans to fetch.
     */
    orderBy?: SeatingPlanOrderByWithRelationInput | SeatingPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeatingPlans.
     */
    cursor?: SeatingPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeatingPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeatingPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeatingPlans.
     */
    distinct?: SeatingPlanScalarFieldEnum | SeatingPlanScalarFieldEnum[]
  }

  /**
   * SeatingPlan findMany
   */
  export type SeatingPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatingPlan
     */
    select?: SeatingPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SeatingPlan
     */
    omit?: SeatingPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatingPlanInclude<ExtArgs> | null
    /**
     * Filter, which SeatingPlans to fetch.
     */
    where?: SeatingPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeatingPlans to fetch.
     */
    orderBy?: SeatingPlanOrderByWithRelationInput | SeatingPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SeatingPlans.
     */
    cursor?: SeatingPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeatingPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeatingPlans.
     */
    skip?: number
    distinct?: SeatingPlanScalarFieldEnum | SeatingPlanScalarFieldEnum[]
  }

  /**
   * SeatingPlan create
   */
  export type SeatingPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatingPlan
     */
    select?: SeatingPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SeatingPlan
     */
    omit?: SeatingPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatingPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a SeatingPlan.
     */
    data: XOR<SeatingPlanCreateInput, SeatingPlanUncheckedCreateInput>
  }

  /**
   * SeatingPlan createMany
   */
  export type SeatingPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SeatingPlans.
     */
    data: SeatingPlanCreateManyInput | SeatingPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SeatingPlan createManyAndReturn
   */
  export type SeatingPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatingPlan
     */
    select?: SeatingPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SeatingPlan
     */
    omit?: SeatingPlanOmit<ExtArgs> | null
    /**
     * The data used to create many SeatingPlans.
     */
    data: SeatingPlanCreateManyInput | SeatingPlanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatingPlanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SeatingPlan update
   */
  export type SeatingPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatingPlan
     */
    select?: SeatingPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SeatingPlan
     */
    omit?: SeatingPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatingPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a SeatingPlan.
     */
    data: XOR<SeatingPlanUpdateInput, SeatingPlanUncheckedUpdateInput>
    /**
     * Choose, which SeatingPlan to update.
     */
    where: SeatingPlanWhereUniqueInput
  }

  /**
   * SeatingPlan updateMany
   */
  export type SeatingPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SeatingPlans.
     */
    data: XOR<SeatingPlanUpdateManyMutationInput, SeatingPlanUncheckedUpdateManyInput>
    /**
     * Filter which SeatingPlans to update
     */
    where?: SeatingPlanWhereInput
    /**
     * Limit how many SeatingPlans to update.
     */
    limit?: number
  }

  /**
   * SeatingPlan updateManyAndReturn
   */
  export type SeatingPlanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatingPlan
     */
    select?: SeatingPlanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SeatingPlan
     */
    omit?: SeatingPlanOmit<ExtArgs> | null
    /**
     * The data used to update SeatingPlans.
     */
    data: XOR<SeatingPlanUpdateManyMutationInput, SeatingPlanUncheckedUpdateManyInput>
    /**
     * Filter which SeatingPlans to update
     */
    where?: SeatingPlanWhereInput
    /**
     * Limit how many SeatingPlans to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatingPlanIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SeatingPlan upsert
   */
  export type SeatingPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatingPlan
     */
    select?: SeatingPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SeatingPlan
     */
    omit?: SeatingPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatingPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the SeatingPlan to update in case it exists.
     */
    where: SeatingPlanWhereUniqueInput
    /**
     * In case the SeatingPlan found by the `where` argument doesn't exist, create a new SeatingPlan with this data.
     */
    create: XOR<SeatingPlanCreateInput, SeatingPlanUncheckedCreateInput>
    /**
     * In case the SeatingPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeatingPlanUpdateInput, SeatingPlanUncheckedUpdateInput>
  }

  /**
   * SeatingPlan delete
   */
  export type SeatingPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatingPlan
     */
    select?: SeatingPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SeatingPlan
     */
    omit?: SeatingPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatingPlanInclude<ExtArgs> | null
    /**
     * Filter which SeatingPlan to delete.
     */
    where: SeatingPlanWhereUniqueInput
  }

  /**
   * SeatingPlan deleteMany
   */
  export type SeatingPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeatingPlans to delete
     */
    where?: SeatingPlanWhereInput
    /**
     * Limit how many SeatingPlans to delete.
     */
    limit?: number
  }

  /**
   * SeatingPlan.seats
   */
  export type SeatingPlan$seatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seat
     */
    select?: SeatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Seat
     */
    omit?: SeatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatInclude<ExtArgs> | null
    where?: SeatWhereInput
    orderBy?: SeatOrderByWithRelationInput | SeatOrderByWithRelationInput[]
    cursor?: SeatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeatScalarFieldEnum | SeatScalarFieldEnum[]
  }

  /**
   * SeatingPlan without action
   */
  export type SeatingPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatingPlan
     */
    select?: SeatingPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SeatingPlan
     */
    omit?: SeatingPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatingPlanInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const InvigilatorScalarFieldEnum: {
    id: 'id',
    course: 'course',
    phone: 'phone',
    address: 'address',
    gender: 'gender',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type InvigilatorScalarFieldEnum = (typeof InvigilatorScalarFieldEnum)[keyof typeof InvigilatorScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    duration: 'duration'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const SemesterScalarFieldEnum: {
    id: 'id',
    semesterNum: 'semesterNum',
    courseId: 'courseId'
  };

  export type SemesterScalarFieldEnum = (typeof SemesterScalarFieldEnum)[keyof typeof SemesterScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    semesterId: 'semesterId'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    symbolNumber: 'symbolNumber',
    regNumber: 'regNumber',
    college: 'college',
    courseId: 'courseId',
    semesterId: 'semesterId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const ExamScalarFieldEnum: {
    id: 'id',
    date: 'date',
    startTime: 'startTime',
    endTime: 'endTime',
    subjectId: 'subjectId'
  };

  export type ExamScalarFieldEnum = (typeof ExamScalarFieldEnum)[keyof typeof ExamScalarFieldEnum]


  export const RoomScalarFieldEnum: {
    id: 'id',
    roomNumber: 'roomNumber',
    block: 'block',
    floor: 'floor',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


  export const BenchScalarFieldEnum: {
    id: 'id',
    roomId: 'roomId',
    benchNo: 'benchNo',
    capacity: 'capacity',
    createdAt: 'createdAt'
  };

  export type BenchScalarFieldEnum = (typeof BenchScalarFieldEnum)[keyof typeof BenchScalarFieldEnum]


  export const SeatScalarFieldEnum: {
    id: 'id',
    benchId: 'benchId',
    position: 'position',
    studentId: 'studentId',
    seatingPlanId: 'seatingPlanId'
  };

  export type SeatScalarFieldEnum = (typeof SeatScalarFieldEnum)[keyof typeof SeatScalarFieldEnum]


  export const RoomAssignmentScalarFieldEnum: {
    id: 'id',
    roomId: 'roomId',
    examId: 'examId',
    isActive: 'isActive',
    isCompleted: 'isCompleted',
    completedAt: 'completedAt'
  };

  export type RoomAssignmentScalarFieldEnum = (typeof RoomAssignmentScalarFieldEnum)[keyof typeof RoomAssignmentScalarFieldEnum]


  export const InvigilatorAssignmentScalarFieldEnum: {
    id: 'id',
    invigilatorId: 'invigilatorId',
    roomAssignmentId: 'roomAssignmentId',
    status: 'status',
    assignedAt: 'assignedAt',
    completedAt: 'completedAt'
  };

  export type InvigilatorAssignmentScalarFieldEnum = (typeof InvigilatorAssignmentScalarFieldEnum)[keyof typeof InvigilatorAssignmentScalarFieldEnum]


  export const SeatingPlanScalarFieldEnum: {
    id: 'id',
    examId: 'examId',
    createdAt: 'createdAt',
    isActive: 'isActive'
  };

  export type SeatingPlanScalarFieldEnum = (typeof SeatingPlanScalarFieldEnum)[keyof typeof SeatingPlanScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    invigilator?: XOR<InvigilatorNullableScalarRelationFilter, InvigilatorWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    invigilator?: InvigilatorOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    invigilator?: XOR<InvigilatorNullableScalarRelationFilter, InvigilatorWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type InvigilatorWhereInput = {
    AND?: InvigilatorWhereInput | InvigilatorWhereInput[]
    OR?: InvigilatorWhereInput[]
    NOT?: InvigilatorWhereInput | InvigilatorWhereInput[]
    id?: IntFilter<"Invigilator"> | number
    course?: StringFilter<"Invigilator"> | string
    phone?: StringFilter<"Invigilator"> | string
    address?: StringFilter<"Invigilator"> | string
    gender?: StringFilter<"Invigilator"> | string
    createdAt?: DateTimeFilter<"Invigilator"> | Date | string
    updatedAt?: DateTimeFilter<"Invigilator"> | Date | string
    userId?: IntFilter<"Invigilator"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    invigilatorAssignments?: InvigilatorAssignmentListRelationFilter
  }

  export type InvigilatorOrderByWithRelationInput = {
    id?: SortOrder
    course?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    gender?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    invigilatorAssignments?: InvigilatorAssignmentOrderByRelationAggregateInput
  }

  export type InvigilatorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: InvigilatorWhereInput | InvigilatorWhereInput[]
    OR?: InvigilatorWhereInput[]
    NOT?: InvigilatorWhereInput | InvigilatorWhereInput[]
    course?: StringFilter<"Invigilator"> | string
    phone?: StringFilter<"Invigilator"> | string
    address?: StringFilter<"Invigilator"> | string
    gender?: StringFilter<"Invigilator"> | string
    createdAt?: DateTimeFilter<"Invigilator"> | Date | string
    updatedAt?: DateTimeFilter<"Invigilator"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    invigilatorAssignments?: InvigilatorAssignmentListRelationFilter
  }, "id" | "userId">

  export type InvigilatorOrderByWithAggregationInput = {
    id?: SortOrder
    course?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    gender?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: InvigilatorCountOrderByAggregateInput
    _avg?: InvigilatorAvgOrderByAggregateInput
    _max?: InvigilatorMaxOrderByAggregateInput
    _min?: InvigilatorMinOrderByAggregateInput
    _sum?: InvigilatorSumOrderByAggregateInput
  }

  export type InvigilatorScalarWhereWithAggregatesInput = {
    AND?: InvigilatorScalarWhereWithAggregatesInput | InvigilatorScalarWhereWithAggregatesInput[]
    OR?: InvigilatorScalarWhereWithAggregatesInput[]
    NOT?: InvigilatorScalarWhereWithAggregatesInput | InvigilatorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Invigilator"> | number
    course?: StringWithAggregatesFilter<"Invigilator"> | string
    phone?: StringWithAggregatesFilter<"Invigilator"> | string
    address?: StringWithAggregatesFilter<"Invigilator"> | string
    gender?: StringWithAggregatesFilter<"Invigilator"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Invigilator"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Invigilator"> | Date | string
    userId?: IntWithAggregatesFilter<"Invigilator"> | number
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: IntFilter<"Course"> | number
    name?: StringFilter<"Course"> | string
    duration?: IntFilter<"Course"> | number
    semesters?: SemesterListRelationFilter
    students?: StudentListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    duration?: SortOrder
    semesters?: SemesterOrderByRelationAggregateInput
    students?: StudentOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    duration?: IntFilter<"Course"> | number
    semesters?: SemesterListRelationFilter
    students?: StudentListRelationFilter
  }, "id" | "name">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    duration?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Course"> | number
    name?: StringWithAggregatesFilter<"Course"> | string
    duration?: IntWithAggregatesFilter<"Course"> | number
  }

  export type SemesterWhereInput = {
    AND?: SemesterWhereInput | SemesterWhereInput[]
    OR?: SemesterWhereInput[]
    NOT?: SemesterWhereInput | SemesterWhereInput[]
    id?: IntFilter<"Semester"> | number
    semesterNum?: IntFilter<"Semester"> | number
    courseId?: IntFilter<"Semester"> | number
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    subjects?: SubjectListRelationFilter
    students?: StudentListRelationFilter
  }

  export type SemesterOrderByWithRelationInput = {
    id?: SortOrder
    semesterNum?: SortOrder
    courseId?: SortOrder
    course?: CourseOrderByWithRelationInput
    subjects?: SubjectOrderByRelationAggregateInput
    students?: StudentOrderByRelationAggregateInput
  }

  export type SemesterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SemesterWhereInput | SemesterWhereInput[]
    OR?: SemesterWhereInput[]
    NOT?: SemesterWhereInput | SemesterWhereInput[]
    semesterNum?: IntFilter<"Semester"> | number
    courseId?: IntFilter<"Semester"> | number
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    subjects?: SubjectListRelationFilter
    students?: StudentListRelationFilter
  }, "id">

  export type SemesterOrderByWithAggregationInput = {
    id?: SortOrder
    semesterNum?: SortOrder
    courseId?: SortOrder
    _count?: SemesterCountOrderByAggregateInput
    _avg?: SemesterAvgOrderByAggregateInput
    _max?: SemesterMaxOrderByAggregateInput
    _min?: SemesterMinOrderByAggregateInput
    _sum?: SemesterSumOrderByAggregateInput
  }

  export type SemesterScalarWhereWithAggregatesInput = {
    AND?: SemesterScalarWhereWithAggregatesInput | SemesterScalarWhereWithAggregatesInput[]
    OR?: SemesterScalarWhereWithAggregatesInput[]
    NOT?: SemesterScalarWhereWithAggregatesInput | SemesterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Semester"> | number
    semesterNum?: IntWithAggregatesFilter<"Semester"> | number
    courseId?: IntWithAggregatesFilter<"Semester"> | number
  }

  export type SubjectWhereInput = {
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    id?: IntFilter<"Subject"> | number
    name?: StringFilter<"Subject"> | string
    code?: StringFilter<"Subject"> | string
    semesterId?: IntFilter<"Subject"> | number
    semester?: XOR<SemesterScalarRelationFilter, SemesterWhereInput>
    exams?: ExamListRelationFilter
  }

  export type SubjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    semesterId?: SortOrder
    semester?: SemesterOrderByWithRelationInput
    exams?: ExamOrderByRelationAggregateInput
  }

  export type SubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    name?: StringFilter<"Subject"> | string
    semesterId?: IntFilter<"Subject"> | number
    semester?: XOR<SemesterScalarRelationFilter, SemesterWhereInput>
    exams?: ExamListRelationFilter
  }, "id" | "code">

  export type SubjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    semesterId?: SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _avg?: SubjectAvgOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
    _sum?: SubjectSumOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    OR?: SubjectScalarWhereWithAggregatesInput[]
    NOT?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subject"> | number
    name?: StringWithAggregatesFilter<"Subject"> | string
    code?: StringWithAggregatesFilter<"Subject"> | string
    semesterId?: IntWithAggregatesFilter<"Subject"> | number
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: IntFilter<"Student"> | number
    name?: StringFilter<"Student"> | string
    symbolNumber?: StringFilter<"Student"> | string
    regNumber?: StringFilter<"Student"> | string
    college?: StringFilter<"Student"> | string
    courseId?: IntFilter<"Student"> | number
    semesterId?: IntFilter<"Student"> | number
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    semester?: XOR<SemesterScalarRelationFilter, SemesterWhereInput>
    seat?: XOR<SeatNullableScalarRelationFilter, SeatWhereInput> | null
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    symbolNumber?: SortOrder
    regNumber?: SortOrder
    college?: SortOrder
    courseId?: SortOrder
    semesterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    course?: CourseOrderByWithRelationInput
    semester?: SemesterOrderByWithRelationInput
    seat?: SeatOrderByWithRelationInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    symbolNumber_college?: StudentSymbolNumberCollegeCompoundUniqueInput
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    name?: StringFilter<"Student"> | string
    symbolNumber?: StringFilter<"Student"> | string
    regNumber?: StringFilter<"Student"> | string
    college?: StringFilter<"Student"> | string
    courseId?: IntFilter<"Student"> | number
    semesterId?: IntFilter<"Student"> | number
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    semester?: XOR<SemesterScalarRelationFilter, SemesterWhereInput>
    seat?: XOR<SeatNullableScalarRelationFilter, SeatWhereInput> | null
  }, "id" | "symbolNumber_college">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    symbolNumber?: SortOrder
    regNumber?: SortOrder
    college?: SortOrder
    courseId?: SortOrder
    semesterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Student"> | number
    name?: StringWithAggregatesFilter<"Student"> | string
    symbolNumber?: StringWithAggregatesFilter<"Student"> | string
    regNumber?: StringWithAggregatesFilter<"Student"> | string
    college?: StringWithAggregatesFilter<"Student"> | string
    courseId?: IntWithAggregatesFilter<"Student"> | number
    semesterId?: IntWithAggregatesFilter<"Student"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
  }

  export type ExamWhereInput = {
    AND?: ExamWhereInput | ExamWhereInput[]
    OR?: ExamWhereInput[]
    NOT?: ExamWhereInput | ExamWhereInput[]
    id?: IntFilter<"Exam"> | number
    date?: DateTimeFilter<"Exam"> | Date | string
    startTime?: StringNullableFilter<"Exam"> | string | null
    endTime?: StringNullableFilter<"Exam"> | string | null
    subjectId?: IntFilter<"Exam"> | number
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    roomAssignments?: RoomAssignmentListRelationFilter
    seatingPlans?: SeatingPlanListRelationFilter
  }

  export type ExamOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    subjectId?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    roomAssignments?: RoomAssignmentOrderByRelationAggregateInput
    seatingPlans?: SeatingPlanOrderByRelationAggregateInput
  }

  export type ExamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExamWhereInput | ExamWhereInput[]
    OR?: ExamWhereInput[]
    NOT?: ExamWhereInput | ExamWhereInput[]
    date?: DateTimeFilter<"Exam"> | Date | string
    startTime?: StringNullableFilter<"Exam"> | string | null
    endTime?: StringNullableFilter<"Exam"> | string | null
    subjectId?: IntFilter<"Exam"> | number
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    roomAssignments?: RoomAssignmentListRelationFilter
    seatingPlans?: SeatingPlanListRelationFilter
  }, "id">

  export type ExamOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    subjectId?: SortOrder
    _count?: ExamCountOrderByAggregateInput
    _avg?: ExamAvgOrderByAggregateInput
    _max?: ExamMaxOrderByAggregateInput
    _min?: ExamMinOrderByAggregateInput
    _sum?: ExamSumOrderByAggregateInput
  }

  export type ExamScalarWhereWithAggregatesInput = {
    AND?: ExamScalarWhereWithAggregatesInput | ExamScalarWhereWithAggregatesInput[]
    OR?: ExamScalarWhereWithAggregatesInput[]
    NOT?: ExamScalarWhereWithAggregatesInput | ExamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Exam"> | number
    date?: DateTimeWithAggregatesFilter<"Exam"> | Date | string
    startTime?: StringNullableWithAggregatesFilter<"Exam"> | string | null
    endTime?: StringNullableWithAggregatesFilter<"Exam"> | string | null
    subjectId?: IntWithAggregatesFilter<"Exam"> | number
  }

  export type RoomWhereInput = {
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    id?: IntFilter<"Room"> | number
    roomNumber?: StringFilter<"Room"> | string
    block?: StringNullableFilter<"Room"> | string | null
    floor?: StringNullableFilter<"Room"> | string | null
    createdAt?: DateTimeFilter<"Room"> | Date | string
    updatedAt?: DateTimeFilter<"Room"> | Date | string
    benches?: BenchListRelationFilter
    roomAssignments?: RoomAssignmentListRelationFilter
  }

  export type RoomOrderByWithRelationInput = {
    id?: SortOrder
    roomNumber?: SortOrder
    block?: SortOrderInput | SortOrder
    floor?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    benches?: BenchOrderByRelationAggregateInput
    roomAssignments?: RoomAssignmentOrderByRelationAggregateInput
  }

  export type RoomWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    roomNumber?: string
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    block?: StringNullableFilter<"Room"> | string | null
    floor?: StringNullableFilter<"Room"> | string | null
    createdAt?: DateTimeFilter<"Room"> | Date | string
    updatedAt?: DateTimeFilter<"Room"> | Date | string
    benches?: BenchListRelationFilter
    roomAssignments?: RoomAssignmentListRelationFilter
  }, "id" | "roomNumber">

  export type RoomOrderByWithAggregationInput = {
    id?: SortOrder
    roomNumber?: SortOrder
    block?: SortOrderInput | SortOrder
    floor?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoomCountOrderByAggregateInput
    _avg?: RoomAvgOrderByAggregateInput
    _max?: RoomMaxOrderByAggregateInput
    _min?: RoomMinOrderByAggregateInput
    _sum?: RoomSumOrderByAggregateInput
  }

  export type RoomScalarWhereWithAggregatesInput = {
    AND?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    OR?: RoomScalarWhereWithAggregatesInput[]
    NOT?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Room"> | number
    roomNumber?: StringWithAggregatesFilter<"Room"> | string
    block?: StringNullableWithAggregatesFilter<"Room"> | string | null
    floor?: StringNullableWithAggregatesFilter<"Room"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Room"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Room"> | Date | string
  }

  export type BenchWhereInput = {
    AND?: BenchWhereInput | BenchWhereInput[]
    OR?: BenchWhereInput[]
    NOT?: BenchWhereInput | BenchWhereInput[]
    id?: IntFilter<"Bench"> | number
    roomId?: IntFilter<"Bench"> | number
    benchNo?: IntFilter<"Bench"> | number
    capacity?: IntFilter<"Bench"> | number
    createdAt?: DateTimeFilter<"Bench"> | Date | string
    room?: XOR<RoomScalarRelationFilter, RoomWhereInput>
    seats?: SeatListRelationFilter
  }

  export type BenchOrderByWithRelationInput = {
    id?: SortOrder
    roomId?: SortOrder
    benchNo?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    room?: RoomOrderByWithRelationInput
    seats?: SeatOrderByRelationAggregateInput
  }

  export type BenchWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BenchWhereInput | BenchWhereInput[]
    OR?: BenchWhereInput[]
    NOT?: BenchWhereInput | BenchWhereInput[]
    roomId?: IntFilter<"Bench"> | number
    benchNo?: IntFilter<"Bench"> | number
    capacity?: IntFilter<"Bench"> | number
    createdAt?: DateTimeFilter<"Bench"> | Date | string
    room?: XOR<RoomScalarRelationFilter, RoomWhereInput>
    seats?: SeatListRelationFilter
  }, "id">

  export type BenchOrderByWithAggregationInput = {
    id?: SortOrder
    roomId?: SortOrder
    benchNo?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    _count?: BenchCountOrderByAggregateInput
    _avg?: BenchAvgOrderByAggregateInput
    _max?: BenchMaxOrderByAggregateInput
    _min?: BenchMinOrderByAggregateInput
    _sum?: BenchSumOrderByAggregateInput
  }

  export type BenchScalarWhereWithAggregatesInput = {
    AND?: BenchScalarWhereWithAggregatesInput | BenchScalarWhereWithAggregatesInput[]
    OR?: BenchScalarWhereWithAggregatesInput[]
    NOT?: BenchScalarWhereWithAggregatesInput | BenchScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Bench"> | number
    roomId?: IntWithAggregatesFilter<"Bench"> | number
    benchNo?: IntWithAggregatesFilter<"Bench"> | number
    capacity?: IntWithAggregatesFilter<"Bench"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Bench"> | Date | string
  }

  export type SeatWhereInput = {
    AND?: SeatWhereInput | SeatWhereInput[]
    OR?: SeatWhereInput[]
    NOT?: SeatWhereInput | SeatWhereInput[]
    id?: IntFilter<"Seat"> | number
    benchId?: IntFilter<"Seat"> | number
    position?: IntFilter<"Seat"> | number
    studentId?: IntFilter<"Seat"> | number
    seatingPlanId?: IntNullableFilter<"Seat"> | number | null
    bench?: XOR<BenchScalarRelationFilter, BenchWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    seatingPlan?: XOR<SeatingPlanNullableScalarRelationFilter, SeatingPlanWhereInput> | null
  }

  export type SeatOrderByWithRelationInput = {
    id?: SortOrder
    benchId?: SortOrder
    position?: SortOrder
    studentId?: SortOrder
    seatingPlanId?: SortOrderInput | SortOrder
    bench?: BenchOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
    seatingPlan?: SeatingPlanOrderByWithRelationInput
  }

  export type SeatWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentId?: number
    AND?: SeatWhereInput | SeatWhereInput[]
    OR?: SeatWhereInput[]
    NOT?: SeatWhereInput | SeatWhereInput[]
    benchId?: IntFilter<"Seat"> | number
    position?: IntFilter<"Seat"> | number
    seatingPlanId?: IntNullableFilter<"Seat"> | number | null
    bench?: XOR<BenchScalarRelationFilter, BenchWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    seatingPlan?: XOR<SeatingPlanNullableScalarRelationFilter, SeatingPlanWhereInput> | null
  }, "id" | "studentId">

  export type SeatOrderByWithAggregationInput = {
    id?: SortOrder
    benchId?: SortOrder
    position?: SortOrder
    studentId?: SortOrder
    seatingPlanId?: SortOrderInput | SortOrder
    _count?: SeatCountOrderByAggregateInput
    _avg?: SeatAvgOrderByAggregateInput
    _max?: SeatMaxOrderByAggregateInput
    _min?: SeatMinOrderByAggregateInput
    _sum?: SeatSumOrderByAggregateInput
  }

  export type SeatScalarWhereWithAggregatesInput = {
    AND?: SeatScalarWhereWithAggregatesInput | SeatScalarWhereWithAggregatesInput[]
    OR?: SeatScalarWhereWithAggregatesInput[]
    NOT?: SeatScalarWhereWithAggregatesInput | SeatScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Seat"> | number
    benchId?: IntWithAggregatesFilter<"Seat"> | number
    position?: IntWithAggregatesFilter<"Seat"> | number
    studentId?: IntWithAggregatesFilter<"Seat"> | number
    seatingPlanId?: IntNullableWithAggregatesFilter<"Seat"> | number | null
  }

  export type RoomAssignmentWhereInput = {
    AND?: RoomAssignmentWhereInput | RoomAssignmentWhereInput[]
    OR?: RoomAssignmentWhereInput[]
    NOT?: RoomAssignmentWhereInput | RoomAssignmentWhereInput[]
    id?: IntFilter<"RoomAssignment"> | number
    roomId?: IntFilter<"RoomAssignment"> | number
    examId?: IntFilter<"RoomAssignment"> | number
    isActive?: BoolFilter<"RoomAssignment"> | boolean
    isCompleted?: BoolFilter<"RoomAssignment"> | boolean
    completedAt?: DateTimeNullableFilter<"RoomAssignment"> | Date | string | null
    room?: XOR<RoomScalarRelationFilter, RoomWhereInput>
    exam?: XOR<ExamScalarRelationFilter, ExamWhereInput>
    invigilatorAssignments?: InvigilatorAssignmentListRelationFilter
  }

  export type RoomAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    roomId?: SortOrder
    examId?: SortOrder
    isActive?: SortOrder
    isCompleted?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    room?: RoomOrderByWithRelationInput
    exam?: ExamOrderByWithRelationInput
    invigilatorAssignments?: InvigilatorAssignmentOrderByRelationAggregateInput
  }

  export type RoomAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoomAssignmentWhereInput | RoomAssignmentWhereInput[]
    OR?: RoomAssignmentWhereInput[]
    NOT?: RoomAssignmentWhereInput | RoomAssignmentWhereInput[]
    roomId?: IntFilter<"RoomAssignment"> | number
    examId?: IntFilter<"RoomAssignment"> | number
    isActive?: BoolFilter<"RoomAssignment"> | boolean
    isCompleted?: BoolFilter<"RoomAssignment"> | boolean
    completedAt?: DateTimeNullableFilter<"RoomAssignment"> | Date | string | null
    room?: XOR<RoomScalarRelationFilter, RoomWhereInput>
    exam?: XOR<ExamScalarRelationFilter, ExamWhereInput>
    invigilatorAssignments?: InvigilatorAssignmentListRelationFilter
  }, "id">

  export type RoomAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    roomId?: SortOrder
    examId?: SortOrder
    isActive?: SortOrder
    isCompleted?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: RoomAssignmentCountOrderByAggregateInput
    _avg?: RoomAssignmentAvgOrderByAggregateInput
    _max?: RoomAssignmentMaxOrderByAggregateInput
    _min?: RoomAssignmentMinOrderByAggregateInput
    _sum?: RoomAssignmentSumOrderByAggregateInput
  }

  export type RoomAssignmentScalarWhereWithAggregatesInput = {
    AND?: RoomAssignmentScalarWhereWithAggregatesInput | RoomAssignmentScalarWhereWithAggregatesInput[]
    OR?: RoomAssignmentScalarWhereWithAggregatesInput[]
    NOT?: RoomAssignmentScalarWhereWithAggregatesInput | RoomAssignmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RoomAssignment"> | number
    roomId?: IntWithAggregatesFilter<"RoomAssignment"> | number
    examId?: IntWithAggregatesFilter<"RoomAssignment"> | number
    isActive?: BoolWithAggregatesFilter<"RoomAssignment"> | boolean
    isCompleted?: BoolWithAggregatesFilter<"RoomAssignment"> | boolean
    completedAt?: DateTimeNullableWithAggregatesFilter<"RoomAssignment"> | Date | string | null
  }

  export type InvigilatorAssignmentWhereInput = {
    AND?: InvigilatorAssignmentWhereInput | InvigilatorAssignmentWhereInput[]
    OR?: InvigilatorAssignmentWhereInput[]
    NOT?: InvigilatorAssignmentWhereInput | InvigilatorAssignmentWhereInput[]
    id?: IntFilter<"InvigilatorAssignment"> | number
    invigilatorId?: IntFilter<"InvigilatorAssignment"> | number
    roomAssignmentId?: IntFilter<"InvigilatorAssignment"> | number
    status?: StringFilter<"InvigilatorAssignment"> | string
    assignedAt?: DateTimeFilter<"InvigilatorAssignment"> | Date | string
    completedAt?: DateTimeNullableFilter<"InvigilatorAssignment"> | Date | string | null
    invigilator?: XOR<InvigilatorScalarRelationFilter, InvigilatorWhereInput>
    roomAssignment?: XOR<RoomAssignmentScalarRelationFilter, RoomAssignmentWhereInput>
  }

  export type InvigilatorAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    invigilatorId?: SortOrder
    roomAssignmentId?: SortOrder
    status?: SortOrder
    assignedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    invigilator?: InvigilatorOrderByWithRelationInput
    roomAssignment?: RoomAssignmentOrderByWithRelationInput
  }

  export type InvigilatorAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InvigilatorAssignmentWhereInput | InvigilatorAssignmentWhereInput[]
    OR?: InvigilatorAssignmentWhereInput[]
    NOT?: InvigilatorAssignmentWhereInput | InvigilatorAssignmentWhereInput[]
    invigilatorId?: IntFilter<"InvigilatorAssignment"> | number
    roomAssignmentId?: IntFilter<"InvigilatorAssignment"> | number
    status?: StringFilter<"InvigilatorAssignment"> | string
    assignedAt?: DateTimeFilter<"InvigilatorAssignment"> | Date | string
    completedAt?: DateTimeNullableFilter<"InvigilatorAssignment"> | Date | string | null
    invigilator?: XOR<InvigilatorScalarRelationFilter, InvigilatorWhereInput>
    roomAssignment?: XOR<RoomAssignmentScalarRelationFilter, RoomAssignmentWhereInput>
  }, "id">

  export type InvigilatorAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    invigilatorId?: SortOrder
    roomAssignmentId?: SortOrder
    status?: SortOrder
    assignedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: InvigilatorAssignmentCountOrderByAggregateInput
    _avg?: InvigilatorAssignmentAvgOrderByAggregateInput
    _max?: InvigilatorAssignmentMaxOrderByAggregateInput
    _min?: InvigilatorAssignmentMinOrderByAggregateInput
    _sum?: InvigilatorAssignmentSumOrderByAggregateInput
  }

  export type InvigilatorAssignmentScalarWhereWithAggregatesInput = {
    AND?: InvigilatorAssignmentScalarWhereWithAggregatesInput | InvigilatorAssignmentScalarWhereWithAggregatesInput[]
    OR?: InvigilatorAssignmentScalarWhereWithAggregatesInput[]
    NOT?: InvigilatorAssignmentScalarWhereWithAggregatesInput | InvigilatorAssignmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InvigilatorAssignment"> | number
    invigilatorId?: IntWithAggregatesFilter<"InvigilatorAssignment"> | number
    roomAssignmentId?: IntWithAggregatesFilter<"InvigilatorAssignment"> | number
    status?: StringWithAggregatesFilter<"InvigilatorAssignment"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"InvigilatorAssignment"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"InvigilatorAssignment"> | Date | string | null
  }

  export type SeatingPlanWhereInput = {
    AND?: SeatingPlanWhereInput | SeatingPlanWhereInput[]
    OR?: SeatingPlanWhereInput[]
    NOT?: SeatingPlanWhereInput | SeatingPlanWhereInput[]
    id?: IntFilter<"SeatingPlan"> | number
    examId?: IntFilter<"SeatingPlan"> | number
    createdAt?: DateTimeFilter<"SeatingPlan"> | Date | string
    isActive?: BoolFilter<"SeatingPlan"> | boolean
    exam?: XOR<ExamScalarRelationFilter, ExamWhereInput>
    seats?: SeatListRelationFilter
  }

  export type SeatingPlanOrderByWithRelationInput = {
    id?: SortOrder
    examId?: SortOrder
    createdAt?: SortOrder
    isActive?: SortOrder
    exam?: ExamOrderByWithRelationInput
    seats?: SeatOrderByRelationAggregateInput
  }

  export type SeatingPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SeatingPlanWhereInput | SeatingPlanWhereInput[]
    OR?: SeatingPlanWhereInput[]
    NOT?: SeatingPlanWhereInput | SeatingPlanWhereInput[]
    examId?: IntFilter<"SeatingPlan"> | number
    createdAt?: DateTimeFilter<"SeatingPlan"> | Date | string
    isActive?: BoolFilter<"SeatingPlan"> | boolean
    exam?: XOR<ExamScalarRelationFilter, ExamWhereInput>
    seats?: SeatListRelationFilter
  }, "id">

  export type SeatingPlanOrderByWithAggregationInput = {
    id?: SortOrder
    examId?: SortOrder
    createdAt?: SortOrder
    isActive?: SortOrder
    _count?: SeatingPlanCountOrderByAggregateInput
    _avg?: SeatingPlanAvgOrderByAggregateInput
    _max?: SeatingPlanMaxOrderByAggregateInput
    _min?: SeatingPlanMinOrderByAggregateInput
    _sum?: SeatingPlanSumOrderByAggregateInput
  }

  export type SeatingPlanScalarWhereWithAggregatesInput = {
    AND?: SeatingPlanScalarWhereWithAggregatesInput | SeatingPlanScalarWhereWithAggregatesInput[]
    OR?: SeatingPlanScalarWhereWithAggregatesInput[]
    NOT?: SeatingPlanScalarWhereWithAggregatesInput | SeatingPlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SeatingPlan"> | number
    examId?: IntWithAggregatesFilter<"SeatingPlan"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SeatingPlan"> | Date | string
    isActive?: BoolWithAggregatesFilter<"SeatingPlan"> | boolean
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    invigilator?: InvigilatorCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    invigilator?: InvigilatorUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invigilator?: InvigilatorUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invigilator?: InvigilatorUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvigilatorCreateInput = {
    course: string
    phone: string
    address: string
    gender: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutInvigilatorInput
    invigilatorAssignments?: InvigilatorAssignmentCreateNestedManyWithoutInvigilatorInput
  }

  export type InvigilatorUncheckedCreateInput = {
    id?: number
    course: string
    phone: string
    address: string
    gender: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    invigilatorAssignments?: InvigilatorAssignmentUncheckedCreateNestedManyWithoutInvigilatorInput
  }

  export type InvigilatorUpdateInput = {
    course?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInvigilatorNestedInput
    invigilatorAssignments?: InvigilatorAssignmentUpdateManyWithoutInvigilatorNestedInput
  }

  export type InvigilatorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    course?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    invigilatorAssignments?: InvigilatorAssignmentUncheckedUpdateManyWithoutInvigilatorNestedInput
  }

  export type InvigilatorCreateManyInput = {
    id?: number
    course: string
    phone: string
    address: string
    gender: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type InvigilatorUpdateManyMutationInput = {
    course?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvigilatorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    course?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CourseCreateInput = {
    name: string
    duration: number
    semesters?: SemesterCreateNestedManyWithoutCourseInput
    students?: StudentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: number
    name: string
    duration: number
    semesters?: SemesterUncheckedCreateNestedManyWithoutCourseInput
    students?: StudentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    semesters?: SemesterUpdateManyWithoutCourseNestedInput
    students?: StudentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    semesters?: SemesterUncheckedUpdateManyWithoutCourseNestedInput
    students?: StudentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    id?: number
    name: string
    duration: number
  }

  export type CourseUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
  }

  export type SemesterCreateInput = {
    semesterNum: number
    course: CourseCreateNestedOneWithoutSemestersInput
    subjects?: SubjectCreateNestedManyWithoutSemesterInput
    students?: StudentCreateNestedManyWithoutSemesterInput
  }

  export type SemesterUncheckedCreateInput = {
    id?: number
    semesterNum: number
    courseId: number
    subjects?: SubjectUncheckedCreateNestedManyWithoutSemesterInput
    students?: StudentUncheckedCreateNestedManyWithoutSemesterInput
  }

  export type SemesterUpdateInput = {
    semesterNum?: IntFieldUpdateOperationsInput | number
    course?: CourseUpdateOneRequiredWithoutSemestersNestedInput
    subjects?: SubjectUpdateManyWithoutSemesterNestedInput
    students?: StudentUpdateManyWithoutSemesterNestedInput
  }

  export type SemesterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    semesterNum?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    subjects?: SubjectUncheckedUpdateManyWithoutSemesterNestedInput
    students?: StudentUncheckedUpdateManyWithoutSemesterNestedInput
  }

  export type SemesterCreateManyInput = {
    id?: number
    semesterNum: number
    courseId: number
  }

  export type SemesterUpdateManyMutationInput = {
    semesterNum?: IntFieldUpdateOperationsInput | number
  }

  export type SemesterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    semesterNum?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type SubjectCreateInput = {
    name: string
    code: string
    semester: SemesterCreateNestedOneWithoutSubjectsInput
    exams?: ExamCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    id?: number
    name: string
    code: string
    semesterId: number
    exams?: ExamUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    semester?: SemesterUpdateOneRequiredWithoutSubjectsNestedInput
    exams?: ExamUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    semesterId?: IntFieldUpdateOperationsInput | number
    exams?: ExamUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectCreateManyInput = {
    id?: number
    name: string
    code: string
    semesterId: number
  }

  export type SubjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    semesterId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateInput = {
    name: string
    symbolNumber: string
    regNumber: string
    college: string
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutStudentsInput
    semester: SemesterCreateNestedOneWithoutStudentsInput
    seat?: SeatCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    id?: number
    name: string
    symbolNumber: string
    regNumber: string
    college: string
    courseId: number
    semesterId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    seat?: SeatUncheckedCreateNestedOneWithoutStudentInput
  }

  export type StudentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    symbolNumber?: StringFieldUpdateOperationsInput | string
    regNumber?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutStudentsNestedInput
    semester?: SemesterUpdateOneRequiredWithoutStudentsNestedInput
    seat?: SeatUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    symbolNumber?: StringFieldUpdateOperationsInput | string
    regNumber?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    courseId?: IntFieldUpdateOperationsInput | number
    semesterId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seat?: SeatUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    id?: number
    name: string
    symbolNumber: string
    regNumber: string
    college: string
    courseId: number
    semesterId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    symbolNumber?: StringFieldUpdateOperationsInput | string
    regNumber?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    symbolNumber?: StringFieldUpdateOperationsInput | string
    regNumber?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    courseId?: IntFieldUpdateOperationsInput | number
    semesterId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamCreateInput = {
    date: Date | string
    startTime?: string | null
    endTime?: string | null
    subject: SubjectCreateNestedOneWithoutExamsInput
    roomAssignments?: RoomAssignmentCreateNestedManyWithoutExamInput
    seatingPlans?: SeatingPlanCreateNestedManyWithoutExamInput
  }

  export type ExamUncheckedCreateInput = {
    id?: number
    date: Date | string
    startTime?: string | null
    endTime?: string | null
    subjectId: number
    roomAssignments?: RoomAssignmentUncheckedCreateNestedManyWithoutExamInput
    seatingPlans?: SeatingPlanUncheckedCreateNestedManyWithoutExamInput
  }

  export type ExamUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: SubjectUpdateOneRequiredWithoutExamsNestedInput
    roomAssignments?: RoomAssignmentUpdateManyWithoutExamNestedInput
    seatingPlans?: SeatingPlanUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: IntFieldUpdateOperationsInput | number
    roomAssignments?: RoomAssignmentUncheckedUpdateManyWithoutExamNestedInput
    seatingPlans?: SeatingPlanUncheckedUpdateManyWithoutExamNestedInput
  }

  export type ExamCreateManyInput = {
    id?: number
    date: Date | string
    startTime?: string | null
    endTime?: string | null
    subjectId: number
  }

  export type ExamUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type RoomCreateInput = {
    roomNumber: string
    block?: string | null
    floor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    benches?: BenchCreateNestedManyWithoutRoomInput
    roomAssignments?: RoomAssignmentCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateInput = {
    id?: number
    roomNumber: string
    block?: string | null
    floor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    benches?: BenchUncheckedCreateNestedManyWithoutRoomInput
    roomAssignments?: RoomAssignmentUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomUpdateInput = {
    roomNumber?: StringFieldUpdateOperationsInput | string
    block?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    benches?: BenchUpdateManyWithoutRoomNestedInput
    roomAssignments?: RoomAssignmentUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomNumber?: StringFieldUpdateOperationsInput | string
    block?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    benches?: BenchUncheckedUpdateManyWithoutRoomNestedInput
    roomAssignments?: RoomAssignmentUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomCreateManyInput = {
    id?: number
    roomNumber: string
    block?: string | null
    floor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomUpdateManyMutationInput = {
    roomNumber?: StringFieldUpdateOperationsInput | string
    block?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomNumber?: StringFieldUpdateOperationsInput | string
    block?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BenchCreateInput = {
    benchNo: number
    capacity: number
    createdAt?: Date | string
    room: RoomCreateNestedOneWithoutBenchesInput
    seats?: SeatCreateNestedManyWithoutBenchInput
  }

  export type BenchUncheckedCreateInput = {
    id?: number
    roomId: number
    benchNo: number
    capacity: number
    createdAt?: Date | string
    seats?: SeatUncheckedCreateNestedManyWithoutBenchInput
  }

  export type BenchUpdateInput = {
    benchNo?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: RoomUpdateOneRequiredWithoutBenchesNestedInput
    seats?: SeatUpdateManyWithoutBenchNestedInput
  }

  export type BenchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    benchNo?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seats?: SeatUncheckedUpdateManyWithoutBenchNestedInput
  }

  export type BenchCreateManyInput = {
    id?: number
    roomId: number
    benchNo: number
    capacity: number
    createdAt?: Date | string
  }

  export type BenchUpdateManyMutationInput = {
    benchNo?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BenchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    benchNo?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeatCreateInput = {
    position: number
    bench: BenchCreateNestedOneWithoutSeatsInput
    student: StudentCreateNestedOneWithoutSeatInput
    seatingPlan?: SeatingPlanCreateNestedOneWithoutSeatsInput
  }

  export type SeatUncheckedCreateInput = {
    id?: number
    benchId: number
    position: number
    studentId: number
    seatingPlanId?: number | null
  }

  export type SeatUpdateInput = {
    position?: IntFieldUpdateOperationsInput | number
    bench?: BenchUpdateOneRequiredWithoutSeatsNestedInput
    student?: StudentUpdateOneRequiredWithoutSeatNestedInput
    seatingPlan?: SeatingPlanUpdateOneWithoutSeatsNestedInput
  }

  export type SeatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    benchId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    seatingPlanId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SeatCreateManyInput = {
    id?: number
    benchId: number
    position: number
    studentId: number
    seatingPlanId?: number | null
  }

  export type SeatUpdateManyMutationInput = {
    position?: IntFieldUpdateOperationsInput | number
  }

  export type SeatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    benchId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    seatingPlanId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RoomAssignmentCreateInput = {
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    room: RoomCreateNestedOneWithoutRoomAssignmentsInput
    exam: ExamCreateNestedOneWithoutRoomAssignmentsInput
    invigilatorAssignments?: InvigilatorAssignmentCreateNestedManyWithoutRoomAssignmentInput
  }

  export type RoomAssignmentUncheckedCreateInput = {
    id?: number
    roomId: number
    examId: number
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    invigilatorAssignments?: InvigilatorAssignmentUncheckedCreateNestedManyWithoutRoomAssignmentInput
  }

  export type RoomAssignmentUpdateInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    room?: RoomUpdateOneRequiredWithoutRoomAssignmentsNestedInput
    exam?: ExamUpdateOneRequiredWithoutRoomAssignmentsNestedInput
    invigilatorAssignments?: InvigilatorAssignmentUpdateManyWithoutRoomAssignmentNestedInput
  }

  export type RoomAssignmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    invigilatorAssignments?: InvigilatorAssignmentUncheckedUpdateManyWithoutRoomAssignmentNestedInput
  }

  export type RoomAssignmentCreateManyInput = {
    id?: number
    roomId: number
    examId: number
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
  }

  export type RoomAssignmentUpdateManyMutationInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RoomAssignmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InvigilatorAssignmentCreateInput = {
    status?: string
    assignedAt?: Date | string
    completedAt?: Date | string | null
    invigilator: InvigilatorCreateNestedOneWithoutInvigilatorAssignmentsInput
    roomAssignment: RoomAssignmentCreateNestedOneWithoutInvigilatorAssignmentsInput
  }

  export type InvigilatorAssignmentUncheckedCreateInput = {
    id?: number
    invigilatorId: number
    roomAssignmentId: number
    status?: string
    assignedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type InvigilatorAssignmentUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    invigilator?: InvigilatorUpdateOneRequiredWithoutInvigilatorAssignmentsNestedInput
    roomAssignment?: RoomAssignmentUpdateOneRequiredWithoutInvigilatorAssignmentsNestedInput
  }

  export type InvigilatorAssignmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    invigilatorId?: IntFieldUpdateOperationsInput | number
    roomAssignmentId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InvigilatorAssignmentCreateManyInput = {
    id?: number
    invigilatorId: number
    roomAssignmentId: number
    status?: string
    assignedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type InvigilatorAssignmentUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InvigilatorAssignmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    invigilatorId?: IntFieldUpdateOperationsInput | number
    roomAssignmentId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SeatingPlanCreateInput = {
    createdAt?: Date | string
    isActive?: boolean
    exam: ExamCreateNestedOneWithoutSeatingPlansInput
    seats?: SeatCreateNestedManyWithoutSeatingPlanInput
  }

  export type SeatingPlanUncheckedCreateInput = {
    id?: number
    examId: number
    createdAt?: Date | string
    isActive?: boolean
    seats?: SeatUncheckedCreateNestedManyWithoutSeatingPlanInput
  }

  export type SeatingPlanUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    exam?: ExamUpdateOneRequiredWithoutSeatingPlansNestedInput
    seats?: SeatUpdateManyWithoutSeatingPlanNestedInput
  }

  export type SeatingPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    seats?: SeatUncheckedUpdateManyWithoutSeatingPlanNestedInput
  }

  export type SeatingPlanCreateManyInput = {
    id?: number
    examId: number
    createdAt?: Date | string
    isActive?: boolean
  }

  export type SeatingPlanUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SeatingPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type InvigilatorNullableScalarRelationFilter = {
    is?: InvigilatorWhereInput | null
    isNot?: InvigilatorWhereInput | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type InvigilatorAssignmentListRelationFilter = {
    every?: InvigilatorAssignmentWhereInput
    some?: InvigilatorAssignmentWhereInput
    none?: InvigilatorAssignmentWhereInput
  }

  export type InvigilatorAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvigilatorCountOrderByAggregateInput = {
    id?: SortOrder
    course?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    gender?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type InvigilatorAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type InvigilatorMaxOrderByAggregateInput = {
    id?: SortOrder
    course?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    gender?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type InvigilatorMinOrderByAggregateInput = {
    id?: SortOrder
    course?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    gender?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type InvigilatorSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SemesterListRelationFilter = {
    every?: SemesterWhereInput
    some?: SemesterWhereInput
    none?: SemesterWhereInput
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type SemesterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    duration?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    duration?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    duration?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
  }

  export type CourseScalarRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type SubjectListRelationFilter = {
    every?: SubjectWhereInput
    some?: SubjectWhereInput
    none?: SubjectWhereInput
  }

  export type SubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SemesterCountOrderByAggregateInput = {
    id?: SortOrder
    semesterNum?: SortOrder
    courseId?: SortOrder
  }

  export type SemesterAvgOrderByAggregateInput = {
    id?: SortOrder
    semesterNum?: SortOrder
    courseId?: SortOrder
  }

  export type SemesterMaxOrderByAggregateInput = {
    id?: SortOrder
    semesterNum?: SortOrder
    courseId?: SortOrder
  }

  export type SemesterMinOrderByAggregateInput = {
    id?: SortOrder
    semesterNum?: SortOrder
    courseId?: SortOrder
  }

  export type SemesterSumOrderByAggregateInput = {
    id?: SortOrder
    semesterNum?: SortOrder
    courseId?: SortOrder
  }

  export type SemesterScalarRelationFilter = {
    is?: SemesterWhereInput
    isNot?: SemesterWhereInput
  }

  export type ExamListRelationFilter = {
    every?: ExamWhereInput
    some?: ExamWhereInput
    none?: ExamWhereInput
  }

  export type ExamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    semesterId?: SortOrder
  }

  export type SubjectAvgOrderByAggregateInput = {
    id?: SortOrder
    semesterId?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    semesterId?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    semesterId?: SortOrder
  }

  export type SubjectSumOrderByAggregateInput = {
    id?: SortOrder
    semesterId?: SortOrder
  }

  export type SeatNullableScalarRelationFilter = {
    is?: SeatWhereInput | null
    isNot?: SeatWhereInput | null
  }

  export type StudentSymbolNumberCollegeCompoundUniqueInput = {
    symbolNumber: string
    college: string
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    symbolNumber?: SortOrder
    regNumber?: SortOrder
    college?: SortOrder
    courseId?: SortOrder
    semesterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    semesterId?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    symbolNumber?: SortOrder
    regNumber?: SortOrder
    college?: SortOrder
    courseId?: SortOrder
    semesterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    symbolNumber?: SortOrder
    regNumber?: SortOrder
    college?: SortOrder
    courseId?: SortOrder
    semesterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    semesterId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SubjectScalarRelationFilter = {
    is?: SubjectWhereInput
    isNot?: SubjectWhereInput
  }

  export type RoomAssignmentListRelationFilter = {
    every?: RoomAssignmentWhereInput
    some?: RoomAssignmentWhereInput
    none?: RoomAssignmentWhereInput
  }

  export type SeatingPlanListRelationFilter = {
    every?: SeatingPlanWhereInput
    some?: SeatingPlanWhereInput
    none?: SeatingPlanWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RoomAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeatingPlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExamCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    subjectId?: SortOrder
  }

  export type ExamAvgOrderByAggregateInput = {
    id?: SortOrder
    subjectId?: SortOrder
  }

  export type ExamMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    subjectId?: SortOrder
  }

  export type ExamMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    subjectId?: SortOrder
  }

  export type ExamSumOrderByAggregateInput = {
    id?: SortOrder
    subjectId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BenchListRelationFilter = {
    every?: BenchWhereInput
    some?: BenchWhereInput
    none?: BenchWhereInput
  }

  export type BenchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoomCountOrderByAggregateInput = {
    id?: SortOrder
    roomNumber?: SortOrder
    block?: SortOrder
    floor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoomMaxOrderByAggregateInput = {
    id?: SortOrder
    roomNumber?: SortOrder
    block?: SortOrder
    floor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomMinOrderByAggregateInput = {
    id?: SortOrder
    roomNumber?: SortOrder
    block?: SortOrder
    floor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoomScalarRelationFilter = {
    is?: RoomWhereInput
    isNot?: RoomWhereInput
  }

  export type SeatListRelationFilter = {
    every?: SeatWhereInput
    some?: SeatWhereInput
    none?: SeatWhereInput
  }

  export type SeatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BenchCountOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    benchNo?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
  }

  export type BenchAvgOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    benchNo?: SortOrder
    capacity?: SortOrder
  }

  export type BenchMaxOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    benchNo?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
  }

  export type BenchMinOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    benchNo?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
  }

  export type BenchSumOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    benchNo?: SortOrder
    capacity?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BenchScalarRelationFilter = {
    is?: BenchWhereInput
    isNot?: BenchWhereInput
  }

  export type StudentScalarRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type SeatingPlanNullableScalarRelationFilter = {
    is?: SeatingPlanWhereInput | null
    isNot?: SeatingPlanWhereInput | null
  }

  export type SeatCountOrderByAggregateInput = {
    id?: SortOrder
    benchId?: SortOrder
    position?: SortOrder
    studentId?: SortOrder
    seatingPlanId?: SortOrder
  }

  export type SeatAvgOrderByAggregateInput = {
    id?: SortOrder
    benchId?: SortOrder
    position?: SortOrder
    studentId?: SortOrder
    seatingPlanId?: SortOrder
  }

  export type SeatMaxOrderByAggregateInput = {
    id?: SortOrder
    benchId?: SortOrder
    position?: SortOrder
    studentId?: SortOrder
    seatingPlanId?: SortOrder
  }

  export type SeatMinOrderByAggregateInput = {
    id?: SortOrder
    benchId?: SortOrder
    position?: SortOrder
    studentId?: SortOrder
    seatingPlanId?: SortOrder
  }

  export type SeatSumOrderByAggregateInput = {
    id?: SortOrder
    benchId?: SortOrder
    position?: SortOrder
    studentId?: SortOrder
    seatingPlanId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ExamScalarRelationFilter = {
    is?: ExamWhereInput
    isNot?: ExamWhereInput
  }

  export type RoomAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    examId?: SortOrder
    isActive?: SortOrder
    isCompleted?: SortOrder
    completedAt?: SortOrder
  }

  export type RoomAssignmentAvgOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    examId?: SortOrder
  }

  export type RoomAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    examId?: SortOrder
    isActive?: SortOrder
    isCompleted?: SortOrder
    completedAt?: SortOrder
  }

  export type RoomAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    examId?: SortOrder
    isActive?: SortOrder
    isCompleted?: SortOrder
    completedAt?: SortOrder
  }

  export type RoomAssignmentSumOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    examId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type InvigilatorScalarRelationFilter = {
    is?: InvigilatorWhereInput
    isNot?: InvigilatorWhereInput
  }

  export type RoomAssignmentScalarRelationFilter = {
    is?: RoomAssignmentWhereInput
    isNot?: RoomAssignmentWhereInput
  }

  export type InvigilatorAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    invigilatorId?: SortOrder
    roomAssignmentId?: SortOrder
    status?: SortOrder
    assignedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type InvigilatorAssignmentAvgOrderByAggregateInput = {
    id?: SortOrder
    invigilatorId?: SortOrder
    roomAssignmentId?: SortOrder
  }

  export type InvigilatorAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    invigilatorId?: SortOrder
    roomAssignmentId?: SortOrder
    status?: SortOrder
    assignedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type InvigilatorAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    invigilatorId?: SortOrder
    roomAssignmentId?: SortOrder
    status?: SortOrder
    assignedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type InvigilatorAssignmentSumOrderByAggregateInput = {
    id?: SortOrder
    invigilatorId?: SortOrder
    roomAssignmentId?: SortOrder
  }

  export type SeatingPlanCountOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    createdAt?: SortOrder
    isActive?: SortOrder
  }

  export type SeatingPlanAvgOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
  }

  export type SeatingPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    createdAt?: SortOrder
    isActive?: SortOrder
  }

  export type SeatingPlanMinOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    createdAt?: SortOrder
    isActive?: SortOrder
  }

  export type SeatingPlanSumOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
  }

  export type InvigilatorCreateNestedOneWithoutUserInput = {
    create?: XOR<InvigilatorCreateWithoutUserInput, InvigilatorUncheckedCreateWithoutUserInput>
    connectOrCreate?: InvigilatorCreateOrConnectWithoutUserInput
    connect?: InvigilatorWhereUniqueInput
  }

  export type InvigilatorUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<InvigilatorCreateWithoutUserInput, InvigilatorUncheckedCreateWithoutUserInput>
    connectOrCreate?: InvigilatorCreateOrConnectWithoutUserInput
    connect?: InvigilatorWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type InvigilatorUpdateOneWithoutUserNestedInput = {
    create?: XOR<InvigilatorCreateWithoutUserInput, InvigilatorUncheckedCreateWithoutUserInput>
    connectOrCreate?: InvigilatorCreateOrConnectWithoutUserInput
    upsert?: InvigilatorUpsertWithoutUserInput
    disconnect?: InvigilatorWhereInput | boolean
    delete?: InvigilatorWhereInput | boolean
    connect?: InvigilatorWhereUniqueInput
    update?: XOR<XOR<InvigilatorUpdateToOneWithWhereWithoutUserInput, InvigilatorUpdateWithoutUserInput>, InvigilatorUncheckedUpdateWithoutUserInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type InvigilatorUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<InvigilatorCreateWithoutUserInput, InvigilatorUncheckedCreateWithoutUserInput>
    connectOrCreate?: InvigilatorCreateOrConnectWithoutUserInput
    upsert?: InvigilatorUpsertWithoutUserInput
    disconnect?: InvigilatorWhereInput | boolean
    delete?: InvigilatorWhereInput | boolean
    connect?: InvigilatorWhereUniqueInput
    update?: XOR<XOR<InvigilatorUpdateToOneWithWhereWithoutUserInput, InvigilatorUpdateWithoutUserInput>, InvigilatorUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutInvigilatorInput = {
    create?: XOR<UserCreateWithoutInvigilatorInput, UserUncheckedCreateWithoutInvigilatorInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvigilatorInput
    connect?: UserWhereUniqueInput
  }

  export type InvigilatorAssignmentCreateNestedManyWithoutInvigilatorInput = {
    create?: XOR<InvigilatorAssignmentCreateWithoutInvigilatorInput, InvigilatorAssignmentUncheckedCreateWithoutInvigilatorInput> | InvigilatorAssignmentCreateWithoutInvigilatorInput[] | InvigilatorAssignmentUncheckedCreateWithoutInvigilatorInput[]
    connectOrCreate?: InvigilatorAssignmentCreateOrConnectWithoutInvigilatorInput | InvigilatorAssignmentCreateOrConnectWithoutInvigilatorInput[]
    createMany?: InvigilatorAssignmentCreateManyInvigilatorInputEnvelope
    connect?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
  }

  export type InvigilatorAssignmentUncheckedCreateNestedManyWithoutInvigilatorInput = {
    create?: XOR<InvigilatorAssignmentCreateWithoutInvigilatorInput, InvigilatorAssignmentUncheckedCreateWithoutInvigilatorInput> | InvigilatorAssignmentCreateWithoutInvigilatorInput[] | InvigilatorAssignmentUncheckedCreateWithoutInvigilatorInput[]
    connectOrCreate?: InvigilatorAssignmentCreateOrConnectWithoutInvigilatorInput | InvigilatorAssignmentCreateOrConnectWithoutInvigilatorInput[]
    createMany?: InvigilatorAssignmentCreateManyInvigilatorInputEnvelope
    connect?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutInvigilatorNestedInput = {
    create?: XOR<UserCreateWithoutInvigilatorInput, UserUncheckedCreateWithoutInvigilatorInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvigilatorInput
    upsert?: UserUpsertWithoutInvigilatorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvigilatorInput, UserUpdateWithoutInvigilatorInput>, UserUncheckedUpdateWithoutInvigilatorInput>
  }

  export type InvigilatorAssignmentUpdateManyWithoutInvigilatorNestedInput = {
    create?: XOR<InvigilatorAssignmentCreateWithoutInvigilatorInput, InvigilatorAssignmentUncheckedCreateWithoutInvigilatorInput> | InvigilatorAssignmentCreateWithoutInvigilatorInput[] | InvigilatorAssignmentUncheckedCreateWithoutInvigilatorInput[]
    connectOrCreate?: InvigilatorAssignmentCreateOrConnectWithoutInvigilatorInput | InvigilatorAssignmentCreateOrConnectWithoutInvigilatorInput[]
    upsert?: InvigilatorAssignmentUpsertWithWhereUniqueWithoutInvigilatorInput | InvigilatorAssignmentUpsertWithWhereUniqueWithoutInvigilatorInput[]
    createMany?: InvigilatorAssignmentCreateManyInvigilatorInputEnvelope
    set?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    disconnect?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    delete?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    connect?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    update?: InvigilatorAssignmentUpdateWithWhereUniqueWithoutInvigilatorInput | InvigilatorAssignmentUpdateWithWhereUniqueWithoutInvigilatorInput[]
    updateMany?: InvigilatorAssignmentUpdateManyWithWhereWithoutInvigilatorInput | InvigilatorAssignmentUpdateManyWithWhereWithoutInvigilatorInput[]
    deleteMany?: InvigilatorAssignmentScalarWhereInput | InvigilatorAssignmentScalarWhereInput[]
  }

  export type InvigilatorAssignmentUncheckedUpdateManyWithoutInvigilatorNestedInput = {
    create?: XOR<InvigilatorAssignmentCreateWithoutInvigilatorInput, InvigilatorAssignmentUncheckedCreateWithoutInvigilatorInput> | InvigilatorAssignmentCreateWithoutInvigilatorInput[] | InvigilatorAssignmentUncheckedCreateWithoutInvigilatorInput[]
    connectOrCreate?: InvigilatorAssignmentCreateOrConnectWithoutInvigilatorInput | InvigilatorAssignmentCreateOrConnectWithoutInvigilatorInput[]
    upsert?: InvigilatorAssignmentUpsertWithWhereUniqueWithoutInvigilatorInput | InvigilatorAssignmentUpsertWithWhereUniqueWithoutInvigilatorInput[]
    createMany?: InvigilatorAssignmentCreateManyInvigilatorInputEnvelope
    set?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    disconnect?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    delete?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    connect?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    update?: InvigilatorAssignmentUpdateWithWhereUniqueWithoutInvigilatorInput | InvigilatorAssignmentUpdateWithWhereUniqueWithoutInvigilatorInput[]
    updateMany?: InvigilatorAssignmentUpdateManyWithWhereWithoutInvigilatorInput | InvigilatorAssignmentUpdateManyWithWhereWithoutInvigilatorInput[]
    deleteMany?: InvigilatorAssignmentScalarWhereInput | InvigilatorAssignmentScalarWhereInput[]
  }

  export type SemesterCreateNestedManyWithoutCourseInput = {
    create?: XOR<SemesterCreateWithoutCourseInput, SemesterUncheckedCreateWithoutCourseInput> | SemesterCreateWithoutCourseInput[] | SemesterUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: SemesterCreateOrConnectWithoutCourseInput | SemesterCreateOrConnectWithoutCourseInput[]
    createMany?: SemesterCreateManyCourseInputEnvelope
    connect?: SemesterWhereUniqueInput | SemesterWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutCourseInput = {
    create?: XOR<StudentCreateWithoutCourseInput, StudentUncheckedCreateWithoutCourseInput> | StudentCreateWithoutCourseInput[] | StudentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutCourseInput | StudentCreateOrConnectWithoutCourseInput[]
    createMany?: StudentCreateManyCourseInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type SemesterUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<SemesterCreateWithoutCourseInput, SemesterUncheckedCreateWithoutCourseInput> | SemesterCreateWithoutCourseInput[] | SemesterUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: SemesterCreateOrConnectWithoutCourseInput | SemesterCreateOrConnectWithoutCourseInput[]
    createMany?: SemesterCreateManyCourseInputEnvelope
    connect?: SemesterWhereUniqueInput | SemesterWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<StudentCreateWithoutCourseInput, StudentUncheckedCreateWithoutCourseInput> | StudentCreateWithoutCourseInput[] | StudentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutCourseInput | StudentCreateOrConnectWithoutCourseInput[]
    createMany?: StudentCreateManyCourseInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type SemesterUpdateManyWithoutCourseNestedInput = {
    create?: XOR<SemesterCreateWithoutCourseInput, SemesterUncheckedCreateWithoutCourseInput> | SemesterCreateWithoutCourseInput[] | SemesterUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: SemesterCreateOrConnectWithoutCourseInput | SemesterCreateOrConnectWithoutCourseInput[]
    upsert?: SemesterUpsertWithWhereUniqueWithoutCourseInput | SemesterUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: SemesterCreateManyCourseInputEnvelope
    set?: SemesterWhereUniqueInput | SemesterWhereUniqueInput[]
    disconnect?: SemesterWhereUniqueInput | SemesterWhereUniqueInput[]
    delete?: SemesterWhereUniqueInput | SemesterWhereUniqueInput[]
    connect?: SemesterWhereUniqueInput | SemesterWhereUniqueInput[]
    update?: SemesterUpdateWithWhereUniqueWithoutCourseInput | SemesterUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: SemesterUpdateManyWithWhereWithoutCourseInput | SemesterUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: SemesterScalarWhereInput | SemesterScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutCourseNestedInput = {
    create?: XOR<StudentCreateWithoutCourseInput, StudentUncheckedCreateWithoutCourseInput> | StudentCreateWithoutCourseInput[] | StudentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutCourseInput | StudentCreateOrConnectWithoutCourseInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutCourseInput | StudentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: StudentCreateManyCourseInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutCourseInput | StudentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutCourseInput | StudentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type SemesterUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<SemesterCreateWithoutCourseInput, SemesterUncheckedCreateWithoutCourseInput> | SemesterCreateWithoutCourseInput[] | SemesterUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: SemesterCreateOrConnectWithoutCourseInput | SemesterCreateOrConnectWithoutCourseInput[]
    upsert?: SemesterUpsertWithWhereUniqueWithoutCourseInput | SemesterUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: SemesterCreateManyCourseInputEnvelope
    set?: SemesterWhereUniqueInput | SemesterWhereUniqueInput[]
    disconnect?: SemesterWhereUniqueInput | SemesterWhereUniqueInput[]
    delete?: SemesterWhereUniqueInput | SemesterWhereUniqueInput[]
    connect?: SemesterWhereUniqueInput | SemesterWhereUniqueInput[]
    update?: SemesterUpdateWithWhereUniqueWithoutCourseInput | SemesterUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: SemesterUpdateManyWithWhereWithoutCourseInput | SemesterUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: SemesterScalarWhereInput | SemesterScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<StudentCreateWithoutCourseInput, StudentUncheckedCreateWithoutCourseInput> | StudentCreateWithoutCourseInput[] | StudentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutCourseInput | StudentCreateOrConnectWithoutCourseInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutCourseInput | StudentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: StudentCreateManyCourseInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutCourseInput | StudentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutCourseInput | StudentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type CourseCreateNestedOneWithoutSemestersInput = {
    create?: XOR<CourseCreateWithoutSemestersInput, CourseUncheckedCreateWithoutSemestersInput>
    connectOrCreate?: CourseCreateOrConnectWithoutSemestersInput
    connect?: CourseWhereUniqueInput
  }

  export type SubjectCreateNestedManyWithoutSemesterInput = {
    create?: XOR<SubjectCreateWithoutSemesterInput, SubjectUncheckedCreateWithoutSemesterInput> | SubjectCreateWithoutSemesterInput[] | SubjectUncheckedCreateWithoutSemesterInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutSemesterInput | SubjectCreateOrConnectWithoutSemesterInput[]
    createMany?: SubjectCreateManySemesterInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutSemesterInput = {
    create?: XOR<StudentCreateWithoutSemesterInput, StudentUncheckedCreateWithoutSemesterInput> | StudentCreateWithoutSemesterInput[] | StudentUncheckedCreateWithoutSemesterInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSemesterInput | StudentCreateOrConnectWithoutSemesterInput[]
    createMany?: StudentCreateManySemesterInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type SubjectUncheckedCreateNestedManyWithoutSemesterInput = {
    create?: XOR<SubjectCreateWithoutSemesterInput, SubjectUncheckedCreateWithoutSemesterInput> | SubjectCreateWithoutSemesterInput[] | SubjectUncheckedCreateWithoutSemesterInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutSemesterInput | SubjectCreateOrConnectWithoutSemesterInput[]
    createMany?: SubjectCreateManySemesterInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutSemesterInput = {
    create?: XOR<StudentCreateWithoutSemesterInput, StudentUncheckedCreateWithoutSemesterInput> | StudentCreateWithoutSemesterInput[] | StudentUncheckedCreateWithoutSemesterInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSemesterInput | StudentCreateOrConnectWithoutSemesterInput[]
    createMany?: StudentCreateManySemesterInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type CourseUpdateOneRequiredWithoutSemestersNestedInput = {
    create?: XOR<CourseCreateWithoutSemestersInput, CourseUncheckedCreateWithoutSemestersInput>
    connectOrCreate?: CourseCreateOrConnectWithoutSemestersInput
    upsert?: CourseUpsertWithoutSemestersInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutSemestersInput, CourseUpdateWithoutSemestersInput>, CourseUncheckedUpdateWithoutSemestersInput>
  }

  export type SubjectUpdateManyWithoutSemesterNestedInput = {
    create?: XOR<SubjectCreateWithoutSemesterInput, SubjectUncheckedCreateWithoutSemesterInput> | SubjectCreateWithoutSemesterInput[] | SubjectUncheckedCreateWithoutSemesterInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutSemesterInput | SubjectCreateOrConnectWithoutSemesterInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutSemesterInput | SubjectUpsertWithWhereUniqueWithoutSemesterInput[]
    createMany?: SubjectCreateManySemesterInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutSemesterInput | SubjectUpdateWithWhereUniqueWithoutSemesterInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutSemesterInput | SubjectUpdateManyWithWhereWithoutSemesterInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutSemesterNestedInput = {
    create?: XOR<StudentCreateWithoutSemesterInput, StudentUncheckedCreateWithoutSemesterInput> | StudentCreateWithoutSemesterInput[] | StudentUncheckedCreateWithoutSemesterInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSemesterInput | StudentCreateOrConnectWithoutSemesterInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutSemesterInput | StudentUpsertWithWhereUniqueWithoutSemesterInput[]
    createMany?: StudentCreateManySemesterInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutSemesterInput | StudentUpdateWithWhereUniqueWithoutSemesterInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutSemesterInput | StudentUpdateManyWithWhereWithoutSemesterInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type SubjectUncheckedUpdateManyWithoutSemesterNestedInput = {
    create?: XOR<SubjectCreateWithoutSemesterInput, SubjectUncheckedCreateWithoutSemesterInput> | SubjectCreateWithoutSemesterInput[] | SubjectUncheckedCreateWithoutSemesterInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutSemesterInput | SubjectCreateOrConnectWithoutSemesterInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutSemesterInput | SubjectUpsertWithWhereUniqueWithoutSemesterInput[]
    createMany?: SubjectCreateManySemesterInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutSemesterInput | SubjectUpdateWithWhereUniqueWithoutSemesterInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutSemesterInput | SubjectUpdateManyWithWhereWithoutSemesterInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutSemesterNestedInput = {
    create?: XOR<StudentCreateWithoutSemesterInput, StudentUncheckedCreateWithoutSemesterInput> | StudentCreateWithoutSemesterInput[] | StudentUncheckedCreateWithoutSemesterInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSemesterInput | StudentCreateOrConnectWithoutSemesterInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutSemesterInput | StudentUpsertWithWhereUniqueWithoutSemesterInput[]
    createMany?: StudentCreateManySemesterInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutSemesterInput | StudentUpdateWithWhereUniqueWithoutSemesterInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutSemesterInput | StudentUpdateManyWithWhereWithoutSemesterInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type SemesterCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<SemesterCreateWithoutSubjectsInput, SemesterUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: SemesterCreateOrConnectWithoutSubjectsInput
    connect?: SemesterWhereUniqueInput
  }

  export type ExamCreateNestedManyWithoutSubjectInput = {
    create?: XOR<ExamCreateWithoutSubjectInput, ExamUncheckedCreateWithoutSubjectInput> | ExamCreateWithoutSubjectInput[] | ExamUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutSubjectInput | ExamCreateOrConnectWithoutSubjectInput[]
    createMany?: ExamCreateManySubjectInputEnvelope
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
  }

  export type ExamUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<ExamCreateWithoutSubjectInput, ExamUncheckedCreateWithoutSubjectInput> | ExamCreateWithoutSubjectInput[] | ExamUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutSubjectInput | ExamCreateOrConnectWithoutSubjectInput[]
    createMany?: ExamCreateManySubjectInputEnvelope
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
  }

  export type SemesterUpdateOneRequiredWithoutSubjectsNestedInput = {
    create?: XOR<SemesterCreateWithoutSubjectsInput, SemesterUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: SemesterCreateOrConnectWithoutSubjectsInput
    upsert?: SemesterUpsertWithoutSubjectsInput
    connect?: SemesterWhereUniqueInput
    update?: XOR<XOR<SemesterUpdateToOneWithWhereWithoutSubjectsInput, SemesterUpdateWithoutSubjectsInput>, SemesterUncheckedUpdateWithoutSubjectsInput>
  }

  export type ExamUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<ExamCreateWithoutSubjectInput, ExamUncheckedCreateWithoutSubjectInput> | ExamCreateWithoutSubjectInput[] | ExamUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutSubjectInput | ExamCreateOrConnectWithoutSubjectInput[]
    upsert?: ExamUpsertWithWhereUniqueWithoutSubjectInput | ExamUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: ExamCreateManySubjectInputEnvelope
    set?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    disconnect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    delete?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    update?: ExamUpdateWithWhereUniqueWithoutSubjectInput | ExamUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: ExamUpdateManyWithWhereWithoutSubjectInput | ExamUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: ExamScalarWhereInput | ExamScalarWhereInput[]
  }

  export type ExamUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<ExamCreateWithoutSubjectInput, ExamUncheckedCreateWithoutSubjectInput> | ExamCreateWithoutSubjectInput[] | ExamUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutSubjectInput | ExamCreateOrConnectWithoutSubjectInput[]
    upsert?: ExamUpsertWithWhereUniqueWithoutSubjectInput | ExamUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: ExamCreateManySubjectInputEnvelope
    set?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    disconnect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    delete?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    update?: ExamUpdateWithWhereUniqueWithoutSubjectInput | ExamUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: ExamUpdateManyWithWhereWithoutSubjectInput | ExamUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: ExamScalarWhereInput | ExamScalarWhereInput[]
  }

  export type CourseCreateNestedOneWithoutStudentsInput = {
    create?: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutStudentsInput
    connect?: CourseWhereUniqueInput
  }

  export type SemesterCreateNestedOneWithoutStudentsInput = {
    create?: XOR<SemesterCreateWithoutStudentsInput, SemesterUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: SemesterCreateOrConnectWithoutStudentsInput
    connect?: SemesterWhereUniqueInput
  }

  export type SeatCreateNestedOneWithoutStudentInput = {
    create?: XOR<SeatCreateWithoutStudentInput, SeatUncheckedCreateWithoutStudentInput>
    connectOrCreate?: SeatCreateOrConnectWithoutStudentInput
    connect?: SeatWhereUniqueInput
  }

  export type SeatUncheckedCreateNestedOneWithoutStudentInput = {
    create?: XOR<SeatCreateWithoutStudentInput, SeatUncheckedCreateWithoutStudentInput>
    connectOrCreate?: SeatCreateOrConnectWithoutStudentInput
    connect?: SeatWhereUniqueInput
  }

  export type CourseUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutStudentsInput
    upsert?: CourseUpsertWithoutStudentsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutStudentsInput, CourseUpdateWithoutStudentsInput>, CourseUncheckedUpdateWithoutStudentsInput>
  }

  export type SemesterUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<SemesterCreateWithoutStudentsInput, SemesterUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: SemesterCreateOrConnectWithoutStudentsInput
    upsert?: SemesterUpsertWithoutStudentsInput
    connect?: SemesterWhereUniqueInput
    update?: XOR<XOR<SemesterUpdateToOneWithWhereWithoutStudentsInput, SemesterUpdateWithoutStudentsInput>, SemesterUncheckedUpdateWithoutStudentsInput>
  }

  export type SeatUpdateOneWithoutStudentNestedInput = {
    create?: XOR<SeatCreateWithoutStudentInput, SeatUncheckedCreateWithoutStudentInput>
    connectOrCreate?: SeatCreateOrConnectWithoutStudentInput
    upsert?: SeatUpsertWithoutStudentInput
    disconnect?: SeatWhereInput | boolean
    delete?: SeatWhereInput | boolean
    connect?: SeatWhereUniqueInput
    update?: XOR<XOR<SeatUpdateToOneWithWhereWithoutStudentInput, SeatUpdateWithoutStudentInput>, SeatUncheckedUpdateWithoutStudentInput>
  }

  export type SeatUncheckedUpdateOneWithoutStudentNestedInput = {
    create?: XOR<SeatCreateWithoutStudentInput, SeatUncheckedCreateWithoutStudentInput>
    connectOrCreate?: SeatCreateOrConnectWithoutStudentInput
    upsert?: SeatUpsertWithoutStudentInput
    disconnect?: SeatWhereInput | boolean
    delete?: SeatWhereInput | boolean
    connect?: SeatWhereUniqueInput
    update?: XOR<XOR<SeatUpdateToOneWithWhereWithoutStudentInput, SeatUpdateWithoutStudentInput>, SeatUncheckedUpdateWithoutStudentInput>
  }

  export type SubjectCreateNestedOneWithoutExamsInput = {
    create?: XOR<SubjectCreateWithoutExamsInput, SubjectUncheckedCreateWithoutExamsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutExamsInput
    connect?: SubjectWhereUniqueInput
  }

  export type RoomAssignmentCreateNestedManyWithoutExamInput = {
    create?: XOR<RoomAssignmentCreateWithoutExamInput, RoomAssignmentUncheckedCreateWithoutExamInput> | RoomAssignmentCreateWithoutExamInput[] | RoomAssignmentUncheckedCreateWithoutExamInput[]
    connectOrCreate?: RoomAssignmentCreateOrConnectWithoutExamInput | RoomAssignmentCreateOrConnectWithoutExamInput[]
    createMany?: RoomAssignmentCreateManyExamInputEnvelope
    connect?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
  }

  export type SeatingPlanCreateNestedManyWithoutExamInput = {
    create?: XOR<SeatingPlanCreateWithoutExamInput, SeatingPlanUncheckedCreateWithoutExamInput> | SeatingPlanCreateWithoutExamInput[] | SeatingPlanUncheckedCreateWithoutExamInput[]
    connectOrCreate?: SeatingPlanCreateOrConnectWithoutExamInput | SeatingPlanCreateOrConnectWithoutExamInput[]
    createMany?: SeatingPlanCreateManyExamInputEnvelope
    connect?: SeatingPlanWhereUniqueInput | SeatingPlanWhereUniqueInput[]
  }

  export type RoomAssignmentUncheckedCreateNestedManyWithoutExamInput = {
    create?: XOR<RoomAssignmentCreateWithoutExamInput, RoomAssignmentUncheckedCreateWithoutExamInput> | RoomAssignmentCreateWithoutExamInput[] | RoomAssignmentUncheckedCreateWithoutExamInput[]
    connectOrCreate?: RoomAssignmentCreateOrConnectWithoutExamInput | RoomAssignmentCreateOrConnectWithoutExamInput[]
    createMany?: RoomAssignmentCreateManyExamInputEnvelope
    connect?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
  }

  export type SeatingPlanUncheckedCreateNestedManyWithoutExamInput = {
    create?: XOR<SeatingPlanCreateWithoutExamInput, SeatingPlanUncheckedCreateWithoutExamInput> | SeatingPlanCreateWithoutExamInput[] | SeatingPlanUncheckedCreateWithoutExamInput[]
    connectOrCreate?: SeatingPlanCreateOrConnectWithoutExamInput | SeatingPlanCreateOrConnectWithoutExamInput[]
    createMany?: SeatingPlanCreateManyExamInputEnvelope
    connect?: SeatingPlanWhereUniqueInput | SeatingPlanWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type SubjectUpdateOneRequiredWithoutExamsNestedInput = {
    create?: XOR<SubjectCreateWithoutExamsInput, SubjectUncheckedCreateWithoutExamsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutExamsInput
    upsert?: SubjectUpsertWithoutExamsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutExamsInput, SubjectUpdateWithoutExamsInput>, SubjectUncheckedUpdateWithoutExamsInput>
  }

  export type RoomAssignmentUpdateManyWithoutExamNestedInput = {
    create?: XOR<RoomAssignmentCreateWithoutExamInput, RoomAssignmentUncheckedCreateWithoutExamInput> | RoomAssignmentCreateWithoutExamInput[] | RoomAssignmentUncheckedCreateWithoutExamInput[]
    connectOrCreate?: RoomAssignmentCreateOrConnectWithoutExamInput | RoomAssignmentCreateOrConnectWithoutExamInput[]
    upsert?: RoomAssignmentUpsertWithWhereUniqueWithoutExamInput | RoomAssignmentUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: RoomAssignmentCreateManyExamInputEnvelope
    set?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    disconnect?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    delete?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    connect?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    update?: RoomAssignmentUpdateWithWhereUniqueWithoutExamInput | RoomAssignmentUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: RoomAssignmentUpdateManyWithWhereWithoutExamInput | RoomAssignmentUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: RoomAssignmentScalarWhereInput | RoomAssignmentScalarWhereInput[]
  }

  export type SeatingPlanUpdateManyWithoutExamNestedInput = {
    create?: XOR<SeatingPlanCreateWithoutExamInput, SeatingPlanUncheckedCreateWithoutExamInput> | SeatingPlanCreateWithoutExamInput[] | SeatingPlanUncheckedCreateWithoutExamInput[]
    connectOrCreate?: SeatingPlanCreateOrConnectWithoutExamInput | SeatingPlanCreateOrConnectWithoutExamInput[]
    upsert?: SeatingPlanUpsertWithWhereUniqueWithoutExamInput | SeatingPlanUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: SeatingPlanCreateManyExamInputEnvelope
    set?: SeatingPlanWhereUniqueInput | SeatingPlanWhereUniqueInput[]
    disconnect?: SeatingPlanWhereUniqueInput | SeatingPlanWhereUniqueInput[]
    delete?: SeatingPlanWhereUniqueInput | SeatingPlanWhereUniqueInput[]
    connect?: SeatingPlanWhereUniqueInput | SeatingPlanWhereUniqueInput[]
    update?: SeatingPlanUpdateWithWhereUniqueWithoutExamInput | SeatingPlanUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: SeatingPlanUpdateManyWithWhereWithoutExamInput | SeatingPlanUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: SeatingPlanScalarWhereInput | SeatingPlanScalarWhereInput[]
  }

  export type RoomAssignmentUncheckedUpdateManyWithoutExamNestedInput = {
    create?: XOR<RoomAssignmentCreateWithoutExamInput, RoomAssignmentUncheckedCreateWithoutExamInput> | RoomAssignmentCreateWithoutExamInput[] | RoomAssignmentUncheckedCreateWithoutExamInput[]
    connectOrCreate?: RoomAssignmentCreateOrConnectWithoutExamInput | RoomAssignmentCreateOrConnectWithoutExamInput[]
    upsert?: RoomAssignmentUpsertWithWhereUniqueWithoutExamInput | RoomAssignmentUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: RoomAssignmentCreateManyExamInputEnvelope
    set?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    disconnect?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    delete?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    connect?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    update?: RoomAssignmentUpdateWithWhereUniqueWithoutExamInput | RoomAssignmentUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: RoomAssignmentUpdateManyWithWhereWithoutExamInput | RoomAssignmentUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: RoomAssignmentScalarWhereInput | RoomAssignmentScalarWhereInput[]
  }

  export type SeatingPlanUncheckedUpdateManyWithoutExamNestedInput = {
    create?: XOR<SeatingPlanCreateWithoutExamInput, SeatingPlanUncheckedCreateWithoutExamInput> | SeatingPlanCreateWithoutExamInput[] | SeatingPlanUncheckedCreateWithoutExamInput[]
    connectOrCreate?: SeatingPlanCreateOrConnectWithoutExamInput | SeatingPlanCreateOrConnectWithoutExamInput[]
    upsert?: SeatingPlanUpsertWithWhereUniqueWithoutExamInput | SeatingPlanUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: SeatingPlanCreateManyExamInputEnvelope
    set?: SeatingPlanWhereUniqueInput | SeatingPlanWhereUniqueInput[]
    disconnect?: SeatingPlanWhereUniqueInput | SeatingPlanWhereUniqueInput[]
    delete?: SeatingPlanWhereUniqueInput | SeatingPlanWhereUniqueInput[]
    connect?: SeatingPlanWhereUniqueInput | SeatingPlanWhereUniqueInput[]
    update?: SeatingPlanUpdateWithWhereUniqueWithoutExamInput | SeatingPlanUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: SeatingPlanUpdateManyWithWhereWithoutExamInput | SeatingPlanUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: SeatingPlanScalarWhereInput | SeatingPlanScalarWhereInput[]
  }

  export type BenchCreateNestedManyWithoutRoomInput = {
    create?: XOR<BenchCreateWithoutRoomInput, BenchUncheckedCreateWithoutRoomInput> | BenchCreateWithoutRoomInput[] | BenchUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: BenchCreateOrConnectWithoutRoomInput | BenchCreateOrConnectWithoutRoomInput[]
    createMany?: BenchCreateManyRoomInputEnvelope
    connect?: BenchWhereUniqueInput | BenchWhereUniqueInput[]
  }

  export type RoomAssignmentCreateNestedManyWithoutRoomInput = {
    create?: XOR<RoomAssignmentCreateWithoutRoomInput, RoomAssignmentUncheckedCreateWithoutRoomInput> | RoomAssignmentCreateWithoutRoomInput[] | RoomAssignmentUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomAssignmentCreateOrConnectWithoutRoomInput | RoomAssignmentCreateOrConnectWithoutRoomInput[]
    createMany?: RoomAssignmentCreateManyRoomInputEnvelope
    connect?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
  }

  export type BenchUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<BenchCreateWithoutRoomInput, BenchUncheckedCreateWithoutRoomInput> | BenchCreateWithoutRoomInput[] | BenchUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: BenchCreateOrConnectWithoutRoomInput | BenchCreateOrConnectWithoutRoomInput[]
    createMany?: BenchCreateManyRoomInputEnvelope
    connect?: BenchWhereUniqueInput | BenchWhereUniqueInput[]
  }

  export type RoomAssignmentUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<RoomAssignmentCreateWithoutRoomInput, RoomAssignmentUncheckedCreateWithoutRoomInput> | RoomAssignmentCreateWithoutRoomInput[] | RoomAssignmentUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomAssignmentCreateOrConnectWithoutRoomInput | RoomAssignmentCreateOrConnectWithoutRoomInput[]
    createMany?: RoomAssignmentCreateManyRoomInputEnvelope
    connect?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
  }

  export type BenchUpdateManyWithoutRoomNestedInput = {
    create?: XOR<BenchCreateWithoutRoomInput, BenchUncheckedCreateWithoutRoomInput> | BenchCreateWithoutRoomInput[] | BenchUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: BenchCreateOrConnectWithoutRoomInput | BenchCreateOrConnectWithoutRoomInput[]
    upsert?: BenchUpsertWithWhereUniqueWithoutRoomInput | BenchUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: BenchCreateManyRoomInputEnvelope
    set?: BenchWhereUniqueInput | BenchWhereUniqueInput[]
    disconnect?: BenchWhereUniqueInput | BenchWhereUniqueInput[]
    delete?: BenchWhereUniqueInput | BenchWhereUniqueInput[]
    connect?: BenchWhereUniqueInput | BenchWhereUniqueInput[]
    update?: BenchUpdateWithWhereUniqueWithoutRoomInput | BenchUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: BenchUpdateManyWithWhereWithoutRoomInput | BenchUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: BenchScalarWhereInput | BenchScalarWhereInput[]
  }

  export type RoomAssignmentUpdateManyWithoutRoomNestedInput = {
    create?: XOR<RoomAssignmentCreateWithoutRoomInput, RoomAssignmentUncheckedCreateWithoutRoomInput> | RoomAssignmentCreateWithoutRoomInput[] | RoomAssignmentUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomAssignmentCreateOrConnectWithoutRoomInput | RoomAssignmentCreateOrConnectWithoutRoomInput[]
    upsert?: RoomAssignmentUpsertWithWhereUniqueWithoutRoomInput | RoomAssignmentUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: RoomAssignmentCreateManyRoomInputEnvelope
    set?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    disconnect?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    delete?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    connect?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    update?: RoomAssignmentUpdateWithWhereUniqueWithoutRoomInput | RoomAssignmentUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: RoomAssignmentUpdateManyWithWhereWithoutRoomInput | RoomAssignmentUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: RoomAssignmentScalarWhereInput | RoomAssignmentScalarWhereInput[]
  }

  export type BenchUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<BenchCreateWithoutRoomInput, BenchUncheckedCreateWithoutRoomInput> | BenchCreateWithoutRoomInput[] | BenchUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: BenchCreateOrConnectWithoutRoomInput | BenchCreateOrConnectWithoutRoomInput[]
    upsert?: BenchUpsertWithWhereUniqueWithoutRoomInput | BenchUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: BenchCreateManyRoomInputEnvelope
    set?: BenchWhereUniqueInput | BenchWhereUniqueInput[]
    disconnect?: BenchWhereUniqueInput | BenchWhereUniqueInput[]
    delete?: BenchWhereUniqueInput | BenchWhereUniqueInput[]
    connect?: BenchWhereUniqueInput | BenchWhereUniqueInput[]
    update?: BenchUpdateWithWhereUniqueWithoutRoomInput | BenchUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: BenchUpdateManyWithWhereWithoutRoomInput | BenchUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: BenchScalarWhereInput | BenchScalarWhereInput[]
  }

  export type RoomAssignmentUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<RoomAssignmentCreateWithoutRoomInput, RoomAssignmentUncheckedCreateWithoutRoomInput> | RoomAssignmentCreateWithoutRoomInput[] | RoomAssignmentUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomAssignmentCreateOrConnectWithoutRoomInput | RoomAssignmentCreateOrConnectWithoutRoomInput[]
    upsert?: RoomAssignmentUpsertWithWhereUniqueWithoutRoomInput | RoomAssignmentUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: RoomAssignmentCreateManyRoomInputEnvelope
    set?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    disconnect?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    delete?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    connect?: RoomAssignmentWhereUniqueInput | RoomAssignmentWhereUniqueInput[]
    update?: RoomAssignmentUpdateWithWhereUniqueWithoutRoomInput | RoomAssignmentUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: RoomAssignmentUpdateManyWithWhereWithoutRoomInput | RoomAssignmentUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: RoomAssignmentScalarWhereInput | RoomAssignmentScalarWhereInput[]
  }

  export type RoomCreateNestedOneWithoutBenchesInput = {
    create?: XOR<RoomCreateWithoutBenchesInput, RoomUncheckedCreateWithoutBenchesInput>
    connectOrCreate?: RoomCreateOrConnectWithoutBenchesInput
    connect?: RoomWhereUniqueInput
  }

  export type SeatCreateNestedManyWithoutBenchInput = {
    create?: XOR<SeatCreateWithoutBenchInput, SeatUncheckedCreateWithoutBenchInput> | SeatCreateWithoutBenchInput[] | SeatUncheckedCreateWithoutBenchInput[]
    connectOrCreate?: SeatCreateOrConnectWithoutBenchInput | SeatCreateOrConnectWithoutBenchInput[]
    createMany?: SeatCreateManyBenchInputEnvelope
    connect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
  }

  export type SeatUncheckedCreateNestedManyWithoutBenchInput = {
    create?: XOR<SeatCreateWithoutBenchInput, SeatUncheckedCreateWithoutBenchInput> | SeatCreateWithoutBenchInput[] | SeatUncheckedCreateWithoutBenchInput[]
    connectOrCreate?: SeatCreateOrConnectWithoutBenchInput | SeatCreateOrConnectWithoutBenchInput[]
    createMany?: SeatCreateManyBenchInputEnvelope
    connect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
  }

  export type RoomUpdateOneRequiredWithoutBenchesNestedInput = {
    create?: XOR<RoomCreateWithoutBenchesInput, RoomUncheckedCreateWithoutBenchesInput>
    connectOrCreate?: RoomCreateOrConnectWithoutBenchesInput
    upsert?: RoomUpsertWithoutBenchesInput
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutBenchesInput, RoomUpdateWithoutBenchesInput>, RoomUncheckedUpdateWithoutBenchesInput>
  }

  export type SeatUpdateManyWithoutBenchNestedInput = {
    create?: XOR<SeatCreateWithoutBenchInput, SeatUncheckedCreateWithoutBenchInput> | SeatCreateWithoutBenchInput[] | SeatUncheckedCreateWithoutBenchInput[]
    connectOrCreate?: SeatCreateOrConnectWithoutBenchInput | SeatCreateOrConnectWithoutBenchInput[]
    upsert?: SeatUpsertWithWhereUniqueWithoutBenchInput | SeatUpsertWithWhereUniqueWithoutBenchInput[]
    createMany?: SeatCreateManyBenchInputEnvelope
    set?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    disconnect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    delete?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    connect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    update?: SeatUpdateWithWhereUniqueWithoutBenchInput | SeatUpdateWithWhereUniqueWithoutBenchInput[]
    updateMany?: SeatUpdateManyWithWhereWithoutBenchInput | SeatUpdateManyWithWhereWithoutBenchInput[]
    deleteMany?: SeatScalarWhereInput | SeatScalarWhereInput[]
  }

  export type SeatUncheckedUpdateManyWithoutBenchNestedInput = {
    create?: XOR<SeatCreateWithoutBenchInput, SeatUncheckedCreateWithoutBenchInput> | SeatCreateWithoutBenchInput[] | SeatUncheckedCreateWithoutBenchInput[]
    connectOrCreate?: SeatCreateOrConnectWithoutBenchInput | SeatCreateOrConnectWithoutBenchInput[]
    upsert?: SeatUpsertWithWhereUniqueWithoutBenchInput | SeatUpsertWithWhereUniqueWithoutBenchInput[]
    createMany?: SeatCreateManyBenchInputEnvelope
    set?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    disconnect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    delete?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    connect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    update?: SeatUpdateWithWhereUniqueWithoutBenchInput | SeatUpdateWithWhereUniqueWithoutBenchInput[]
    updateMany?: SeatUpdateManyWithWhereWithoutBenchInput | SeatUpdateManyWithWhereWithoutBenchInput[]
    deleteMany?: SeatScalarWhereInput | SeatScalarWhereInput[]
  }

  export type BenchCreateNestedOneWithoutSeatsInput = {
    create?: XOR<BenchCreateWithoutSeatsInput, BenchUncheckedCreateWithoutSeatsInput>
    connectOrCreate?: BenchCreateOrConnectWithoutSeatsInput
    connect?: BenchWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutSeatInput = {
    create?: XOR<StudentCreateWithoutSeatInput, StudentUncheckedCreateWithoutSeatInput>
    connectOrCreate?: StudentCreateOrConnectWithoutSeatInput
    connect?: StudentWhereUniqueInput
  }

  export type SeatingPlanCreateNestedOneWithoutSeatsInput = {
    create?: XOR<SeatingPlanCreateWithoutSeatsInput, SeatingPlanUncheckedCreateWithoutSeatsInput>
    connectOrCreate?: SeatingPlanCreateOrConnectWithoutSeatsInput
    connect?: SeatingPlanWhereUniqueInput
  }

  export type BenchUpdateOneRequiredWithoutSeatsNestedInput = {
    create?: XOR<BenchCreateWithoutSeatsInput, BenchUncheckedCreateWithoutSeatsInput>
    connectOrCreate?: BenchCreateOrConnectWithoutSeatsInput
    upsert?: BenchUpsertWithoutSeatsInput
    connect?: BenchWhereUniqueInput
    update?: XOR<XOR<BenchUpdateToOneWithWhereWithoutSeatsInput, BenchUpdateWithoutSeatsInput>, BenchUncheckedUpdateWithoutSeatsInput>
  }

  export type StudentUpdateOneRequiredWithoutSeatNestedInput = {
    create?: XOR<StudentCreateWithoutSeatInput, StudentUncheckedCreateWithoutSeatInput>
    connectOrCreate?: StudentCreateOrConnectWithoutSeatInput
    upsert?: StudentUpsertWithoutSeatInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutSeatInput, StudentUpdateWithoutSeatInput>, StudentUncheckedUpdateWithoutSeatInput>
  }

  export type SeatingPlanUpdateOneWithoutSeatsNestedInput = {
    create?: XOR<SeatingPlanCreateWithoutSeatsInput, SeatingPlanUncheckedCreateWithoutSeatsInput>
    connectOrCreate?: SeatingPlanCreateOrConnectWithoutSeatsInput
    upsert?: SeatingPlanUpsertWithoutSeatsInput
    disconnect?: SeatingPlanWhereInput | boolean
    delete?: SeatingPlanWhereInput | boolean
    connect?: SeatingPlanWhereUniqueInput
    update?: XOR<XOR<SeatingPlanUpdateToOneWithWhereWithoutSeatsInput, SeatingPlanUpdateWithoutSeatsInput>, SeatingPlanUncheckedUpdateWithoutSeatsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RoomCreateNestedOneWithoutRoomAssignmentsInput = {
    create?: XOR<RoomCreateWithoutRoomAssignmentsInput, RoomUncheckedCreateWithoutRoomAssignmentsInput>
    connectOrCreate?: RoomCreateOrConnectWithoutRoomAssignmentsInput
    connect?: RoomWhereUniqueInput
  }

  export type ExamCreateNestedOneWithoutRoomAssignmentsInput = {
    create?: XOR<ExamCreateWithoutRoomAssignmentsInput, ExamUncheckedCreateWithoutRoomAssignmentsInput>
    connectOrCreate?: ExamCreateOrConnectWithoutRoomAssignmentsInput
    connect?: ExamWhereUniqueInput
  }

  export type InvigilatorAssignmentCreateNestedManyWithoutRoomAssignmentInput = {
    create?: XOR<InvigilatorAssignmentCreateWithoutRoomAssignmentInput, InvigilatorAssignmentUncheckedCreateWithoutRoomAssignmentInput> | InvigilatorAssignmentCreateWithoutRoomAssignmentInput[] | InvigilatorAssignmentUncheckedCreateWithoutRoomAssignmentInput[]
    connectOrCreate?: InvigilatorAssignmentCreateOrConnectWithoutRoomAssignmentInput | InvigilatorAssignmentCreateOrConnectWithoutRoomAssignmentInput[]
    createMany?: InvigilatorAssignmentCreateManyRoomAssignmentInputEnvelope
    connect?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
  }

  export type InvigilatorAssignmentUncheckedCreateNestedManyWithoutRoomAssignmentInput = {
    create?: XOR<InvigilatorAssignmentCreateWithoutRoomAssignmentInput, InvigilatorAssignmentUncheckedCreateWithoutRoomAssignmentInput> | InvigilatorAssignmentCreateWithoutRoomAssignmentInput[] | InvigilatorAssignmentUncheckedCreateWithoutRoomAssignmentInput[]
    connectOrCreate?: InvigilatorAssignmentCreateOrConnectWithoutRoomAssignmentInput | InvigilatorAssignmentCreateOrConnectWithoutRoomAssignmentInput[]
    createMany?: InvigilatorAssignmentCreateManyRoomAssignmentInputEnvelope
    connect?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type RoomUpdateOneRequiredWithoutRoomAssignmentsNestedInput = {
    create?: XOR<RoomCreateWithoutRoomAssignmentsInput, RoomUncheckedCreateWithoutRoomAssignmentsInput>
    connectOrCreate?: RoomCreateOrConnectWithoutRoomAssignmentsInput
    upsert?: RoomUpsertWithoutRoomAssignmentsInput
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutRoomAssignmentsInput, RoomUpdateWithoutRoomAssignmentsInput>, RoomUncheckedUpdateWithoutRoomAssignmentsInput>
  }

  export type ExamUpdateOneRequiredWithoutRoomAssignmentsNestedInput = {
    create?: XOR<ExamCreateWithoutRoomAssignmentsInput, ExamUncheckedCreateWithoutRoomAssignmentsInput>
    connectOrCreate?: ExamCreateOrConnectWithoutRoomAssignmentsInput
    upsert?: ExamUpsertWithoutRoomAssignmentsInput
    connect?: ExamWhereUniqueInput
    update?: XOR<XOR<ExamUpdateToOneWithWhereWithoutRoomAssignmentsInput, ExamUpdateWithoutRoomAssignmentsInput>, ExamUncheckedUpdateWithoutRoomAssignmentsInput>
  }

  export type InvigilatorAssignmentUpdateManyWithoutRoomAssignmentNestedInput = {
    create?: XOR<InvigilatorAssignmentCreateWithoutRoomAssignmentInput, InvigilatorAssignmentUncheckedCreateWithoutRoomAssignmentInput> | InvigilatorAssignmentCreateWithoutRoomAssignmentInput[] | InvigilatorAssignmentUncheckedCreateWithoutRoomAssignmentInput[]
    connectOrCreate?: InvigilatorAssignmentCreateOrConnectWithoutRoomAssignmentInput | InvigilatorAssignmentCreateOrConnectWithoutRoomAssignmentInput[]
    upsert?: InvigilatorAssignmentUpsertWithWhereUniqueWithoutRoomAssignmentInput | InvigilatorAssignmentUpsertWithWhereUniqueWithoutRoomAssignmentInput[]
    createMany?: InvigilatorAssignmentCreateManyRoomAssignmentInputEnvelope
    set?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    disconnect?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    delete?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    connect?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    update?: InvigilatorAssignmentUpdateWithWhereUniqueWithoutRoomAssignmentInput | InvigilatorAssignmentUpdateWithWhereUniqueWithoutRoomAssignmentInput[]
    updateMany?: InvigilatorAssignmentUpdateManyWithWhereWithoutRoomAssignmentInput | InvigilatorAssignmentUpdateManyWithWhereWithoutRoomAssignmentInput[]
    deleteMany?: InvigilatorAssignmentScalarWhereInput | InvigilatorAssignmentScalarWhereInput[]
  }

  export type InvigilatorAssignmentUncheckedUpdateManyWithoutRoomAssignmentNestedInput = {
    create?: XOR<InvigilatorAssignmentCreateWithoutRoomAssignmentInput, InvigilatorAssignmentUncheckedCreateWithoutRoomAssignmentInput> | InvigilatorAssignmentCreateWithoutRoomAssignmentInput[] | InvigilatorAssignmentUncheckedCreateWithoutRoomAssignmentInput[]
    connectOrCreate?: InvigilatorAssignmentCreateOrConnectWithoutRoomAssignmentInput | InvigilatorAssignmentCreateOrConnectWithoutRoomAssignmentInput[]
    upsert?: InvigilatorAssignmentUpsertWithWhereUniqueWithoutRoomAssignmentInput | InvigilatorAssignmentUpsertWithWhereUniqueWithoutRoomAssignmentInput[]
    createMany?: InvigilatorAssignmentCreateManyRoomAssignmentInputEnvelope
    set?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    disconnect?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    delete?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    connect?: InvigilatorAssignmentWhereUniqueInput | InvigilatorAssignmentWhereUniqueInput[]
    update?: InvigilatorAssignmentUpdateWithWhereUniqueWithoutRoomAssignmentInput | InvigilatorAssignmentUpdateWithWhereUniqueWithoutRoomAssignmentInput[]
    updateMany?: InvigilatorAssignmentUpdateManyWithWhereWithoutRoomAssignmentInput | InvigilatorAssignmentUpdateManyWithWhereWithoutRoomAssignmentInput[]
    deleteMany?: InvigilatorAssignmentScalarWhereInput | InvigilatorAssignmentScalarWhereInput[]
  }

  export type InvigilatorCreateNestedOneWithoutInvigilatorAssignmentsInput = {
    create?: XOR<InvigilatorCreateWithoutInvigilatorAssignmentsInput, InvigilatorUncheckedCreateWithoutInvigilatorAssignmentsInput>
    connectOrCreate?: InvigilatorCreateOrConnectWithoutInvigilatorAssignmentsInput
    connect?: InvigilatorWhereUniqueInput
  }

  export type RoomAssignmentCreateNestedOneWithoutInvigilatorAssignmentsInput = {
    create?: XOR<RoomAssignmentCreateWithoutInvigilatorAssignmentsInput, RoomAssignmentUncheckedCreateWithoutInvigilatorAssignmentsInput>
    connectOrCreate?: RoomAssignmentCreateOrConnectWithoutInvigilatorAssignmentsInput
    connect?: RoomAssignmentWhereUniqueInput
  }

  export type InvigilatorUpdateOneRequiredWithoutInvigilatorAssignmentsNestedInput = {
    create?: XOR<InvigilatorCreateWithoutInvigilatorAssignmentsInput, InvigilatorUncheckedCreateWithoutInvigilatorAssignmentsInput>
    connectOrCreate?: InvigilatorCreateOrConnectWithoutInvigilatorAssignmentsInput
    upsert?: InvigilatorUpsertWithoutInvigilatorAssignmentsInput
    connect?: InvigilatorWhereUniqueInput
    update?: XOR<XOR<InvigilatorUpdateToOneWithWhereWithoutInvigilatorAssignmentsInput, InvigilatorUpdateWithoutInvigilatorAssignmentsInput>, InvigilatorUncheckedUpdateWithoutInvigilatorAssignmentsInput>
  }

  export type RoomAssignmentUpdateOneRequiredWithoutInvigilatorAssignmentsNestedInput = {
    create?: XOR<RoomAssignmentCreateWithoutInvigilatorAssignmentsInput, RoomAssignmentUncheckedCreateWithoutInvigilatorAssignmentsInput>
    connectOrCreate?: RoomAssignmentCreateOrConnectWithoutInvigilatorAssignmentsInput
    upsert?: RoomAssignmentUpsertWithoutInvigilatorAssignmentsInput
    connect?: RoomAssignmentWhereUniqueInput
    update?: XOR<XOR<RoomAssignmentUpdateToOneWithWhereWithoutInvigilatorAssignmentsInput, RoomAssignmentUpdateWithoutInvigilatorAssignmentsInput>, RoomAssignmentUncheckedUpdateWithoutInvigilatorAssignmentsInput>
  }

  export type ExamCreateNestedOneWithoutSeatingPlansInput = {
    create?: XOR<ExamCreateWithoutSeatingPlansInput, ExamUncheckedCreateWithoutSeatingPlansInput>
    connectOrCreate?: ExamCreateOrConnectWithoutSeatingPlansInput
    connect?: ExamWhereUniqueInput
  }

  export type SeatCreateNestedManyWithoutSeatingPlanInput = {
    create?: XOR<SeatCreateWithoutSeatingPlanInput, SeatUncheckedCreateWithoutSeatingPlanInput> | SeatCreateWithoutSeatingPlanInput[] | SeatUncheckedCreateWithoutSeatingPlanInput[]
    connectOrCreate?: SeatCreateOrConnectWithoutSeatingPlanInput | SeatCreateOrConnectWithoutSeatingPlanInput[]
    createMany?: SeatCreateManySeatingPlanInputEnvelope
    connect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
  }

  export type SeatUncheckedCreateNestedManyWithoutSeatingPlanInput = {
    create?: XOR<SeatCreateWithoutSeatingPlanInput, SeatUncheckedCreateWithoutSeatingPlanInput> | SeatCreateWithoutSeatingPlanInput[] | SeatUncheckedCreateWithoutSeatingPlanInput[]
    connectOrCreate?: SeatCreateOrConnectWithoutSeatingPlanInput | SeatCreateOrConnectWithoutSeatingPlanInput[]
    createMany?: SeatCreateManySeatingPlanInputEnvelope
    connect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
  }

  export type ExamUpdateOneRequiredWithoutSeatingPlansNestedInput = {
    create?: XOR<ExamCreateWithoutSeatingPlansInput, ExamUncheckedCreateWithoutSeatingPlansInput>
    connectOrCreate?: ExamCreateOrConnectWithoutSeatingPlansInput
    upsert?: ExamUpsertWithoutSeatingPlansInput
    connect?: ExamWhereUniqueInput
    update?: XOR<XOR<ExamUpdateToOneWithWhereWithoutSeatingPlansInput, ExamUpdateWithoutSeatingPlansInput>, ExamUncheckedUpdateWithoutSeatingPlansInput>
  }

  export type SeatUpdateManyWithoutSeatingPlanNestedInput = {
    create?: XOR<SeatCreateWithoutSeatingPlanInput, SeatUncheckedCreateWithoutSeatingPlanInput> | SeatCreateWithoutSeatingPlanInput[] | SeatUncheckedCreateWithoutSeatingPlanInput[]
    connectOrCreate?: SeatCreateOrConnectWithoutSeatingPlanInput | SeatCreateOrConnectWithoutSeatingPlanInput[]
    upsert?: SeatUpsertWithWhereUniqueWithoutSeatingPlanInput | SeatUpsertWithWhereUniqueWithoutSeatingPlanInput[]
    createMany?: SeatCreateManySeatingPlanInputEnvelope
    set?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    disconnect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    delete?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    connect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    update?: SeatUpdateWithWhereUniqueWithoutSeatingPlanInput | SeatUpdateWithWhereUniqueWithoutSeatingPlanInput[]
    updateMany?: SeatUpdateManyWithWhereWithoutSeatingPlanInput | SeatUpdateManyWithWhereWithoutSeatingPlanInput[]
    deleteMany?: SeatScalarWhereInput | SeatScalarWhereInput[]
  }

  export type SeatUncheckedUpdateManyWithoutSeatingPlanNestedInput = {
    create?: XOR<SeatCreateWithoutSeatingPlanInput, SeatUncheckedCreateWithoutSeatingPlanInput> | SeatCreateWithoutSeatingPlanInput[] | SeatUncheckedCreateWithoutSeatingPlanInput[]
    connectOrCreate?: SeatCreateOrConnectWithoutSeatingPlanInput | SeatCreateOrConnectWithoutSeatingPlanInput[]
    upsert?: SeatUpsertWithWhereUniqueWithoutSeatingPlanInput | SeatUpsertWithWhereUniqueWithoutSeatingPlanInput[]
    createMany?: SeatCreateManySeatingPlanInputEnvelope
    set?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    disconnect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    delete?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    connect?: SeatWhereUniqueInput | SeatWhereUniqueInput[]
    update?: SeatUpdateWithWhereUniqueWithoutSeatingPlanInput | SeatUpdateWithWhereUniqueWithoutSeatingPlanInput[]
    updateMany?: SeatUpdateManyWithWhereWithoutSeatingPlanInput | SeatUpdateManyWithWhereWithoutSeatingPlanInput[]
    deleteMany?: SeatScalarWhereInput | SeatScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type InvigilatorCreateWithoutUserInput = {
    course: string
    phone: string
    address: string
    gender: string
    createdAt?: Date | string
    updatedAt?: Date | string
    invigilatorAssignments?: InvigilatorAssignmentCreateNestedManyWithoutInvigilatorInput
  }

  export type InvigilatorUncheckedCreateWithoutUserInput = {
    id?: number
    course: string
    phone: string
    address: string
    gender: string
    createdAt?: Date | string
    updatedAt?: Date | string
    invigilatorAssignments?: InvigilatorAssignmentUncheckedCreateNestedManyWithoutInvigilatorInput
  }

  export type InvigilatorCreateOrConnectWithoutUserInput = {
    where: InvigilatorWhereUniqueInput
    create: XOR<InvigilatorCreateWithoutUserInput, InvigilatorUncheckedCreateWithoutUserInput>
  }

  export type InvigilatorUpsertWithoutUserInput = {
    update: XOR<InvigilatorUpdateWithoutUserInput, InvigilatorUncheckedUpdateWithoutUserInput>
    create: XOR<InvigilatorCreateWithoutUserInput, InvigilatorUncheckedCreateWithoutUserInput>
    where?: InvigilatorWhereInput
  }

  export type InvigilatorUpdateToOneWithWhereWithoutUserInput = {
    where?: InvigilatorWhereInput
    data: XOR<InvigilatorUpdateWithoutUserInput, InvigilatorUncheckedUpdateWithoutUserInput>
  }

  export type InvigilatorUpdateWithoutUserInput = {
    course?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invigilatorAssignments?: InvigilatorAssignmentUpdateManyWithoutInvigilatorNestedInput
  }

  export type InvigilatorUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    course?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invigilatorAssignments?: InvigilatorAssignmentUncheckedUpdateManyWithoutInvigilatorNestedInput
  }

  export type UserCreateWithoutInvigilatorInput = {
    name: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutInvigilatorInput = {
    id?: number
    name: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutInvigilatorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvigilatorInput, UserUncheckedCreateWithoutInvigilatorInput>
  }

  export type InvigilatorAssignmentCreateWithoutInvigilatorInput = {
    status?: string
    assignedAt?: Date | string
    completedAt?: Date | string | null
    roomAssignment: RoomAssignmentCreateNestedOneWithoutInvigilatorAssignmentsInput
  }

  export type InvigilatorAssignmentUncheckedCreateWithoutInvigilatorInput = {
    id?: number
    roomAssignmentId: number
    status?: string
    assignedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type InvigilatorAssignmentCreateOrConnectWithoutInvigilatorInput = {
    where: InvigilatorAssignmentWhereUniqueInput
    create: XOR<InvigilatorAssignmentCreateWithoutInvigilatorInput, InvigilatorAssignmentUncheckedCreateWithoutInvigilatorInput>
  }

  export type InvigilatorAssignmentCreateManyInvigilatorInputEnvelope = {
    data: InvigilatorAssignmentCreateManyInvigilatorInput | InvigilatorAssignmentCreateManyInvigilatorInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutInvigilatorInput = {
    update: XOR<UserUpdateWithoutInvigilatorInput, UserUncheckedUpdateWithoutInvigilatorInput>
    create: XOR<UserCreateWithoutInvigilatorInput, UserUncheckedCreateWithoutInvigilatorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvigilatorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvigilatorInput, UserUncheckedUpdateWithoutInvigilatorInput>
  }

  export type UserUpdateWithoutInvigilatorInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutInvigilatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvigilatorAssignmentUpsertWithWhereUniqueWithoutInvigilatorInput = {
    where: InvigilatorAssignmentWhereUniqueInput
    update: XOR<InvigilatorAssignmentUpdateWithoutInvigilatorInput, InvigilatorAssignmentUncheckedUpdateWithoutInvigilatorInput>
    create: XOR<InvigilatorAssignmentCreateWithoutInvigilatorInput, InvigilatorAssignmentUncheckedCreateWithoutInvigilatorInput>
  }

  export type InvigilatorAssignmentUpdateWithWhereUniqueWithoutInvigilatorInput = {
    where: InvigilatorAssignmentWhereUniqueInput
    data: XOR<InvigilatorAssignmentUpdateWithoutInvigilatorInput, InvigilatorAssignmentUncheckedUpdateWithoutInvigilatorInput>
  }

  export type InvigilatorAssignmentUpdateManyWithWhereWithoutInvigilatorInput = {
    where: InvigilatorAssignmentScalarWhereInput
    data: XOR<InvigilatorAssignmentUpdateManyMutationInput, InvigilatorAssignmentUncheckedUpdateManyWithoutInvigilatorInput>
  }

  export type InvigilatorAssignmentScalarWhereInput = {
    AND?: InvigilatorAssignmentScalarWhereInput | InvigilatorAssignmentScalarWhereInput[]
    OR?: InvigilatorAssignmentScalarWhereInput[]
    NOT?: InvigilatorAssignmentScalarWhereInput | InvigilatorAssignmentScalarWhereInput[]
    id?: IntFilter<"InvigilatorAssignment"> | number
    invigilatorId?: IntFilter<"InvigilatorAssignment"> | number
    roomAssignmentId?: IntFilter<"InvigilatorAssignment"> | number
    status?: StringFilter<"InvigilatorAssignment"> | string
    assignedAt?: DateTimeFilter<"InvigilatorAssignment"> | Date | string
    completedAt?: DateTimeNullableFilter<"InvigilatorAssignment"> | Date | string | null
  }

  export type SemesterCreateWithoutCourseInput = {
    semesterNum: number
    subjects?: SubjectCreateNestedManyWithoutSemesterInput
    students?: StudentCreateNestedManyWithoutSemesterInput
  }

  export type SemesterUncheckedCreateWithoutCourseInput = {
    id?: number
    semesterNum: number
    subjects?: SubjectUncheckedCreateNestedManyWithoutSemesterInput
    students?: StudentUncheckedCreateNestedManyWithoutSemesterInput
  }

  export type SemesterCreateOrConnectWithoutCourseInput = {
    where: SemesterWhereUniqueInput
    create: XOR<SemesterCreateWithoutCourseInput, SemesterUncheckedCreateWithoutCourseInput>
  }

  export type SemesterCreateManyCourseInputEnvelope = {
    data: SemesterCreateManyCourseInput | SemesterCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutCourseInput = {
    name: string
    symbolNumber: string
    regNumber: string
    college: string
    createdAt?: Date | string
    updatedAt?: Date | string
    semester: SemesterCreateNestedOneWithoutStudentsInput
    seat?: SeatCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutCourseInput = {
    id?: number
    name: string
    symbolNumber: string
    regNumber: string
    college: string
    semesterId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    seat?: SeatUncheckedCreateNestedOneWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutCourseInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutCourseInput, StudentUncheckedCreateWithoutCourseInput>
  }

  export type StudentCreateManyCourseInputEnvelope = {
    data: StudentCreateManyCourseInput | StudentCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type SemesterUpsertWithWhereUniqueWithoutCourseInput = {
    where: SemesterWhereUniqueInput
    update: XOR<SemesterUpdateWithoutCourseInput, SemesterUncheckedUpdateWithoutCourseInput>
    create: XOR<SemesterCreateWithoutCourseInput, SemesterUncheckedCreateWithoutCourseInput>
  }

  export type SemesterUpdateWithWhereUniqueWithoutCourseInput = {
    where: SemesterWhereUniqueInput
    data: XOR<SemesterUpdateWithoutCourseInput, SemesterUncheckedUpdateWithoutCourseInput>
  }

  export type SemesterUpdateManyWithWhereWithoutCourseInput = {
    where: SemesterScalarWhereInput
    data: XOR<SemesterUpdateManyMutationInput, SemesterUncheckedUpdateManyWithoutCourseInput>
  }

  export type SemesterScalarWhereInput = {
    AND?: SemesterScalarWhereInput | SemesterScalarWhereInput[]
    OR?: SemesterScalarWhereInput[]
    NOT?: SemesterScalarWhereInput | SemesterScalarWhereInput[]
    id?: IntFilter<"Semester"> | number
    semesterNum?: IntFilter<"Semester"> | number
    courseId?: IntFilter<"Semester"> | number
  }

  export type StudentUpsertWithWhereUniqueWithoutCourseInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutCourseInput, StudentUncheckedUpdateWithoutCourseInput>
    create: XOR<StudentCreateWithoutCourseInput, StudentUncheckedCreateWithoutCourseInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutCourseInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutCourseInput, StudentUncheckedUpdateWithoutCourseInput>
  }

  export type StudentUpdateManyWithWhereWithoutCourseInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutCourseInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    id?: IntFilter<"Student"> | number
    name?: StringFilter<"Student"> | string
    symbolNumber?: StringFilter<"Student"> | string
    regNumber?: StringFilter<"Student"> | string
    college?: StringFilter<"Student"> | string
    courseId?: IntFilter<"Student"> | number
    semesterId?: IntFilter<"Student"> | number
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
  }

  export type CourseCreateWithoutSemestersInput = {
    name: string
    duration: number
    students?: StudentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutSemestersInput = {
    id?: number
    name: string
    duration: number
    students?: StudentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutSemestersInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutSemestersInput, CourseUncheckedCreateWithoutSemestersInput>
  }

  export type SubjectCreateWithoutSemesterInput = {
    name: string
    code: string
    exams?: ExamCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutSemesterInput = {
    id?: number
    name: string
    code: string
    exams?: ExamUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutSemesterInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutSemesterInput, SubjectUncheckedCreateWithoutSemesterInput>
  }

  export type SubjectCreateManySemesterInputEnvelope = {
    data: SubjectCreateManySemesterInput | SubjectCreateManySemesterInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutSemesterInput = {
    name: string
    symbolNumber: string
    regNumber: string
    college: string
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutStudentsInput
    seat?: SeatCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutSemesterInput = {
    id?: number
    name: string
    symbolNumber: string
    regNumber: string
    college: string
    courseId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    seat?: SeatUncheckedCreateNestedOneWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutSemesterInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutSemesterInput, StudentUncheckedCreateWithoutSemesterInput>
  }

  export type StudentCreateManySemesterInputEnvelope = {
    data: StudentCreateManySemesterInput | StudentCreateManySemesterInput[]
    skipDuplicates?: boolean
  }

  export type CourseUpsertWithoutSemestersInput = {
    update: XOR<CourseUpdateWithoutSemestersInput, CourseUncheckedUpdateWithoutSemestersInput>
    create: XOR<CourseCreateWithoutSemestersInput, CourseUncheckedCreateWithoutSemestersInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutSemestersInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutSemestersInput, CourseUncheckedUpdateWithoutSemestersInput>
  }

  export type CourseUpdateWithoutSemestersInput = {
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    students?: StudentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutSemestersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    students?: StudentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type SubjectUpsertWithWhereUniqueWithoutSemesterInput = {
    where: SubjectWhereUniqueInput
    update: XOR<SubjectUpdateWithoutSemesterInput, SubjectUncheckedUpdateWithoutSemesterInput>
    create: XOR<SubjectCreateWithoutSemesterInput, SubjectUncheckedCreateWithoutSemesterInput>
  }

  export type SubjectUpdateWithWhereUniqueWithoutSemesterInput = {
    where: SubjectWhereUniqueInput
    data: XOR<SubjectUpdateWithoutSemesterInput, SubjectUncheckedUpdateWithoutSemesterInput>
  }

  export type SubjectUpdateManyWithWhereWithoutSemesterInput = {
    where: SubjectScalarWhereInput
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyWithoutSemesterInput>
  }

  export type SubjectScalarWhereInput = {
    AND?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    OR?: SubjectScalarWhereInput[]
    NOT?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    id?: IntFilter<"Subject"> | number
    name?: StringFilter<"Subject"> | string
    code?: StringFilter<"Subject"> | string
    semesterId?: IntFilter<"Subject"> | number
  }

  export type StudentUpsertWithWhereUniqueWithoutSemesterInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutSemesterInput, StudentUncheckedUpdateWithoutSemesterInput>
    create: XOR<StudentCreateWithoutSemesterInput, StudentUncheckedCreateWithoutSemesterInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutSemesterInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutSemesterInput, StudentUncheckedUpdateWithoutSemesterInput>
  }

  export type StudentUpdateManyWithWhereWithoutSemesterInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutSemesterInput>
  }

  export type SemesterCreateWithoutSubjectsInput = {
    semesterNum: number
    course: CourseCreateNestedOneWithoutSemestersInput
    students?: StudentCreateNestedManyWithoutSemesterInput
  }

  export type SemesterUncheckedCreateWithoutSubjectsInput = {
    id?: number
    semesterNum: number
    courseId: number
    students?: StudentUncheckedCreateNestedManyWithoutSemesterInput
  }

  export type SemesterCreateOrConnectWithoutSubjectsInput = {
    where: SemesterWhereUniqueInput
    create: XOR<SemesterCreateWithoutSubjectsInput, SemesterUncheckedCreateWithoutSubjectsInput>
  }

  export type ExamCreateWithoutSubjectInput = {
    date: Date | string
    startTime?: string | null
    endTime?: string | null
    roomAssignments?: RoomAssignmentCreateNestedManyWithoutExamInput
    seatingPlans?: SeatingPlanCreateNestedManyWithoutExamInput
  }

  export type ExamUncheckedCreateWithoutSubjectInput = {
    id?: number
    date: Date | string
    startTime?: string | null
    endTime?: string | null
    roomAssignments?: RoomAssignmentUncheckedCreateNestedManyWithoutExamInput
    seatingPlans?: SeatingPlanUncheckedCreateNestedManyWithoutExamInput
  }

  export type ExamCreateOrConnectWithoutSubjectInput = {
    where: ExamWhereUniqueInput
    create: XOR<ExamCreateWithoutSubjectInput, ExamUncheckedCreateWithoutSubjectInput>
  }

  export type ExamCreateManySubjectInputEnvelope = {
    data: ExamCreateManySubjectInput | ExamCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type SemesterUpsertWithoutSubjectsInput = {
    update: XOR<SemesterUpdateWithoutSubjectsInput, SemesterUncheckedUpdateWithoutSubjectsInput>
    create: XOR<SemesterCreateWithoutSubjectsInput, SemesterUncheckedCreateWithoutSubjectsInput>
    where?: SemesterWhereInput
  }

  export type SemesterUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: SemesterWhereInput
    data: XOR<SemesterUpdateWithoutSubjectsInput, SemesterUncheckedUpdateWithoutSubjectsInput>
  }

  export type SemesterUpdateWithoutSubjectsInput = {
    semesterNum?: IntFieldUpdateOperationsInput | number
    course?: CourseUpdateOneRequiredWithoutSemestersNestedInput
    students?: StudentUpdateManyWithoutSemesterNestedInput
  }

  export type SemesterUncheckedUpdateWithoutSubjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    semesterNum?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    students?: StudentUncheckedUpdateManyWithoutSemesterNestedInput
  }

  export type ExamUpsertWithWhereUniqueWithoutSubjectInput = {
    where: ExamWhereUniqueInput
    update: XOR<ExamUpdateWithoutSubjectInput, ExamUncheckedUpdateWithoutSubjectInput>
    create: XOR<ExamCreateWithoutSubjectInput, ExamUncheckedCreateWithoutSubjectInput>
  }

  export type ExamUpdateWithWhereUniqueWithoutSubjectInput = {
    where: ExamWhereUniqueInput
    data: XOR<ExamUpdateWithoutSubjectInput, ExamUncheckedUpdateWithoutSubjectInput>
  }

  export type ExamUpdateManyWithWhereWithoutSubjectInput = {
    where: ExamScalarWhereInput
    data: XOR<ExamUpdateManyMutationInput, ExamUncheckedUpdateManyWithoutSubjectInput>
  }

  export type ExamScalarWhereInput = {
    AND?: ExamScalarWhereInput | ExamScalarWhereInput[]
    OR?: ExamScalarWhereInput[]
    NOT?: ExamScalarWhereInput | ExamScalarWhereInput[]
    id?: IntFilter<"Exam"> | number
    date?: DateTimeFilter<"Exam"> | Date | string
    startTime?: StringNullableFilter<"Exam"> | string | null
    endTime?: StringNullableFilter<"Exam"> | string | null
    subjectId?: IntFilter<"Exam"> | number
  }

  export type CourseCreateWithoutStudentsInput = {
    name: string
    duration: number
    semesters?: SemesterCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutStudentsInput = {
    id?: number
    name: string
    duration: number
    semesters?: SemesterUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutStudentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput>
  }

  export type SemesterCreateWithoutStudentsInput = {
    semesterNum: number
    course: CourseCreateNestedOneWithoutSemestersInput
    subjects?: SubjectCreateNestedManyWithoutSemesterInput
  }

  export type SemesterUncheckedCreateWithoutStudentsInput = {
    id?: number
    semesterNum: number
    courseId: number
    subjects?: SubjectUncheckedCreateNestedManyWithoutSemesterInput
  }

  export type SemesterCreateOrConnectWithoutStudentsInput = {
    where: SemesterWhereUniqueInput
    create: XOR<SemesterCreateWithoutStudentsInput, SemesterUncheckedCreateWithoutStudentsInput>
  }

  export type SeatCreateWithoutStudentInput = {
    position: number
    bench: BenchCreateNestedOneWithoutSeatsInput
    seatingPlan?: SeatingPlanCreateNestedOneWithoutSeatsInput
  }

  export type SeatUncheckedCreateWithoutStudentInput = {
    id?: number
    benchId: number
    position: number
    seatingPlanId?: number | null
  }

  export type SeatCreateOrConnectWithoutStudentInput = {
    where: SeatWhereUniqueInput
    create: XOR<SeatCreateWithoutStudentInput, SeatUncheckedCreateWithoutStudentInput>
  }

  export type CourseUpsertWithoutStudentsInput = {
    update: XOR<CourseUpdateWithoutStudentsInput, CourseUncheckedUpdateWithoutStudentsInput>
    create: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutStudentsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutStudentsInput, CourseUncheckedUpdateWithoutStudentsInput>
  }

  export type CourseUpdateWithoutStudentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    semesters?: SemesterUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    semesters?: SemesterUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type SemesterUpsertWithoutStudentsInput = {
    update: XOR<SemesterUpdateWithoutStudentsInput, SemesterUncheckedUpdateWithoutStudentsInput>
    create: XOR<SemesterCreateWithoutStudentsInput, SemesterUncheckedCreateWithoutStudentsInput>
    where?: SemesterWhereInput
  }

  export type SemesterUpdateToOneWithWhereWithoutStudentsInput = {
    where?: SemesterWhereInput
    data: XOR<SemesterUpdateWithoutStudentsInput, SemesterUncheckedUpdateWithoutStudentsInput>
  }

  export type SemesterUpdateWithoutStudentsInput = {
    semesterNum?: IntFieldUpdateOperationsInput | number
    course?: CourseUpdateOneRequiredWithoutSemestersNestedInput
    subjects?: SubjectUpdateManyWithoutSemesterNestedInput
  }

  export type SemesterUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    semesterNum?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    subjects?: SubjectUncheckedUpdateManyWithoutSemesterNestedInput
  }

  export type SeatUpsertWithoutStudentInput = {
    update: XOR<SeatUpdateWithoutStudentInput, SeatUncheckedUpdateWithoutStudentInput>
    create: XOR<SeatCreateWithoutStudentInput, SeatUncheckedCreateWithoutStudentInput>
    where?: SeatWhereInput
  }

  export type SeatUpdateToOneWithWhereWithoutStudentInput = {
    where?: SeatWhereInput
    data: XOR<SeatUpdateWithoutStudentInput, SeatUncheckedUpdateWithoutStudentInput>
  }

  export type SeatUpdateWithoutStudentInput = {
    position?: IntFieldUpdateOperationsInput | number
    bench?: BenchUpdateOneRequiredWithoutSeatsNestedInput
    seatingPlan?: SeatingPlanUpdateOneWithoutSeatsNestedInput
  }

  export type SeatUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    benchId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    seatingPlanId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubjectCreateWithoutExamsInput = {
    name: string
    code: string
    semester: SemesterCreateNestedOneWithoutSubjectsInput
  }

  export type SubjectUncheckedCreateWithoutExamsInput = {
    id?: number
    name: string
    code: string
    semesterId: number
  }

  export type SubjectCreateOrConnectWithoutExamsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutExamsInput, SubjectUncheckedCreateWithoutExamsInput>
  }

  export type RoomAssignmentCreateWithoutExamInput = {
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    room: RoomCreateNestedOneWithoutRoomAssignmentsInput
    invigilatorAssignments?: InvigilatorAssignmentCreateNestedManyWithoutRoomAssignmentInput
  }

  export type RoomAssignmentUncheckedCreateWithoutExamInput = {
    id?: number
    roomId: number
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    invigilatorAssignments?: InvigilatorAssignmentUncheckedCreateNestedManyWithoutRoomAssignmentInput
  }

  export type RoomAssignmentCreateOrConnectWithoutExamInput = {
    where: RoomAssignmentWhereUniqueInput
    create: XOR<RoomAssignmentCreateWithoutExamInput, RoomAssignmentUncheckedCreateWithoutExamInput>
  }

  export type RoomAssignmentCreateManyExamInputEnvelope = {
    data: RoomAssignmentCreateManyExamInput | RoomAssignmentCreateManyExamInput[]
    skipDuplicates?: boolean
  }

  export type SeatingPlanCreateWithoutExamInput = {
    createdAt?: Date | string
    isActive?: boolean
    seats?: SeatCreateNestedManyWithoutSeatingPlanInput
  }

  export type SeatingPlanUncheckedCreateWithoutExamInput = {
    id?: number
    createdAt?: Date | string
    isActive?: boolean
    seats?: SeatUncheckedCreateNestedManyWithoutSeatingPlanInput
  }

  export type SeatingPlanCreateOrConnectWithoutExamInput = {
    where: SeatingPlanWhereUniqueInput
    create: XOR<SeatingPlanCreateWithoutExamInput, SeatingPlanUncheckedCreateWithoutExamInput>
  }

  export type SeatingPlanCreateManyExamInputEnvelope = {
    data: SeatingPlanCreateManyExamInput | SeatingPlanCreateManyExamInput[]
    skipDuplicates?: boolean
  }

  export type SubjectUpsertWithoutExamsInput = {
    update: XOR<SubjectUpdateWithoutExamsInput, SubjectUncheckedUpdateWithoutExamsInput>
    create: XOR<SubjectCreateWithoutExamsInput, SubjectUncheckedCreateWithoutExamsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutExamsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutExamsInput, SubjectUncheckedUpdateWithoutExamsInput>
  }

  export type SubjectUpdateWithoutExamsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    semester?: SemesterUpdateOneRequiredWithoutSubjectsNestedInput
  }

  export type SubjectUncheckedUpdateWithoutExamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    semesterId?: IntFieldUpdateOperationsInput | number
  }

  export type RoomAssignmentUpsertWithWhereUniqueWithoutExamInput = {
    where: RoomAssignmentWhereUniqueInput
    update: XOR<RoomAssignmentUpdateWithoutExamInput, RoomAssignmentUncheckedUpdateWithoutExamInput>
    create: XOR<RoomAssignmentCreateWithoutExamInput, RoomAssignmentUncheckedCreateWithoutExamInput>
  }

  export type RoomAssignmentUpdateWithWhereUniqueWithoutExamInput = {
    where: RoomAssignmentWhereUniqueInput
    data: XOR<RoomAssignmentUpdateWithoutExamInput, RoomAssignmentUncheckedUpdateWithoutExamInput>
  }

  export type RoomAssignmentUpdateManyWithWhereWithoutExamInput = {
    where: RoomAssignmentScalarWhereInput
    data: XOR<RoomAssignmentUpdateManyMutationInput, RoomAssignmentUncheckedUpdateManyWithoutExamInput>
  }

  export type RoomAssignmentScalarWhereInput = {
    AND?: RoomAssignmentScalarWhereInput | RoomAssignmentScalarWhereInput[]
    OR?: RoomAssignmentScalarWhereInput[]
    NOT?: RoomAssignmentScalarWhereInput | RoomAssignmentScalarWhereInput[]
    id?: IntFilter<"RoomAssignment"> | number
    roomId?: IntFilter<"RoomAssignment"> | number
    examId?: IntFilter<"RoomAssignment"> | number
    isActive?: BoolFilter<"RoomAssignment"> | boolean
    isCompleted?: BoolFilter<"RoomAssignment"> | boolean
    completedAt?: DateTimeNullableFilter<"RoomAssignment"> | Date | string | null
  }

  export type SeatingPlanUpsertWithWhereUniqueWithoutExamInput = {
    where: SeatingPlanWhereUniqueInput
    update: XOR<SeatingPlanUpdateWithoutExamInput, SeatingPlanUncheckedUpdateWithoutExamInput>
    create: XOR<SeatingPlanCreateWithoutExamInput, SeatingPlanUncheckedCreateWithoutExamInput>
  }

  export type SeatingPlanUpdateWithWhereUniqueWithoutExamInput = {
    where: SeatingPlanWhereUniqueInput
    data: XOR<SeatingPlanUpdateWithoutExamInput, SeatingPlanUncheckedUpdateWithoutExamInput>
  }

  export type SeatingPlanUpdateManyWithWhereWithoutExamInput = {
    where: SeatingPlanScalarWhereInput
    data: XOR<SeatingPlanUpdateManyMutationInput, SeatingPlanUncheckedUpdateManyWithoutExamInput>
  }

  export type SeatingPlanScalarWhereInput = {
    AND?: SeatingPlanScalarWhereInput | SeatingPlanScalarWhereInput[]
    OR?: SeatingPlanScalarWhereInput[]
    NOT?: SeatingPlanScalarWhereInput | SeatingPlanScalarWhereInput[]
    id?: IntFilter<"SeatingPlan"> | number
    examId?: IntFilter<"SeatingPlan"> | number
    createdAt?: DateTimeFilter<"SeatingPlan"> | Date | string
    isActive?: BoolFilter<"SeatingPlan"> | boolean
  }

  export type BenchCreateWithoutRoomInput = {
    benchNo: number
    capacity: number
    createdAt?: Date | string
    seats?: SeatCreateNestedManyWithoutBenchInput
  }

  export type BenchUncheckedCreateWithoutRoomInput = {
    id?: number
    benchNo: number
    capacity: number
    createdAt?: Date | string
    seats?: SeatUncheckedCreateNestedManyWithoutBenchInput
  }

  export type BenchCreateOrConnectWithoutRoomInput = {
    where: BenchWhereUniqueInput
    create: XOR<BenchCreateWithoutRoomInput, BenchUncheckedCreateWithoutRoomInput>
  }

  export type BenchCreateManyRoomInputEnvelope = {
    data: BenchCreateManyRoomInput | BenchCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type RoomAssignmentCreateWithoutRoomInput = {
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    exam: ExamCreateNestedOneWithoutRoomAssignmentsInput
    invigilatorAssignments?: InvigilatorAssignmentCreateNestedManyWithoutRoomAssignmentInput
  }

  export type RoomAssignmentUncheckedCreateWithoutRoomInput = {
    id?: number
    examId: number
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    invigilatorAssignments?: InvigilatorAssignmentUncheckedCreateNestedManyWithoutRoomAssignmentInput
  }

  export type RoomAssignmentCreateOrConnectWithoutRoomInput = {
    where: RoomAssignmentWhereUniqueInput
    create: XOR<RoomAssignmentCreateWithoutRoomInput, RoomAssignmentUncheckedCreateWithoutRoomInput>
  }

  export type RoomAssignmentCreateManyRoomInputEnvelope = {
    data: RoomAssignmentCreateManyRoomInput | RoomAssignmentCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type BenchUpsertWithWhereUniqueWithoutRoomInput = {
    where: BenchWhereUniqueInput
    update: XOR<BenchUpdateWithoutRoomInput, BenchUncheckedUpdateWithoutRoomInput>
    create: XOR<BenchCreateWithoutRoomInput, BenchUncheckedCreateWithoutRoomInput>
  }

  export type BenchUpdateWithWhereUniqueWithoutRoomInput = {
    where: BenchWhereUniqueInput
    data: XOR<BenchUpdateWithoutRoomInput, BenchUncheckedUpdateWithoutRoomInput>
  }

  export type BenchUpdateManyWithWhereWithoutRoomInput = {
    where: BenchScalarWhereInput
    data: XOR<BenchUpdateManyMutationInput, BenchUncheckedUpdateManyWithoutRoomInput>
  }

  export type BenchScalarWhereInput = {
    AND?: BenchScalarWhereInput | BenchScalarWhereInput[]
    OR?: BenchScalarWhereInput[]
    NOT?: BenchScalarWhereInput | BenchScalarWhereInput[]
    id?: IntFilter<"Bench"> | number
    roomId?: IntFilter<"Bench"> | number
    benchNo?: IntFilter<"Bench"> | number
    capacity?: IntFilter<"Bench"> | number
    createdAt?: DateTimeFilter<"Bench"> | Date | string
  }

  export type RoomAssignmentUpsertWithWhereUniqueWithoutRoomInput = {
    where: RoomAssignmentWhereUniqueInput
    update: XOR<RoomAssignmentUpdateWithoutRoomInput, RoomAssignmentUncheckedUpdateWithoutRoomInput>
    create: XOR<RoomAssignmentCreateWithoutRoomInput, RoomAssignmentUncheckedCreateWithoutRoomInput>
  }

  export type RoomAssignmentUpdateWithWhereUniqueWithoutRoomInput = {
    where: RoomAssignmentWhereUniqueInput
    data: XOR<RoomAssignmentUpdateWithoutRoomInput, RoomAssignmentUncheckedUpdateWithoutRoomInput>
  }

  export type RoomAssignmentUpdateManyWithWhereWithoutRoomInput = {
    where: RoomAssignmentScalarWhereInput
    data: XOR<RoomAssignmentUpdateManyMutationInput, RoomAssignmentUncheckedUpdateManyWithoutRoomInput>
  }

  export type RoomCreateWithoutBenchesInput = {
    roomNumber: string
    block?: string | null
    floor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    roomAssignments?: RoomAssignmentCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutBenchesInput = {
    id?: number
    roomNumber: string
    block?: string | null
    floor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    roomAssignments?: RoomAssignmentUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutBenchesInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutBenchesInput, RoomUncheckedCreateWithoutBenchesInput>
  }

  export type SeatCreateWithoutBenchInput = {
    position: number
    student: StudentCreateNestedOneWithoutSeatInput
    seatingPlan?: SeatingPlanCreateNestedOneWithoutSeatsInput
  }

  export type SeatUncheckedCreateWithoutBenchInput = {
    id?: number
    position: number
    studentId: number
    seatingPlanId?: number | null
  }

  export type SeatCreateOrConnectWithoutBenchInput = {
    where: SeatWhereUniqueInput
    create: XOR<SeatCreateWithoutBenchInput, SeatUncheckedCreateWithoutBenchInput>
  }

  export type SeatCreateManyBenchInputEnvelope = {
    data: SeatCreateManyBenchInput | SeatCreateManyBenchInput[]
    skipDuplicates?: boolean
  }

  export type RoomUpsertWithoutBenchesInput = {
    update: XOR<RoomUpdateWithoutBenchesInput, RoomUncheckedUpdateWithoutBenchesInput>
    create: XOR<RoomCreateWithoutBenchesInput, RoomUncheckedCreateWithoutBenchesInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutBenchesInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutBenchesInput, RoomUncheckedUpdateWithoutBenchesInput>
  }

  export type RoomUpdateWithoutBenchesInput = {
    roomNumber?: StringFieldUpdateOperationsInput | string
    block?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roomAssignments?: RoomAssignmentUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutBenchesInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomNumber?: StringFieldUpdateOperationsInput | string
    block?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roomAssignments?: RoomAssignmentUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type SeatUpsertWithWhereUniqueWithoutBenchInput = {
    where: SeatWhereUniqueInput
    update: XOR<SeatUpdateWithoutBenchInput, SeatUncheckedUpdateWithoutBenchInput>
    create: XOR<SeatCreateWithoutBenchInput, SeatUncheckedCreateWithoutBenchInput>
  }

  export type SeatUpdateWithWhereUniqueWithoutBenchInput = {
    where: SeatWhereUniqueInput
    data: XOR<SeatUpdateWithoutBenchInput, SeatUncheckedUpdateWithoutBenchInput>
  }

  export type SeatUpdateManyWithWhereWithoutBenchInput = {
    where: SeatScalarWhereInput
    data: XOR<SeatUpdateManyMutationInput, SeatUncheckedUpdateManyWithoutBenchInput>
  }

  export type SeatScalarWhereInput = {
    AND?: SeatScalarWhereInput | SeatScalarWhereInput[]
    OR?: SeatScalarWhereInput[]
    NOT?: SeatScalarWhereInput | SeatScalarWhereInput[]
    id?: IntFilter<"Seat"> | number
    benchId?: IntFilter<"Seat"> | number
    position?: IntFilter<"Seat"> | number
    studentId?: IntFilter<"Seat"> | number
    seatingPlanId?: IntNullableFilter<"Seat"> | number | null
  }

  export type BenchCreateWithoutSeatsInput = {
    benchNo: number
    capacity: number
    createdAt?: Date | string
    room: RoomCreateNestedOneWithoutBenchesInput
  }

  export type BenchUncheckedCreateWithoutSeatsInput = {
    id?: number
    roomId: number
    benchNo: number
    capacity: number
    createdAt?: Date | string
  }

  export type BenchCreateOrConnectWithoutSeatsInput = {
    where: BenchWhereUniqueInput
    create: XOR<BenchCreateWithoutSeatsInput, BenchUncheckedCreateWithoutSeatsInput>
  }

  export type StudentCreateWithoutSeatInput = {
    name: string
    symbolNumber: string
    regNumber: string
    college: string
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutStudentsInput
    semester: SemesterCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutSeatInput = {
    id?: number
    name: string
    symbolNumber: string
    regNumber: string
    college: string
    courseId: number
    semesterId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentCreateOrConnectWithoutSeatInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutSeatInput, StudentUncheckedCreateWithoutSeatInput>
  }

  export type SeatingPlanCreateWithoutSeatsInput = {
    createdAt?: Date | string
    isActive?: boolean
    exam: ExamCreateNestedOneWithoutSeatingPlansInput
  }

  export type SeatingPlanUncheckedCreateWithoutSeatsInput = {
    id?: number
    examId: number
    createdAt?: Date | string
    isActive?: boolean
  }

  export type SeatingPlanCreateOrConnectWithoutSeatsInput = {
    where: SeatingPlanWhereUniqueInput
    create: XOR<SeatingPlanCreateWithoutSeatsInput, SeatingPlanUncheckedCreateWithoutSeatsInput>
  }

  export type BenchUpsertWithoutSeatsInput = {
    update: XOR<BenchUpdateWithoutSeatsInput, BenchUncheckedUpdateWithoutSeatsInput>
    create: XOR<BenchCreateWithoutSeatsInput, BenchUncheckedCreateWithoutSeatsInput>
    where?: BenchWhereInput
  }

  export type BenchUpdateToOneWithWhereWithoutSeatsInput = {
    where?: BenchWhereInput
    data: XOR<BenchUpdateWithoutSeatsInput, BenchUncheckedUpdateWithoutSeatsInput>
  }

  export type BenchUpdateWithoutSeatsInput = {
    benchNo?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: RoomUpdateOneRequiredWithoutBenchesNestedInput
  }

  export type BenchUncheckedUpdateWithoutSeatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    benchNo?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUpsertWithoutSeatInput = {
    update: XOR<StudentUpdateWithoutSeatInput, StudentUncheckedUpdateWithoutSeatInput>
    create: XOR<StudentCreateWithoutSeatInput, StudentUncheckedCreateWithoutSeatInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutSeatInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutSeatInput, StudentUncheckedUpdateWithoutSeatInput>
  }

  export type StudentUpdateWithoutSeatInput = {
    name?: StringFieldUpdateOperationsInput | string
    symbolNumber?: StringFieldUpdateOperationsInput | string
    regNumber?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutStudentsNestedInput
    semester?: SemesterUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutSeatInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    symbolNumber?: StringFieldUpdateOperationsInput | string
    regNumber?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    courseId?: IntFieldUpdateOperationsInput | number
    semesterId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeatingPlanUpsertWithoutSeatsInput = {
    update: XOR<SeatingPlanUpdateWithoutSeatsInput, SeatingPlanUncheckedUpdateWithoutSeatsInput>
    create: XOR<SeatingPlanCreateWithoutSeatsInput, SeatingPlanUncheckedCreateWithoutSeatsInput>
    where?: SeatingPlanWhereInput
  }

  export type SeatingPlanUpdateToOneWithWhereWithoutSeatsInput = {
    where?: SeatingPlanWhereInput
    data: XOR<SeatingPlanUpdateWithoutSeatsInput, SeatingPlanUncheckedUpdateWithoutSeatsInput>
  }

  export type SeatingPlanUpdateWithoutSeatsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    exam?: ExamUpdateOneRequiredWithoutSeatingPlansNestedInput
  }

  export type SeatingPlanUncheckedUpdateWithoutSeatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoomCreateWithoutRoomAssignmentsInput = {
    roomNumber: string
    block?: string | null
    floor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    benches?: BenchCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutRoomAssignmentsInput = {
    id?: number
    roomNumber: string
    block?: string | null
    floor?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    benches?: BenchUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutRoomAssignmentsInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutRoomAssignmentsInput, RoomUncheckedCreateWithoutRoomAssignmentsInput>
  }

  export type ExamCreateWithoutRoomAssignmentsInput = {
    date: Date | string
    startTime?: string | null
    endTime?: string | null
    subject: SubjectCreateNestedOneWithoutExamsInput
    seatingPlans?: SeatingPlanCreateNestedManyWithoutExamInput
  }

  export type ExamUncheckedCreateWithoutRoomAssignmentsInput = {
    id?: number
    date: Date | string
    startTime?: string | null
    endTime?: string | null
    subjectId: number
    seatingPlans?: SeatingPlanUncheckedCreateNestedManyWithoutExamInput
  }

  export type ExamCreateOrConnectWithoutRoomAssignmentsInput = {
    where: ExamWhereUniqueInput
    create: XOR<ExamCreateWithoutRoomAssignmentsInput, ExamUncheckedCreateWithoutRoomAssignmentsInput>
  }

  export type InvigilatorAssignmentCreateWithoutRoomAssignmentInput = {
    status?: string
    assignedAt?: Date | string
    completedAt?: Date | string | null
    invigilator: InvigilatorCreateNestedOneWithoutInvigilatorAssignmentsInput
  }

  export type InvigilatorAssignmentUncheckedCreateWithoutRoomAssignmentInput = {
    id?: number
    invigilatorId: number
    status?: string
    assignedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type InvigilatorAssignmentCreateOrConnectWithoutRoomAssignmentInput = {
    where: InvigilatorAssignmentWhereUniqueInput
    create: XOR<InvigilatorAssignmentCreateWithoutRoomAssignmentInput, InvigilatorAssignmentUncheckedCreateWithoutRoomAssignmentInput>
  }

  export type InvigilatorAssignmentCreateManyRoomAssignmentInputEnvelope = {
    data: InvigilatorAssignmentCreateManyRoomAssignmentInput | InvigilatorAssignmentCreateManyRoomAssignmentInput[]
    skipDuplicates?: boolean
  }

  export type RoomUpsertWithoutRoomAssignmentsInput = {
    update: XOR<RoomUpdateWithoutRoomAssignmentsInput, RoomUncheckedUpdateWithoutRoomAssignmentsInput>
    create: XOR<RoomCreateWithoutRoomAssignmentsInput, RoomUncheckedCreateWithoutRoomAssignmentsInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutRoomAssignmentsInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutRoomAssignmentsInput, RoomUncheckedUpdateWithoutRoomAssignmentsInput>
  }

  export type RoomUpdateWithoutRoomAssignmentsInput = {
    roomNumber?: StringFieldUpdateOperationsInput | string
    block?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    benches?: BenchUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutRoomAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomNumber?: StringFieldUpdateOperationsInput | string
    block?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    benches?: BenchUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type ExamUpsertWithoutRoomAssignmentsInput = {
    update: XOR<ExamUpdateWithoutRoomAssignmentsInput, ExamUncheckedUpdateWithoutRoomAssignmentsInput>
    create: XOR<ExamCreateWithoutRoomAssignmentsInput, ExamUncheckedCreateWithoutRoomAssignmentsInput>
    where?: ExamWhereInput
  }

  export type ExamUpdateToOneWithWhereWithoutRoomAssignmentsInput = {
    where?: ExamWhereInput
    data: XOR<ExamUpdateWithoutRoomAssignmentsInput, ExamUncheckedUpdateWithoutRoomAssignmentsInput>
  }

  export type ExamUpdateWithoutRoomAssignmentsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: SubjectUpdateOneRequiredWithoutExamsNestedInput
    seatingPlans?: SeatingPlanUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateWithoutRoomAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: IntFieldUpdateOperationsInput | number
    seatingPlans?: SeatingPlanUncheckedUpdateManyWithoutExamNestedInput
  }

  export type InvigilatorAssignmentUpsertWithWhereUniqueWithoutRoomAssignmentInput = {
    where: InvigilatorAssignmentWhereUniqueInput
    update: XOR<InvigilatorAssignmentUpdateWithoutRoomAssignmentInput, InvigilatorAssignmentUncheckedUpdateWithoutRoomAssignmentInput>
    create: XOR<InvigilatorAssignmentCreateWithoutRoomAssignmentInput, InvigilatorAssignmentUncheckedCreateWithoutRoomAssignmentInput>
  }

  export type InvigilatorAssignmentUpdateWithWhereUniqueWithoutRoomAssignmentInput = {
    where: InvigilatorAssignmentWhereUniqueInput
    data: XOR<InvigilatorAssignmentUpdateWithoutRoomAssignmentInput, InvigilatorAssignmentUncheckedUpdateWithoutRoomAssignmentInput>
  }

  export type InvigilatorAssignmentUpdateManyWithWhereWithoutRoomAssignmentInput = {
    where: InvigilatorAssignmentScalarWhereInput
    data: XOR<InvigilatorAssignmentUpdateManyMutationInput, InvigilatorAssignmentUncheckedUpdateManyWithoutRoomAssignmentInput>
  }

  export type InvigilatorCreateWithoutInvigilatorAssignmentsInput = {
    course: string
    phone: string
    address: string
    gender: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutInvigilatorInput
  }

  export type InvigilatorUncheckedCreateWithoutInvigilatorAssignmentsInput = {
    id?: number
    course: string
    phone: string
    address: string
    gender: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type InvigilatorCreateOrConnectWithoutInvigilatorAssignmentsInput = {
    where: InvigilatorWhereUniqueInput
    create: XOR<InvigilatorCreateWithoutInvigilatorAssignmentsInput, InvigilatorUncheckedCreateWithoutInvigilatorAssignmentsInput>
  }

  export type RoomAssignmentCreateWithoutInvigilatorAssignmentsInput = {
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
    room: RoomCreateNestedOneWithoutRoomAssignmentsInput
    exam: ExamCreateNestedOneWithoutRoomAssignmentsInput
  }

  export type RoomAssignmentUncheckedCreateWithoutInvigilatorAssignmentsInput = {
    id?: number
    roomId: number
    examId: number
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
  }

  export type RoomAssignmentCreateOrConnectWithoutInvigilatorAssignmentsInput = {
    where: RoomAssignmentWhereUniqueInput
    create: XOR<RoomAssignmentCreateWithoutInvigilatorAssignmentsInput, RoomAssignmentUncheckedCreateWithoutInvigilatorAssignmentsInput>
  }

  export type InvigilatorUpsertWithoutInvigilatorAssignmentsInput = {
    update: XOR<InvigilatorUpdateWithoutInvigilatorAssignmentsInput, InvigilatorUncheckedUpdateWithoutInvigilatorAssignmentsInput>
    create: XOR<InvigilatorCreateWithoutInvigilatorAssignmentsInput, InvigilatorUncheckedCreateWithoutInvigilatorAssignmentsInput>
    where?: InvigilatorWhereInput
  }

  export type InvigilatorUpdateToOneWithWhereWithoutInvigilatorAssignmentsInput = {
    where?: InvigilatorWhereInput
    data: XOR<InvigilatorUpdateWithoutInvigilatorAssignmentsInput, InvigilatorUncheckedUpdateWithoutInvigilatorAssignmentsInput>
  }

  export type InvigilatorUpdateWithoutInvigilatorAssignmentsInput = {
    course?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutInvigilatorNestedInput
  }

  export type InvigilatorUncheckedUpdateWithoutInvigilatorAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    course?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type RoomAssignmentUpsertWithoutInvigilatorAssignmentsInput = {
    update: XOR<RoomAssignmentUpdateWithoutInvigilatorAssignmentsInput, RoomAssignmentUncheckedUpdateWithoutInvigilatorAssignmentsInput>
    create: XOR<RoomAssignmentCreateWithoutInvigilatorAssignmentsInput, RoomAssignmentUncheckedCreateWithoutInvigilatorAssignmentsInput>
    where?: RoomAssignmentWhereInput
  }

  export type RoomAssignmentUpdateToOneWithWhereWithoutInvigilatorAssignmentsInput = {
    where?: RoomAssignmentWhereInput
    data: XOR<RoomAssignmentUpdateWithoutInvigilatorAssignmentsInput, RoomAssignmentUncheckedUpdateWithoutInvigilatorAssignmentsInput>
  }

  export type RoomAssignmentUpdateWithoutInvigilatorAssignmentsInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    room?: RoomUpdateOneRequiredWithoutRoomAssignmentsNestedInput
    exam?: ExamUpdateOneRequiredWithoutRoomAssignmentsNestedInput
  }

  export type RoomAssignmentUncheckedUpdateWithoutInvigilatorAssignmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExamCreateWithoutSeatingPlansInput = {
    date: Date | string
    startTime?: string | null
    endTime?: string | null
    subject: SubjectCreateNestedOneWithoutExamsInput
    roomAssignments?: RoomAssignmentCreateNestedManyWithoutExamInput
  }

  export type ExamUncheckedCreateWithoutSeatingPlansInput = {
    id?: number
    date: Date | string
    startTime?: string | null
    endTime?: string | null
    subjectId: number
    roomAssignments?: RoomAssignmentUncheckedCreateNestedManyWithoutExamInput
  }

  export type ExamCreateOrConnectWithoutSeatingPlansInput = {
    where: ExamWhereUniqueInput
    create: XOR<ExamCreateWithoutSeatingPlansInput, ExamUncheckedCreateWithoutSeatingPlansInput>
  }

  export type SeatCreateWithoutSeatingPlanInput = {
    position: number
    bench: BenchCreateNestedOneWithoutSeatsInput
    student: StudentCreateNestedOneWithoutSeatInput
  }

  export type SeatUncheckedCreateWithoutSeatingPlanInput = {
    id?: number
    benchId: number
    position: number
    studentId: number
  }

  export type SeatCreateOrConnectWithoutSeatingPlanInput = {
    where: SeatWhereUniqueInput
    create: XOR<SeatCreateWithoutSeatingPlanInput, SeatUncheckedCreateWithoutSeatingPlanInput>
  }

  export type SeatCreateManySeatingPlanInputEnvelope = {
    data: SeatCreateManySeatingPlanInput | SeatCreateManySeatingPlanInput[]
    skipDuplicates?: boolean
  }

  export type ExamUpsertWithoutSeatingPlansInput = {
    update: XOR<ExamUpdateWithoutSeatingPlansInput, ExamUncheckedUpdateWithoutSeatingPlansInput>
    create: XOR<ExamCreateWithoutSeatingPlansInput, ExamUncheckedCreateWithoutSeatingPlansInput>
    where?: ExamWhereInput
  }

  export type ExamUpdateToOneWithWhereWithoutSeatingPlansInput = {
    where?: ExamWhereInput
    data: XOR<ExamUpdateWithoutSeatingPlansInput, ExamUncheckedUpdateWithoutSeatingPlansInput>
  }

  export type ExamUpdateWithoutSeatingPlansInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: SubjectUpdateOneRequiredWithoutExamsNestedInput
    roomAssignments?: RoomAssignmentUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateWithoutSeatingPlansInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    subjectId?: IntFieldUpdateOperationsInput | number
    roomAssignments?: RoomAssignmentUncheckedUpdateManyWithoutExamNestedInput
  }

  export type SeatUpsertWithWhereUniqueWithoutSeatingPlanInput = {
    where: SeatWhereUniqueInput
    update: XOR<SeatUpdateWithoutSeatingPlanInput, SeatUncheckedUpdateWithoutSeatingPlanInput>
    create: XOR<SeatCreateWithoutSeatingPlanInput, SeatUncheckedCreateWithoutSeatingPlanInput>
  }

  export type SeatUpdateWithWhereUniqueWithoutSeatingPlanInput = {
    where: SeatWhereUniqueInput
    data: XOR<SeatUpdateWithoutSeatingPlanInput, SeatUncheckedUpdateWithoutSeatingPlanInput>
  }

  export type SeatUpdateManyWithWhereWithoutSeatingPlanInput = {
    where: SeatScalarWhereInput
    data: XOR<SeatUpdateManyMutationInput, SeatUncheckedUpdateManyWithoutSeatingPlanInput>
  }

  export type InvigilatorAssignmentCreateManyInvigilatorInput = {
    id?: number
    roomAssignmentId: number
    status?: string
    assignedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type InvigilatorAssignmentUpdateWithoutInvigilatorInput = {
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roomAssignment?: RoomAssignmentUpdateOneRequiredWithoutInvigilatorAssignmentsNestedInput
  }

  export type InvigilatorAssignmentUncheckedUpdateWithoutInvigilatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomAssignmentId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InvigilatorAssignmentUncheckedUpdateManyWithoutInvigilatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomAssignmentId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SemesterCreateManyCourseInput = {
    id?: number
    semesterNum: number
  }

  export type StudentCreateManyCourseInput = {
    id?: number
    name: string
    symbolNumber: string
    regNumber: string
    college: string
    semesterId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SemesterUpdateWithoutCourseInput = {
    semesterNum?: IntFieldUpdateOperationsInput | number
    subjects?: SubjectUpdateManyWithoutSemesterNestedInput
    students?: StudentUpdateManyWithoutSemesterNestedInput
  }

  export type SemesterUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    semesterNum?: IntFieldUpdateOperationsInput | number
    subjects?: SubjectUncheckedUpdateManyWithoutSemesterNestedInput
    students?: StudentUncheckedUpdateManyWithoutSemesterNestedInput
  }

  export type SemesterUncheckedUpdateManyWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    semesterNum?: IntFieldUpdateOperationsInput | number
  }

  export type StudentUpdateWithoutCourseInput = {
    name?: StringFieldUpdateOperationsInput | string
    symbolNumber?: StringFieldUpdateOperationsInput | string
    regNumber?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    semester?: SemesterUpdateOneRequiredWithoutStudentsNestedInput
    seat?: SeatUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    symbolNumber?: StringFieldUpdateOperationsInput | string
    regNumber?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    semesterId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seat?: SeatUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    symbolNumber?: StringFieldUpdateOperationsInput | string
    regNumber?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    semesterId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectCreateManySemesterInput = {
    id?: number
    name: string
    code: string
  }

  export type StudentCreateManySemesterInput = {
    id?: number
    name: string
    symbolNumber: string
    regNumber: string
    college: string
    courseId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubjectUpdateWithoutSemesterInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    exams?: ExamUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutSemesterInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    exams?: ExamUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateManyWithoutSemesterInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type StudentUpdateWithoutSemesterInput = {
    name?: StringFieldUpdateOperationsInput | string
    symbolNumber?: StringFieldUpdateOperationsInput | string
    regNumber?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutStudentsNestedInput
    seat?: SeatUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutSemesterInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    symbolNumber?: StringFieldUpdateOperationsInput | string
    regNumber?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    courseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seat?: SeatUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutSemesterInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    symbolNumber?: StringFieldUpdateOperationsInput | string
    regNumber?: StringFieldUpdateOperationsInput | string
    college?: StringFieldUpdateOperationsInput | string
    courseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamCreateManySubjectInput = {
    id?: number
    date: Date | string
    startTime?: string | null
    endTime?: string | null
  }

  export type ExamUpdateWithoutSubjectInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    roomAssignments?: RoomAssignmentUpdateManyWithoutExamNestedInput
    seatingPlans?: SeatingPlanUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    roomAssignments?: RoomAssignmentUncheckedUpdateManyWithoutExamNestedInput
    seatingPlans?: SeatingPlanUncheckedUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateManyWithoutSubjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoomAssignmentCreateManyExamInput = {
    id?: number
    roomId: number
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
  }

  export type SeatingPlanCreateManyExamInput = {
    id?: number
    createdAt?: Date | string
    isActive?: boolean
  }

  export type RoomAssignmentUpdateWithoutExamInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    room?: RoomUpdateOneRequiredWithoutRoomAssignmentsNestedInput
    invigilatorAssignments?: InvigilatorAssignmentUpdateManyWithoutRoomAssignmentNestedInput
  }

  export type RoomAssignmentUncheckedUpdateWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    invigilatorAssignments?: InvigilatorAssignmentUncheckedUpdateManyWithoutRoomAssignmentNestedInput
  }

  export type RoomAssignmentUncheckedUpdateManyWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SeatingPlanUpdateWithoutExamInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    seats?: SeatUpdateManyWithoutSeatingPlanNestedInput
  }

  export type SeatingPlanUncheckedUpdateWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    seats?: SeatUncheckedUpdateManyWithoutSeatingPlanNestedInput
  }

  export type SeatingPlanUncheckedUpdateManyWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BenchCreateManyRoomInput = {
    id?: number
    benchNo: number
    capacity: number
    createdAt?: Date | string
  }

  export type RoomAssignmentCreateManyRoomInput = {
    id?: number
    examId: number
    isActive?: boolean
    isCompleted?: boolean
    completedAt?: Date | string | null
  }

  export type BenchUpdateWithoutRoomInput = {
    benchNo?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seats?: SeatUpdateManyWithoutBenchNestedInput
  }

  export type BenchUncheckedUpdateWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    benchNo?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seats?: SeatUncheckedUpdateManyWithoutBenchNestedInput
  }

  export type BenchUncheckedUpdateManyWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    benchNo?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomAssignmentUpdateWithoutRoomInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exam?: ExamUpdateOneRequiredWithoutRoomAssignmentsNestedInput
    invigilatorAssignments?: InvigilatorAssignmentUpdateManyWithoutRoomAssignmentNestedInput
  }

  export type RoomAssignmentUncheckedUpdateWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    invigilatorAssignments?: InvigilatorAssignmentUncheckedUpdateManyWithoutRoomAssignmentNestedInput
  }

  export type RoomAssignmentUncheckedUpdateManyWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SeatCreateManyBenchInput = {
    id?: number
    position: number
    studentId: number
    seatingPlanId?: number | null
  }

  export type SeatUpdateWithoutBenchInput = {
    position?: IntFieldUpdateOperationsInput | number
    student?: StudentUpdateOneRequiredWithoutSeatNestedInput
    seatingPlan?: SeatingPlanUpdateOneWithoutSeatsNestedInput
  }

  export type SeatUncheckedUpdateWithoutBenchInput = {
    id?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    seatingPlanId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SeatUncheckedUpdateManyWithoutBenchInput = {
    id?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    seatingPlanId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InvigilatorAssignmentCreateManyRoomAssignmentInput = {
    id?: number
    invigilatorId: number
    status?: string
    assignedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type InvigilatorAssignmentUpdateWithoutRoomAssignmentInput = {
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    invigilator?: InvigilatorUpdateOneRequiredWithoutInvigilatorAssignmentsNestedInput
  }

  export type InvigilatorAssignmentUncheckedUpdateWithoutRoomAssignmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    invigilatorId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InvigilatorAssignmentUncheckedUpdateManyWithoutRoomAssignmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    invigilatorId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SeatCreateManySeatingPlanInput = {
    id?: number
    benchId: number
    position: number
    studentId: number
  }

  export type SeatUpdateWithoutSeatingPlanInput = {
    position?: IntFieldUpdateOperationsInput | number
    bench?: BenchUpdateOneRequiredWithoutSeatsNestedInput
    student?: StudentUpdateOneRequiredWithoutSeatNestedInput
  }

  export type SeatUncheckedUpdateWithoutSeatingPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    benchId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
  }

  export type SeatUncheckedUpdateManyWithoutSeatingPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    benchId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}