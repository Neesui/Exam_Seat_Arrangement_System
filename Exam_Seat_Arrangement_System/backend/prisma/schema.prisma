generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  INVIGILATOR
}

model User {
  id          Int         @id @default(autoincrement())
  name        String
  email       String      @unique
  password    String
  role        Role        @default(INVIGILATOR)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  invigilator Invigilator?
}

model Invigilator {
  id                    Int                      @id @default(autoincrement())
  course                String
  phone                 String
  address               String
  gender                String
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt

  userId                Int                      @unique
  user                  User                     @relation(fields: [userId], references: [id])

  invigilatorAssignments InvigilatorAssignment[]
}

model Course {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  duration    Int         // total semesters, e.g., 8

  semesters   Semester[]
  students    Student[]
}

model Semester {
  id          Int         @id @default(autoincrement())
  semesterNum      Int         // 1, 2, 3, ..., 8
  courseId    Int

  course      Course      @relation(fields: [courseId], references: [id])
  subjects    Subject[]
  students    Student[]
}

model Subject {
  id          Int         @id @default(autoincrement())
  subjectName        String
  code        String      @unique
  semesterId  Int

  semester    Semester    @relation(fields: [semesterId], references: [id])
  exams       Exam[]
}

model Student {
  id           Int         @id @default(autoincrement())
  name         String
  symbolNumber String
  regNumber    String
  college      String
  courseId     Int
  semesterId   Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  course       Course      @relation(fields: [courseId], references: [id])
  semester     Semester    @relation(fields: [semesterId], references: [id])
  seat         Seat?

  @@unique([symbolNumber, college])
}

model Exam {
  id              Int             @id @default(autoincrement())
  date            DateTime
  startTime       String?
  endTime         String?
  subjectId       Int

  subject         Subject         @relation(fields: [subjectId], references: [id])
  roomAssignments RoomAssignment[]
  seatingPlans    SeatingPlan[]
}

model Room {
  id              Int             @id @default(autoincrement())
  roomNumber      String          @unique
  block           String?
  floor           String?
  maxColumns  Int       @default(2)

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  benches         Bench[]
  roomAssignments RoomAssignment[]
}

model Bench {
  id        Int       @id @default(autoincrement())
  roomId    Int
  benchNo   Int
  row       Int       // Row number, starting from 1
  column    Int       // Column number, starting from 0
  capacity  Int       // 2 or 3 seats
  createdAt DateTime  @default(now())

  room      Room      @relation(fields: [roomId], references: [id])
  seats     Seat[]

    @@unique([roomId, row, column])

}

model Seat {
  id             Int           @id @default(autoincrement())
  benchId        Int
  position       Int           // 1=Left, 2=Right, 3=Middle
  studentId      Int           @unique
  seatingPlanId  Int?

  bench          Bench         @relation(fields: [benchId], references: [id])
  student        Student       @relation(fields: [studentId], references: [id])
  seatingPlan    SeatingPlan?  @relation(fields: [seatingPlanId], references: [id])
}

model RoomAssignment {
  id                    Int                      @id @default(autoincrement())
  roomId                Int
  examId                Int
  isActive              Boolean                  @default(true)
  isCompleted           Boolean                  @default(false)
  completedAt           DateTime?

  room                  Room                     @relation(fields: [roomId], references: [id])
  exam                  Exam                     @relation(fields: [examId], references: [id])
  invigilatorAssignments InvigilatorAssignment[]
}

model InvigilatorAssignment {
  id                Int       @id @default(autoincrement())
  invigilatorId     Int
  roomAssignmentId  Int
  status            String    @default("ASSIGNED")
  assignedAt        DateTime  @default(now())
  completedAt       DateTime?

  invigilator       Invigilator     @relation(fields: [invigilatorId], references: [id])
  roomAssignment    RoomAssignment  @relation(fields: [roomAssignmentId], references: [id])
}

model SeatingPlan {
  id          Int       @id @default(autoincrement())
  examId      Int
  createdAt   DateTime  @default(now())
  isActive    Boolean   @default(true)
  exam        Exam      @relation(fields: [examId], references: [id])
  seats       Seat[]
}
