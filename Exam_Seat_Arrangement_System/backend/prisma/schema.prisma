generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  INVIGILATOR
}

model User {
  id          Int         @id @default(autoincrement())
  name        String
  email       String      @unique
  password    String
  role        Role        @default(INVIGILATOR)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  invigilator Invigilator?
}

model Invigilator {
  id                     Int                      @id @default(autoincrement())
  course                 String
  phone                  String
  address                String
  gender                 String
  imageUrl               String?                  // ðŸ‘ˆ Profile image for Invigilator
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt

  userId                 Int                      @unique
  user                   User                     @relation(fields: [userId], references: [id])

  invigilatorAssignments InvigilatorAssignment[]
}

model Course {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  duration  Int       // total semesters, e.g., 8
  batchYear Int

  semesters Semester[]
  students  Student[]
  @@unique([name, batchYear])
}

model Semester {
  id          Int         @id @default(autoincrement())
  semesterNum Int         // 1, 2, 3, ..., 8
  courseId    Int

  course      Course      @relation(fields: [courseId], references: [id])
  subjects    Subject[]
  students    Student[]
}

model Subject {
  id         Int       @id @default(autoincrement())
  subjectName String
  code       String    @unique
  semesterId Int

  semester   Semester  @relation(fields: [semesterId], references: [id])
  exams      Exam[]
}

model Student {
  id           Int         @id @default(autoincrement())
  studentName  String
  symbolNumber String
  regNumber    String
  college      String
  courseId     Int
  semesterId   Int
  imageUrl     String?      // ðŸ‘ˆ Profile image for Student
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  course       Course       @relation(fields: [courseId], references: [id])
  semester     Semester     @relation(fields: [semesterId], references: [id])
  seat         Seat?

  @@unique([symbolNumber, college])
  @@map("student")

}

model Exam {
  id              Int             @id @default(autoincrement())
  date            DateTime
  startTime       DateTime?
  endTime         DateTime?
  subjectId       Int

  subject         Subject         @relation(fields: [subjectId], references: [id])
  roomAssignments RoomAssignment[]
  seatingPlans    SeatingPlan[]

  @@map("exam")
}

model Room {
  id              Int      @id @default(autoincrement())
  roomNumber      String
  block           String
  floor           String
  benches         Bench[]  
  roomAssignments RoomAssignment[]

  totalBench      Int      @default(0)
  totalCapacity   Int      @default(0)

  @@map("room") 
}

model Bench {
  id        Int       @id @default(autoincrement())
  roomId    Int
  benchNo   Int       
  row       Int
  column    Int
  capacity  Int
  createdAt DateTime  @default(now())

  room      Room      @relation(fields: [roomId], references: [id])
  seats     Seat[]

  @@unique([roomId, row, column])
  @@unique([roomId, benchNo])
  @@map("bench")

}

model Seat {
  id             Int           @id @default(autoincrement())
  benchId        Int
  position       Int           // 1=Left, 2=Right, 3=Middle
  studentId      Int           @unique
  seatingPlanId  Int?

  bench          Bench         @relation(fields: [benchId], references: [id])
  student        Student       @relation(fields: [studentId], references: [id])
  seatingPlan    SeatingPlan?  @relation(fields: [seatingPlanId], references: [id])
  @@map("seat")

}

model RoomAssignment {
  id                     Int                      @id @default(autoincrement())
  roomId                 Int
  examId                 Int
  isActive               Boolean                  @default(true)
  isCompleted            Boolean                  @default(false)
  completedAt            DateTime?

  room                   Room                     @relation(fields: [roomId], references: [id])
  exam                   Exam                     @relation(fields: [examId], references: [id])
  invigilatorAssignments InvigilatorAssignment[]
}

model InvigilatorAssignment {
  id               Int       @id @default(autoincrement())
  invigilatorId    Int
  roomAssignmentId Int
  status           String    @default("ASSIGNED")
  assignedAt       DateTime  @default(now())
  completedAt      DateTime?

  invigilator      Invigilator     @relation(fields: [invigilatorId], references: [id])
  roomAssignment   RoomAssignment  @relation(fields: [roomAssignmentId], references: [id])
}

model SeatingPlan {
  id        Int       @id @default(autoincrement())
  examId    Int
  createdAt DateTime  @default(now())
  isActive  Boolean   @default(true)

  exam      Exam      @relation(fields: [examId], references: [id])
  seats     Seat[]

    @@map("seatingPlan")

}
