  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }

  enum Role {
    ADMIN
    INVIGILATOR
  }

  enum RoomAssignmentStatus {
    ACTIVE
    COMPLETED
    CANCELED
  }

  enum InvigilatorStatus {
    ASSIGNED
    COMPLETED
  }

  model User {
    id          Int         @id @default(autoincrement())
    name        String
    email       String      @unique
    password    String
    role        Role        @default(INVIGILATOR)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    notifications Notification[]  

    invigilator Invigilator?

    @@map("user")
  }

  model OTPVerification {
  id         Int      @id @default(autoincrement())
  email      String
  otp        String
  purpose    String   // e.g., "2FA" or "RESET"
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@map("otp_verification")
  }

  model Invigilator {
    id           Int                      @id @default(autoincrement())
    course       String
    phone        String
    address      String
    gender       String
    imageUrl     String?
    qualification     String?
    dateOfBirth       DateTime?
    specialization    String?
    description  String?
    createdAt    DateTime                 @default(now())
    updatedAt    DateTime                 @updatedAt

    userId       Int                      @unique
    user         User                     @relation(fields: [userId], references: [id])

    assignments  InvigilatorOnAssignment[]

    @@map("invigilator")
  }

  model Course {
    id        Int       @id @default(autoincrement())
    name      String
    duration  Int
    batchYear Int
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    semesters Semester[]
    students  Student[]

    @@unique([name, batchYear])
    @@map("course")
  }

  model Semester {
    id          Int         @id @default(autoincrement())
    semesterNum Int
    courseId    Int
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    course      Course      @relation(fields: [courseId], references: [id])
    subjects    Subject[]
    students    Student[]

    @@map("semester")
  }

  model Subject {
    id          Int       @id @default(autoincrement())
    subjectName String
    code        String    @unique
    semesterId  Int
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    semester    Semester  @relation(fields: [semesterId], references: [id])
    exams       Exam[]

    @@map("subject")
  }

  model Student {
    id           Int         @id @default(autoincrement())
    studentName  String
    email        String     @unique
    symbolNumber String
    regNumber    String
    college      String
    courseId     Int
    semesterId   Int
    imageUrl     String?
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt

    course       Course      @relation(fields: [courseId], references: [id])
    semester     Semester    @relation(fields: [semesterId], references: [id])
    seats        Seat[]
    notifications Notification[]  


    @@unique([symbolNumber, college])
    @@map("student")
  }

  model Exam {
    id              Int             @id @default(autoincrement())
    date            DateTime
    startTime       DateTime?
    endTime         DateTime?
    subjectId       Int
    isActive        Boolean         @default(true)
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt

    subject         Subject         @relation(fields: [subjectId], references: [id])
    roomAssignments RoomAssignment[]
    seatingPlans    SeatingPlan[]

    @@map("exam")
  }

  model Room {
    id              Int      @id @default(autoincrement())
    roomNumber      String
    block           String
    floor           String
    totalBench      Int      @default(0)
    totalCapacity   Int      @default(0)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    benches         Bench[]
    roomAssignments RoomAssignment[]

    @@map("room")
  }

  model Bench {
    id        Int       @id @default(autoincrement())
    roomId    Int
    benchNo   Int
    row       Int
    column    Int
    capacity  Int
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    room      Room      @relation(fields: [roomId], references: [id])
    seats     Seat[]

    @@unique([roomId, row, column])
    @@unique([roomId, benchNo])
    @@map("bench")
  }

  model Seat {
    id             Int          @id @default(autoincrement())
    benchId        Int
    position       Int
    studentId      Int
    seatingPlanId  Int
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    bench          Bench        @relation(fields: [benchId], references: [id])
    student        Student      @relation(fields: [studentId], references: [id])
    seatingPlan    SeatingPlan  @relation(fields: [seatingPlanId], references: [id])

    @@unique([studentId, seatingPlanId])
    @@map("seat")
  }

  model RoomAssignment {
    id                     Int                      @id @default(autoincrement())
    roomId                 Int
    examId                 Int
    status                 RoomAssignmentStatus     @default(ACTIVE)
    assignedAt             DateTime                 @default(now())
    completedAt            DateTime?
    createdAt              DateTime                 @default(now())
    updatedAt              DateTime                 @updatedAt

    room                   Room                     @relation(fields: [roomId], references: [id])
    exam                   Exam                     @relation(fields: [examId], references: [id])
    invigilatorAssignments InvigilatorAssignment[]

    @@map("roomAssignment")
  }

  model InvigilatorAssignment {
    id               Int                     @id @default(autoincrement())
    roomAssignmentId Int
    status           InvigilatorStatus       @default(ASSIGNED)
    assignedAt       DateTime                @default(now())
    completedAt      DateTime?
    createdAt        DateTime                @default(now())
    updatedAt        DateTime                @updatedAt

    roomAssignment   RoomAssignment          @relation(fields: [roomAssignmentId], references: [id])
    invigilators     InvigilatorOnAssignment[]

    @@map("invigilatorAssignment")
  }

  model InvigilatorOnAssignment {
    id                       Int @id @default(autoincrement())
    invigilatorId            Int
    invigilatorAssignmentId  Int

    invigilator              Invigilator          @relation(fields: [invigilatorId], references: [id])
    invigilatorAssignment    InvigilatorAssignment @relation(fields: [invigilatorAssignmentId], references: [id])

    @@unique([invigilatorId, invigilatorAssignmentId])
    @@map("invigilatorOnAssignment")
  }

  model SeatingPlan {
    id        Int       @id @default(autoincrement())
    examId    Int
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now())
    isActive  Boolean   @default(true)

    exam      Exam      @relation(fields: [examId], references: [id])
    seats     Seat[]

    @@map("seatingPlan")
  }

model Notification {
  id          Int       @id @default(autoincrement())
  message     String
  title       String
  isRead      Boolean   @default(false)
  // Link to either a User (invigilator/admin) OR a Student.
  userId      Int?      
  studentId   Int?      
  createdAt   DateTime  @default(now())

  user        User?     @relation(fields: [userId], references: [id])
  student     Student?  @relation(fields: [studentId], references: [id])

  @@map("notification")
}

